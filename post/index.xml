<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Fresh Swift</title>
    <link>https://freshswift.net/post/</link>
    <description>Recent content in Posts on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using ‘@unknown default’ within switch statements</title>
      <link>https://www.swiftbysundell.com/articles/using-an-unknown-default-case-within-a-switch-statement/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>In Swift 4.2, enums defined in the standard library are either frozen or non-frozen. A frozen enum is one that will never get a new case. In this post, John Sundell shows us how to handle non-frozen enums in Switch statements.</description>
    </item>
    
    <item>
      <title>StaticString, and how it works internally in Swift</title>
      <link>https://swiftrocks.com/staticstring-in-swift</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s StaticString is a type designed to represent text known at compile time. Instances of this type are immutable, and it provides only low-level access to its contents. In this post, Bruno Rocha examines StaticString, explaining how the Swift compiler differentiates it from regular Swift strings.</description>
    </item>
    
    <item>
      <title>SwiftUI - Router Pattern</title>
      <link>https://davidgarywood.com/writing/swiftui-router-pattern</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>The coordinator pattern is a pattern often used when developing iOS apps using UIKit. It enables developers to separate navigation logic from view logic, resulting in reusable and testable code. In this post, David Gary Wood demonstrates an equivalent pattern implemented with SwiftUI, which he calls the router pattern.</description>
    </item>
    
    <item>
      <title>Using tuples to Complex Sorting Operations in Swift</title>
      <link>https://holyswift.app/using-tuples-to-complex-sorting-operations-in-swift</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>The Swift standard library contains several overloads of the &lt; comparison operator used to compare tuples of various sizes. In this post, Leonardo Maia Pugliese demonstrates how to use these overloads to implement complex sorting operations.</description>
    </item>
    
    <item>
      <title>Backporting new features with @_alwaysEmitIntoClient</title>
      <link>https://www.fivestars.blog/articles/alwaysEmitIntoClient/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>Swift attributes provide additional information about a declaration or type. In this post, Federico Zanetello explains how SwiftUI uses the @_alwaysEmitIntoClient attribute to make new features available on older OS versions.</description>
    </item>
    
    <item>
      <title>Throwing and asynchronous Swift properties</title>
      <link>https://www.swiftbysundell.com/articles/throwing-async-properties/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Computed properties that only define a get accessor are read-only. When they also have associated behavior, an effect, they are known as effectful read-only properties. In this post, John Sundell demonstrates how such properties can throw errors and perform asynchronous tasks.</description>
    </item>
    
    <item>
      <title>Copy-On-Assignment vs. Copy-On-Write in Swift</title>
      <link>https://aymanmoo.medium.com/copy-on-assignment-vs-copy-on-write-in-swift-c3016b343d06</link>
      <pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Copy-on-write is a resource-management technique used to efficiently copy data, such as a Swift struct. It involves delaying the copy operation of the data until it&#39;s needed, usually when some part of the data is modified. In this post, Ayman Fayez shows us how to implement copy-on-write for a Swift struct which has a reference type as a property.</description>
    </item>
    
    <item>
      <title>Dependency Injection in Swift using latest Swift features</title>
      <link>https://www.avanderlee.com/swift/dependency-injection/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Dependency injection is a commonly-used technique to enable simplified testing and code reuse. In this post, Antoine Van Der Lee shows us how to avoid using third-party dependency injection libraries, providing his implementation of dependency injection for Swift types using static subscripts, extensions, and property wrappers.</description>
    </item>
    
    <item>
      <title>5 Complex Algorithms Simplified Using Swift’s Higher-Order Functions</title>
      <link>https://swiftsenpai.com/swift/5-complex-algorithms-simplified/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Higher-order functions accept one or more functions as arguments, return a function, or do both. Swift&#39;s higher-order functions, such as map and reduce, enable us to implement complex algorithms in a simplified manner. In this post, Lee Kah Seng provides five examples of such implementations.</description>
    </item>
    
    <item>
      <title>Bridge from Combine to AsyncSequence - the plan (p. 1)</title>
      <link>https://trycombine.com/posts/combine-async-sequence-1/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Despite only being released with iOS 13, it seems like Apple&#39;s Combine framework - used for handling asynchronous events - has been overshadowed by the new Swift concurrency model. In this post, Marin Todorov looks at both of these technologies, with the goal of bridging from a Combine Subscriber to an AsyncSequence.</description>
    </item>
    
    <item>
      <title>Swift actors tutorial - a beginner&#39;s guide to thread safe concurrency</title>
      <link>https://theswiftdev.com/swift-actors-tutorial-a-beginners-guide-to-thread-safe-concurrency/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s Actor type allows only one task at a time to access its mutable state, making it safe for use by concurrently executing tasks. Here, Tibor Bödecs from The Swift Dev teaches us how to use this new type to protect our applications from unwanted data-races and memory issues.</description>
    </item>
    
    <item>
      <title>Xcode DocC - Getting Started</title>
      <link>https://useyourloaf.com/blog/xcode-docc-getting-started/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Available in Xcode 13, the DocC documentation compiler converts Markdown-based text into developer documentation for Swift frameworks and packages and displays it in the Xcode documentation window. In this post, Keith Harrison runs through an example of using DocC to help us get started.</description>
    </item>
    
    <item>
      <title> Fixing a hard-to-find bug in Dark Mode</title>
      <link>https://www.jessesquires.com/blog/2021/07/15/fixing-a-hard-to-find-bug-in-dark-mode/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>The worst kind of software bugs are inconsistent: sometimes they occur, sometimes they don&#39;t. In this post, Jesse Squires tracks down such a bug, and explains how he implemented the fix.</description>
    </item>
    
    <item>
      <title>Converting closure-based code into async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Existing Swift APIs often provide asynchronous code execution using callback closures or delegate methods, which allow the caller to define what happens when the asynchronous task has finished. Swift&#39;s new concurrency model enables us to create similar asynchronous APIs using async/await and also provides methods for interfacing async/await with existing callback-based or delegate-based asynchronous APIs. In this post from his Modern Concurrency in Swift series, Andy Ibanez explains what continuations are and shows us how to use them to bridge from closure-based or delegate-based APIs to async/await.</description>
    </item>
    
    <item>
      <title>Cooperative Task Cancellation</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part2/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>This post from Peter Friese from his SwiftUI Concurrency Essentials series focuses on the topic of cooperative task cancellation. Peter provides a SwiftUI example demonstrating why  cancellation is important, and shows us how to use cooperative cancellation in our asynchronous code.</description>
    </item>
    
    <item>
      <title>How Swift runs an async executable</title>
      <link>https://oleb.net/2021/async-program-launch-sequence/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>The @main Swift attribute allows us to specify a particular type as the entry point for beginning program execution. Types marked with @main have a single implicit requirement: declaring a static main method. In this post, Ole Begemann provides some insight into how the Swift runtime executes an async program entry point with the help of the Swift compiler.</description>
    </item>
    
    <item>
      <title>The importance of cooperative cancellation</title>
      <link>https://alejandromp.com/blog/the-importance-of-cooperative-cancellation/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>In the context of concurrent programming, cooperative cancellation refers to a system where parent tasks and child tasks need to cooperate to ensure the correct cancellation of asynchronous tasks. The new Swift concurrency model supports cooperative cancellation, and in this post, Alejandro Martinez explains its importance.</description>
    </item>
    
    <item>
      <title>Advanced SwiftUI Animations — Part 4: TimelineView</title>
      <link>https://swiftui-lab.com/swiftui-animations-part4</link>
      <pubDate>Wed, 14 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Announced at WWDC 21, SwiftUI&#39;s TimelineView is a view that updates according to a provided schedule. In this post, part of a series of posts on advanced SwiftUI animations, Javier explores this new view in detail. Despite it being two years since the last entry in this series, Javier remains excited about SwiftUI animations, and this comes across in this enthusiastic post.</description>
    </item>
    
    <item>
      <title>Getting Started with async/await in SwiftUI</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s new concurrency model continues to be one of the most popular topics amongst the developer community. There have already been many great articles written on the topic, but I still enjoy reading more about it, as it helps cement understanding. In this post, Peter Friese helps us get started with async/await, demonstrating how it interacts with SwiftUI and its latest features.</description>
    </item>
    
    <item>
      <title>Table and Collection View Cells Reload Improvements in iOS 15</title>
      <link>https://swiftsenpai.com/development/cells-reload-improvements-ios-15/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>iOS 15 includes several new APIs that help to make UICollectionViews and UITableViews more performant. In this post, Lee Kah Seng from Swift Senpai demonstrates how to use these APIs via a fully working sample project.</description>
    </item>
    
    <item>
      <title>Understanding async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s new async/await feature plays a major role in the language&#39;s new concurrency model. In this post, which is part of a series, Andy Ibanez first offers a refresher on some existing concepts before introducing us to async/await.</description>
    </item>
    
    <item>
      <title>What&#39;s new in Swift 5.5?</title>
      <link>https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5, available in any Xcode 13 beta, includes a huge number of changes to the language. At WWDC this year, a lot of these changes were covered by session videos. However, despite being published before WWDC, this in-depth article from Paul Hudson is still worth a read. Paul walks through most of the language changes introduced in Swift 5.5, with code samples for each. Lot&#39;s to cover here.</description>
    </item>
    
    <item>
      <title>iOS 15: Notable UIKit Additions</title>
      <link>https://www.swiftjectivec.com/ios-15-notable-uikit-additions/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Despite SwiftUI stealing the limelight in recent years, UIKit still has a place in Apple&#39;s heart. With iOS 15, UIKit gains a host of new capabilities and APIs, and in this post, Jordan Morgan provides instructions on how to use some of them. Swift code samples included.</description>
    </item>
    
    <item>
      <title>Async/Await and the Future of Combine</title>
      <link>https://benscheirman.com/2021/06/async-await-and-the-future-of-combine/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>With the debut of the new Swift Concurrency model at WWWDC this year, it was noticeable how some of its language features appear to be replacements for some of the Combine frameworks features. In this honest post on the topic, Ben Scheirman, who authored an entire course on Combine, gives his take on its future.</description>
    </item>
    
    <item>
      <title>Structured concurrency</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>A lot of the sessions at this years&#39; WWDC related to the new concurrency model in Swift. A central part of this model is the concept of structured concurrency, which enables concurrent execution of asynchronous code. The language features are now available in the latest Xcode beta, and this proposal provides lots of background on this major Swift language evolution.</description>
    </item>
    
    <item>
      <title>AsyncImage in SwiftUI</title>
      <link>https://serialcoder.dev/text-tutorials/swiftui/asyncimage-in-swiftui/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>New in iOS 15 is AsyncImage, a new SwiftUI View for fetching and displaying remote images from a URL. Here, Gabriel Theodoropoulos demonstrates how to use this new type, and highlights some of its pros and cons.</description>
    </item>
    
    <item>
      <title>What is new in SwiftUI after WWDC21</title>
      <link>https://swiftwithmajid.com/2021/06/08/what-is-new-in-swiftui-after-wwdc21/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>SwiftUI took another substantial and welcomed step forward this year at WWDC. Along with some expected improvements, such as the new refreshable ViewModifier, we also saw some less anticipated additions such as the new TimeLine View type. In this post, Majid Jabrayilov provides his summary of significant SwiftUI additions announced at WWDC21.</description>
    </item>
    
    <item>
      <title>Avoiding having to recompute values within SwiftUI views</title>
      <link>https://swiftbysundell.com/articles/avoiding-swiftui-value-recomputation/</link>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>SwiftUI is a fantastic framework, with its declarative approach removing a lot of the complexity that comes with orchestrating UI updates. However, this benefit also comes with the cost, as developers can&#39;t have complete control over when and how the code in a View body property will be executed. Here, John Sundell explains an issue this can cause, and provides some approaches he uses to mitigate it.</description>
    </item>
    
    <item>
      <title>Core Data In Memory Store</title>
      <link>https://useyourloaf.com/blog/core-data-in-memory-store/</link>
      <pubDate>Sun, 13 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>Core Data uses an on-disk store by default, which can cause some unnecessary work when running tests on store-related logic. In this short post, Keith Harrison shows us how using an in-memory is more efficient for testing, while also speeding up SwiftUI previews.</description>
    </item>
    
    <item>
      <title>Simpler way to deal with hardcoded ViewModifer values in SwiftUI</title>
      <link>https://dev.to/vibrazy/simpler-way-to-deal-with-hardcoded-viewmodifers-values-in-swiftui-e6m</link>
      <pubDate>Sat, 12 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>When working with SwiftUI, it&#39;s likely that at some point we will want to configure a property of our UI based on a conditional value. For example, setting a font color to red when an error occurs. However, as Daniel Tavares explains in this post, this can become cumbersome when we have a lot of UI properties that depend on conditional values. Luckily, Daniel has something which can help, and he shares it with us in this post.</description>
    </item>
    
    <item>
      <title>Introspect for SwiftUI</title>
      <link>https://github.com/siteline/SwiftUI-Introspect</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>A lot of SwiftUI View types are implemented on top of existing UIKit or AppKit types. Introspect is a library that allows us to access the underlying type of a SwiftUI view. This can be useful when we want to change some property of our UI which is not yet exposed via SwiftUI.</description>
    </item>
    
    <item>
      <title>Abstracting Navigation in SwiftUI</title>
      <link>https://obscuredpixels.com/abstracting-navigation-in-swiftui</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>Currently, implementing navigation between SwiftUI views usually means adding navigation logic that is tightly coupled to a View&#39;s body implementation. However, there are things we can do to reduce this coupling, and in this post, Omar demonstrates an approach he uses to decouple navigation logic from Views using some abstraction.</description>
    </item>
    
    <item>
      <title>The Laws of Core Data</title>
      <link>https://davedelong.com/blog/2018/05/09/the-laws-of-core-data/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>Core Data is a persistence framework provided by Apple that is used to save or cache data on devices. In this post, the always insightful Dave Delong shares his laws of core data. These are a set of rules on how to use Core Data which Dave thinks should ensure an almost entirely painless experience.</description>
    </item>
    
    <item>
      <title>Unlock existentials for all protocols</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0309-unlock-existential-types-for-all-protocols.md</link>
      <pubDate>Fri, 28 May 2021 00:00:00 +0000</pubDate>
      
      <description>Swift existential types provide value-level abstraction, allowing values of varying concrete types to be used interchangeably as values of the same existential type. In this accepted Swift evolution proposal, the authors outline their objective of alleviating some current limitations which impact the ability to use protocols as existential types.</description>
    </item>
    
    <item>
      <title>Manual UIKit Layout</title>
      <link>https://www.highcaffeinecontent.com/blog/20210513-Manual-UIKit-Layout</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <description>With Interface Builder, Storyboards, and AutoLayout available, it&#39;s likely uncommon that developers these days choose to layout their UIKit views manually. However, as this post from Steve Troughton-Smith demonstrates, sometimes what might seem like the most basic approach is also the most suitable approach.</description>
    </item>
    
    <item>
      <title>How OrderedSet works</title>
      <link>https://oleb.net/2021/ordered-set/</link>
      <pubDate>Sun, 23 May 2021 00:00:00 +0000</pubDate>
      
      <description>The recently released Swift Collections package provides additional data structures such as Deque and OrderedSet. In this short post, Ole Begemann explains how OrderedSet works and points out an importing difference between hash tables and dictionaries.</description>
    </item>
    
    <item>
      <title>Swift 5.4 Released!</title>
      <link>https://swift.org/blog/swift-5-4-released/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      
      <description>Available now in Xcode 12.5, Swift 5.4 brings with it new language features, better runtime performance, and an improved developer experience. In this post, Ted Kremenek from the Swift Core Team provides an overview of what is included in this latest evolution of the language.</description>
    </item>
    
    <item>
      <title>Bringing Polymorphism to Codable</title>
      <link>https://lostmoa.com/blog/BringingPolymorphismToCodable/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <description>Polymorphism refers to the use of a single type to represent multiple different types. In this post, Matthaus Woolard shows us how to bring polymorphic behavior to Swift&#39;s Codable protocols, and provides a convenient property wrapper to avoid boilerplate code.</description>
    </item>
    
    <item>
      <title>Introducing Swift Collections</title>
      <link>https://swift.org/blog/swift-collections/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <description>Like the Swift Algorithms package before it, the recently released Swift Collections package is intended to incubate new functionality for the Swift Standard Library. In this post, Karoy Lorentey from the Swift Standard Library team gives us a brief tour of what the package provides.</description>
    </item>
    
    <item>
      <title>What’s the difference between a singleton and a shared instance in Swift?</title>
      <link>https://www.donnywals.com/whats-the-difference-between-a-singleton-and-a-shared-instance-in-swift/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <description>The Singleton pattern is a well-known design pattern that aims to allow exactly one single instantiation of a type. A similar pattern often used in iOS development is to create a shared instance of an object that can be accessed from anywhere in a project. In this short post, Donny Wals explains the subtle difference between the two.</description>
    </item>
    
    <item>
      <title>Concurrency Done Right</title>
      <link>https://kean.blog/post/concurrency#fn:7</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <description>The Swift Concurrency Roadmap details future Swift language features which plan to make concurrent programming in Swift convenient and safe. However, there are already several ways we can add concurrency to our projects, and in this post, Alex Grebenyuk shows us how to do it right.</description>
    </item>
    
    <item>
      <title>Extending UIKit with Combine, MVVM and Unit Tests</title>
      <link>https://hammyassassin.medium.com/extending-uikit-with-combine-mvvm-and-unit-tests-597f47c76630</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s Combine is a powerful framework for processing values over time and is an alternative to popular frameworks such as RxSwift and ReactiveCocoa. In this short post, HammyAssassin shows us how to extend UIKit with Combine, creating a custom Publisher and Subscriber to respond to changes in a UITextField.</description>
    </item>
    
    <item>
      <title>The hidden cost of @testable</title>
      <link>https://paul-samuels.com/blog/2021/03/29/thoughts-on-testable-import/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s @testable annotation affects how a module is imported, changing its access control to simplify testing. In this interesting post, Paul Samuels argues that there are hidden costs to using this feature. I don&#39;t entirely agree with everything Paul states, but it&#39;s always good to consider a different point of view.</description>
    </item>
    
    <item>
      <title>Using Combine’s futures and subjects</title>
      <link>https://swiftbysundell.com/articles/using-combine-futures-and-subjects/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s Combine framework provides a declarative Swift API for processing asynchronous values over time. In this post, John Sundell demonstrates how some of Combine&#39;s convenience APIs can be used to wrap existing asynchronous APIs.</description>
    </item>
    
    <item>
      <title>Swift Result Builders: The Basics You Need to Know!</title>
      <link>https://swiftsenpai.com/swift/result-builders-basics/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>Officially available in Swift 5.4, Result Builders is a Swift feature that enables functions to build up a result value from a sequence of components. In this post, Lee Kah Seng teaches us how this feature works, and how we can build custom Result Builders.</description>
    </item>
    
    <item>
      <title>Custom Property Wrappers for SwiftUI</title>
      <link>https://davedelong.com/blog/2021/04/02/custom-property-wrappers-for-swiftui/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>A Swift property wrapper adds a layer of separation between code that defines a property and code that managers how a property is stored. By creating custom property wrappers, we write the management code once when we define the wrapper, and then reuse this code when we apply the wrapper to properties. In this post, Dave Delong shares some useful property wrappers that he has come up with while working on SwiftUI.</description>
    </item>
    
    <item>
      <title>Why Swift closures are not Equatable</title>
      <link>https://www.jessesquires.com/blog/2021/04/05/why-swift-closures-are-not-equatable</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>Closures in Swift are reference types, and as such, we might assume that they are Equatable. However, that is not the case, and in this post, Jesse Squires digs into some old forum posts to help explain why.</description>
    </item>
    
    <item>
      <title>The Context And The Logic</title>
      <link>https://khanlou.com/2021/02/the-context-and-the-logic/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>This is a great post by Soroush Khanlou in which he writes about the two main types of tasks professional programmers work on. Soroush frames these two types of tasks as the context and the logic, arguing that most of a professional programmer&#39;s time is spent on the context. This framing allows Soroush to illustrate two important points - that his job is not primarily about programming logic, and that by minimizing the context, he can spend more time on the good stuff.</description>
    </item>
    
    <item>
      <title>SwiftOnTap - Complete SwiftUI Docs with Examples</title>
      <link>https://swiftontap.com</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>This is a cool resource created by members of the Swift community. Its aim, as they put it, is to fill Apple&#39;s documentation hole by providing complete SwiftUI documentation with examples. One to bookmark.</description>
    </item>
    
    <item>
      <title>Why Swift Reference Types Are Bad for App Startup Time</title>
      <link>https://medium.com/geekculture/why-swift-reference-types-are-bad-for-app-startup-time-90fbb25237fc</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <description>When an app is launched, the operating system performs several tasks to get the app ready for use. One of these tasks is rebasing pointers in binary metadata that describe types in the app code. In this very interesting post, Noah Martin explains how Swift reference types can result in a large number of pointers that require rebasing, leading to slow app startup times.</description>
    </item>
    
    <item>
      <title>Be careful with Obj-C bridging in Swift</title>
      <link>https://swiftrocks.com/be-careful-with-objc-bridging-in-swift</link>
      <pubDate>Fri, 26 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>Type casting in Swift allows us to treat an instance as a different instance of a superclass or subclass from its hierarchy. It&#39;s accomplished using the as operator. However, did you know that the as operator is also the Objective-C bridging operator? In this post, Bruno Rocha explains why we need to pay extra attention when casting to make sure we are not also bridging from Swift to Objective-C types.</description>
    </item>
    
    <item>
      <title>How to use @autoclosure in Swift to improve performance</title>
      <link>https://www.avanderlee.com/swift/autoclosure/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>An autoclosure is a Swift closure that is automatically created to wrap an expression passed as a function argument. In this post, Antoine Van Der Lee demonstrates how we can use autoclosures and provides examples of Swift APIs which use this feature.</description>
    </item>
    
    <item>
      <title>Exploiting String Interpolation For Fun And For Profit</title>
      <link>https://davedelong.com/blog/2021/03/04/exploiting-string-interpolation-for-fun-and-for-profit/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>String interpolation allows us to construct a Swift String value from a mix of constants, variables, literals, and expressions. In this post, Dave Delong gets creative with interpolation, creating what he describes as a solution in search of a problem.</description>
    </item>
    
    <item>
      <title>Core Store</title>
      <link>https://dimsumthinking.com/Blog/2021/03/04-CoreStore.html</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>Core Data is an object graph and persistence framework provided by Apple. Introduced in iOS 3.0, it&#39;s still relevant but is also generally acknowledged as not being particularly Swift friendly. In this post, the excellent Daniel Steinberg makes an early prediction for a Swift replacement of Core Data which he thinks might be unveiled at this year&#39;s WWDC.</description>
    </item>
    
    <item>
      <title>Distributing closed-source frameworks with SPM</title>
      <link>https://danielsaidi.com/blog/2021/02/15/distributing-closed-source-frameworks-with-spm</link>
      <pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>The Swift Package Manager is a tool for managing the distribution of Swift code. It&#39;s incredibly easy to use and is quickly becoming one of the main methods of distributing Swift libraries. In this post, Daniel Saidi looks at how to distribute closed-source XCFrameworks using the Swift Package Manager.</description>
    </item>
    
    <item>
      <title>Variable, Tuple, Closure, and Generic Typealias in Swift</title>
      <link>https://www.advancedswift.com/typealias-examples/#variable-typealias</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <description>A type alias declaration introduces a named alias of an existing type and is declared using the typealias keyword. In this post, Robert Pieta provides examples of creating type aliases for a variety of Swift types. Even if you are already familiar with type alias declarations, this is a useful quick refresher.</description>
    </item>
    
    <item>
      <title>Operation</title>
      <link>https://brevans.io/index.php/2021/02/07/operation/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>The Operation type from Apple&#39;s Foundation framework is an abstract class that represents a single task. In this post, Bruce Evens makes his case for using Operations over DispatchQueues in Swift, arguing that since we are using a high-level language, we should also use high-level constructs.</description>
    </item>
    
    <item>
      <title>Phantom types in Swift</title>
      <link>https://swiftwithmajid.com/2021/02/18/phantom-types-in-swift/</link>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>A phantom type in Swift is a generic type that is declared but not used inside the type where it is declared. In this post, Majid Jabrayilov demonstrates how to use phantom types to create type-safe and robust APIs.</description>
    </item>
    
    <item>
      <title>nil-null-mess in Objective-C and Swift</title>
      <link>https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>In this post, Andy Ibanez looks at the state of nullability in both Objective-C and Swift. Andy explains the different representations of nothingness in each language and points out some pitfalls which we might encounter when working with nullability.</description>
    </item>
    
    <item>
      <title>XCTest tips and tricks that can level up your Swift testing</title>
      <link>https://masilotti.com/xctest-tips-and-tricks/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>Testing is such a critical part of the software development process that it&#39;s always great to learn some new test-related tricks. In this post, Joe Masilotti shares some of his favorite XCTest tips he picked up over the past few years. Swift code samples included.</description>
    </item>
    
    <item>
      <title>Meridian</title>
      <link>https://khanlou.com/2021/01/meridian/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>Meridian is a Swift web server created by Soroush Khanlou that lets you declaratively express endpoints. In this post, Soroush explains why he created Meridian and describes its benefits. Note that Meridian is in active development and is currently available as a Swift package.</description>
    </item>
    
    <item>
      <title>What’s new in Swift 5.4?</title>
      <link>https://www.hackingwithswift.com/articles/228/whats-new-in-swift-5-4</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 +0000</pubDate>
      
      <description>According to the Swift team, Swift 5.4 is a release focused on quality and performance enhancements. However, it also adds important new features. In this post, Paul Hudson describes some of these new features, including result builders, a feature unofficially available since Swift 5.1 and previously known as function builders.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 8: Request Options</title>
      <link>https://davedelong.com/blog/2020/07/09/http-in-swift-part-8-request-options/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <description>In part 8 of his series on building a Swift HTTP framework, Dave Delong demonstrates how we can customize individual request behavior. Dave does this by declaring type-safe request options that dynamically alter requests when applied by the request loader.</description>
    </item>
    
    <item>
      <title>What type is self in a Swift self-executing anonymous closure used to initialize a stored property?</title>
      <link>https://www.jessesquires.com/blog/2020/12/22/swift-self-executing-anonymous-closures/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <description>We have likely all (perhaps unknowingly) used a self-executing anonymous closure in our Swift code. Indeed, one use is when initializing stored properties for a type. In this post, Jesse Squires describes a situation he encountered when using such a closure that led to the discovery of unexpected behavior in Swift.</description>
    </item>
    
    <item>
      <title>Result in Swift: Getting started with Code Examples</title>
      <link>https://www.avanderlee.com/swift/result-enum-type/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Available since Swift 5, the Result type allows us to define a success and failure case for a failable operation. In this post, Antoine van der Lee demonstrates some of the lesser-known extensions from the Swift standard library that can be used with this type.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 7: Dynamically Modifying Requests</title>
      <link>https://davedelong.com/blog/2020/07/05/http-in-swift-part-7-dynamically-modifying-requests/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Part 7 of Dave Delong&#39;s series on building a Swift HTTP framework looks at dynamically modifying requests. Dave demonstrates how modifying requests as they pass through the framework chain is a powerful tool that can be applied in several situations.</description>
    </item>
    
    <item>
      <title>Actors are reference types, but why classes?</title>
      <link>https://docs.google.com/document/d/14e3p6yBt1kPrakLcEHV4C9mqNBkNibXIZsozdZ6E71c/edit#</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>The recently announced Swift Concurrency Roadmap includes the proposal of an Actor reference type, similar to a class type. In this whitepaper, Chris Lattner explores the behavior and requirements of actors and proposes that Actor types be modeled as a new kind of nominal reference type in Swift.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 6: Chaining Loaders</title>
      <link>https://davedelong.com/blog/2020/07/04/http-in-swift-part-6-chaining-loaders/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>In part 6 of his series on building a Swift HTTP framework, Dave Delong looks at adding the ability to chain HTTP loading requests. To achieve this, Dave adapts his HTTPLoading protocol, formalizing his concept of a next loader.</description>
    </item>
    
    <item>
      <title>Swift Concurrency Proposal Dependencies</title>
      <link>https://gist.github.com/DougGregor/444575ac67cbd25bfc4b1d4fd241ae93</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift Concurrency Roadmap was recently published, which outlined proposed additions and changes to the language to support concurrent programming. It&#39;s a great read, and very informative. However, if you are looking for a quick overview of the dependencies relating to the concurrency roadmap, this diagram from Doug Gregor is a good place to start.</description>
    </item>
    
    <item>
      <title>Codable synthesis for enums with associated values</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 4 introduced support for automatically synthesizing conformance to the Encodable and Decodable protocols. It&#39;s a useful feature, most likely used by any application which handles JSON-based network requests. This Swift evolution pitch from Dario Rexin proposes extending auto-synthesis of these conformances to enums with associated values. I&#39;m sure we will see this in an upcoming Swift version.</description>
    </item>
    
    <item>
      <title>Statically computed default property values</title>
      <link>https://www.swiftbysundell.com/tips/statically-computed-default-property-values/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>As John Sundell writes in the introduction to this short post, defining default values for our API properties can improve the usability of our APIs while still enabling customization when needed. With that in mind, John shares a tip for setting a default property value while also reminding us of a crucial difference between a lazy property and a non-lazy one.</description>
    </item>
    
    <item>
      <title>Testing the UI without UI Testing in Swift</title>
      <link>https://masilotti.com/testing-ui-without-ui-testing/</link>
      <pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Testing the user interface is an essential part of software development. Unfortunately, UI testing frameworks such as Apple&#39;s XCUITest are often unreliable and slow. However, there are other methods of testing the user interface, and in this post, Joe Masilotti shows us how to write UI tests using XCTest, Apple&#39;s unit testing framework.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 5: Testing and Mocking</title>
      <link>https://davedelong.com/blog/2020/07/03/http-in-swift-part-5-testing-and-mocking/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Dave Delong&#39;s blog series on building a Swift HTTP framework is full of useful tips, and this particular entry is no different. In this part, Dave looks at testing and mocking and shows us how using an interface rather than a concretion enhances the utility and testability of his code.</description>
    </item>
    
    <item>
      <title>What went wrong with the libdispatch. A tale of caution for the future of concurrency.</title>
      <link>https://tclementdev.com/posts/what_went_wrong_with_the_libdispatch.html</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s Grand Central Dispatch (GCD or libdispatch) provides support for concurrent code execution on multicore hardware. It aims to remove the need for developers to directly manage threads, enabling them to instead think in terms of queues of work. In this very interesting post, Thomas examines some of the problems of using libdispatch, offering words of caution for the future of concurrency in Swift.</description>
    </item>
    
    <item>
      <title>SwiftUI’s Grid Views</title>
      <link>https://www.objc.io/blog/2020/11/23/grid-layout/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s grid views arrange their child views in a horizontal or vertical grid. However, how they layout their child views can be surprising, and in this post, Florian Kugler from Objc.io examines three particular grid view layout scenarios and explains how the layout algorithm works.</description>
    </item>
    
    <item>
      <title>Availability checking for protocol conformances</title>
      <link>https://forums.swift.org/t/availability-checking-for-protocol-conformances/42066</link>
      <pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s availability checking feature currently allows us to check if a referenced declaration is available at runtime. In this post from the official Swift forums, Slava Pestov details an extension to this feature which provides the ability to check the availability of protocol conformances.</description>
    </item>
    
    <item>
      <title>Combine and Swift Concurrency</title>
      <link>https://rhonabwy.com/2020/11/08/combine-and-swift-concurrency/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift Core Team recently provided an excellent roadmap and series of language proposals outlining the future of concurrent programming in Swift. In this post, Joseph Heck looks at what the roadmap means for the Combine framework and how it might gain from the proposed concurrency concepts.</description>
    </item>
    
    <item>
      <title>SwiftUI View Lifecycle</title>
      <link>https://www.vadimbulavin.com/swiftui-view-lifecycle/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>When working with UI frameworks, it&#39;s helpful to understand the lifecycle of the views which make up our interface. Knowing what and when events will occur enables us to perform our actions at the right time. In this post, Vadim Bulavin explores the three phases of the SwiftUI view lifecycle, describing the series of events that happen from the creation of a view to its destruction.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 4: Loading Requests</title>
      <link>https://davedelong.com/blog/2020/07/02/http-in-swift-part-4-loading-requests/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Part 4 of Dave Delong&#39;s series on building a Swift HTTP framework looks at how to send requests and receive responses. It&#39;s another excellent entry in the series, and Dave succeeds in demonstrating how simplicity is the ultimate sophistication.</description>
    </item>
    
    <item>
      <title>How an Hstack Lays out Its Children</title>
      <link>https://www.objc.io/blog/2020/11/09/hstacks-child-ordering/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>As Chris Eidhof states in the introduction to this post, SwiftUI&#39;s layout system is, for the most part, intuitive to use. However, there are times when we encounter puzzling layout behaviors, and here Chris provides a detailed explanation of how one particular container view, an HStack, lays out its child views.</description>
    </item>
    
    <item>
      <title>[Proposal] Static member lookup on protocol metatypes</title>
      <link>https://forums.swift.org/t/proposal-static-member-lookup-on-protocol-metatypes/41946</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Swift currently supports static member lookup on concrete types. This improves call-site legibility by enabling us to use leading dot syntax when accessing static values. In this Swift evolution pitch, Sam Lazarus proposes extending static member lookup to protocol metatypes. This would be a nice addition, and would not have any effect of source of API stability.</description>
    </item>
    
    <item>
      <title>Parsing Tricky JSON With Codable in Swift</title>
      <link>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Parsing JSON is sometimes not as straightforward as we would like it to be, and we might find ourselves dealing with malformed JSON payloads. In this post, Andrés Ibañez shares his tips for parsing tricky JSON using Swift&#39;s Codable protocol.</description>
    </item>
    
    <item>
      <title>Unit Testing Asynchronous Code in Swift</title>
      <link>https://www.vadimbulavin.com/unit-testing-async-code-in-swift/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Implementing unit tests for asynchronous logic presents challenges such as false-positive test results and untrustworthy or error-prone test executions. In this post, Vadim Bulavin describes four patterns that help us to deal with such challenges, enabling us to reliably test asynchronous code.</description>
    </item>
    
    <item>
      <title>Debugging SwiftUI: Trials and Tribulations</title>
      <link>https://redalemeden.com/blog/2020/debugging-swiftui-trials-and-tribulations</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Working with relatively new frameworks such as SwiftUI means sometimes dealing with subpar debugging tools and seemingly unsolvable bugs. In this post, Reda Lemeden describes the frustration and anxiety he experienced when trying to resolve an issue without much help from the Swift compiler.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 3: Request Bodies</title>
      <link>https://davedelong.com/blog/2020/06/30/http-in-swift-part-3-request-bodies/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>In part 3 in his series on building a Swift HTTP framework, Dave Delong takes a look at the body property of HTTP requests. Dave shows us how to implement a generalized body type in Swift, providing lots of code samples.</description>
    </item>
    
    <item>
      <title>Swift Concurrency Roadmap</title>
      <link>https://forums.swift.org/t/swift-concurrency-roadmap/41611</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>This post from the official Swift forums outlines the Swift Concurrency Roadmap. The goal of this roadmap is to make concurrent programming in Swift convenient, efficient, and safe. There is a lot to unpack in this post, but it&#39;s definitely worth reading, and there are some great language features planned for the first phase of the roadmap.</description>
    </item>
    
    <item>
      <title>Placeholder types</title>
      <link>https://forums.swift.org/t/placeholder-types/41329</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Building on a previous Swift evolution thread, Frederick Kellison-Linn pitches a proposal to add what he calls placeholder types to Swift. These placeholder types could be used when we want to explicitly provide some type information but also want the compiler to infer some type information.</description>
    </item>
    
    <item>
      <title>Swift KeyPaths under a different optic</title>
      <link>https://www.47deg.com/blog/keypaths-optics/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>Bow is a library for typed functional programming in Swift. The optics module in Bow provides several utilities to work with immutable data structures. In this post, Tomás Ruiz López compares Swift KeyPaths to features available in the Bow optics module.</description>
    </item>
    
    <item>
      <title>Hashable SwiftUI bindings</title>
      <link>https://fivestars.blog/swiftui/hashable-bindings.html</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>A SwiftUI DisclosureGroup is a view that shows or hides content based on the state of a disclosure control. In this post, Federico Zanetello shows us how to extend DisclosureGroup with a new initializer to provide a similar API to that of the NavigationLink type.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 2: Basic Structures</title>
      <link>https://davedelong.com/blog/2020/06/28/http-in-swift-part-2-basic-structures/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Dave Delong continues his series of posts on HTTP in Swift. In this second part, Dave shows us how to transform the HTTP request and response structures from part one into the types we need to model them in Swift.</description>
    </item>
    
    <item>
      <title>Introducing Swift Service Discovery</title>
      <link>https://swift.org/blog/swift-service-discovery/</link>
      <pubDate>Mon, 26 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift team at Apple announced several open-source projects recently, such as Swift Atomics and Swift Algorithms, and in this blog post, Yim Lee announces yet another one. Swift Service Discovery is an open-source Swift project for the Swift Server ecosystem. It&#39;s designed to establish a standard API that can be implemented by various service discovery backends.</description>
    </item>
    
    <item>
      <title>Mastering GroupBox in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/10/15/mastering-groupbox-in-swiftui/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>A Groupbox is a stylized SwiftUI view with an optional label that is associated with a logical grouping of content. In this post, Majid Jabrayilov runs through the basics of using this view type and shows us how we can apply custom styles.</description>
    </item>
    
    <item>
      <title>Unlock Existential Types for All Protocols</title>
      <link>https://forums.swift.org/t/unlock-existential-types-for-all-protocols/40665/3</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Swift currently allows protocols that meet certain criteria to be used as types. Using a protocol in such a way essentially creates an existential type. However, protocols with associated type or self requirements cannot currently be used to create such existential types. This Swift evolution pitch proposes removing this restriction.</description>
    </item>
    
    <item>
      <title>Mastering transitions in SwiftUI</title>
      <link>https://nerdyak.tech/development/2020/10/12/transitions-in-swiftui.html</link>
      <pubDate>Wed, 21 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>In this post, Pavel Zak shows us how to implement custom animation transitions in SwiftUI. As Pavel says, transitions play a vital role in the user experience of an app, and the examples he provides are great starting points for implementing our own transitions.</description>
    </item>
    
    <item>
      <title>@warn_unqualified_access</title>
      <link>https://fivestars.blog/swift/warn_unqualified_access.html</link>
      <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Introduced in Swift 2, @warn_unqualified_access triggers a warning when the function or method it is applied to is used without a preceding qualifier, such as a module or type name. In this post, Federico Zanetello shows us how to use this attribute to discourage ambiguity between functions with the same signature.</description>
    </item>
    
    <item>
      <title>HTTP in Swift, Part 1: An Intro to HTTP </title>
      <link>https://davedelong.com/blog/2020/06/27/http-in-swift-part-1/</link>
      <pubDate>Mon, 19 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>In this first post in a series on building a Swift HTTP framework, Dave Delong provides an introduction to HTTP. This looks like it is going to be a great series, and as Dave says, knowing the details of how HTTP works is one of the most valuable things a software engineer can know.</description>
    </item>
    
    <item>
      <title>Result builders</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>This Swift evolution proposal outlines the motivation and design for Result Builders, the Swift language feature previously known as Function Builders. Result Builders have been an available feature since Swift 5.1, albeit slightly hidden, and its implementation and capabilities have evolved since then.</description>
    </item>
    
    <item>
      <title>Swift deinit is (sometimes) not called for throwing or failable initializers</title>
      <link>https://www.jessesquires.com/blog/2020/10/08/swift-deinit-is-not-called-for-failable-initializers/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Sometimes we may want to define a struct or class for which initialization can fail, for example in response to invalid parameter values. For this use case, Swift provides failable initializers. In this post, Jesse Squires reminds us that when initialization fails, the deinitializer is not called, and provides a short history lesson to explain why this is the case.</description>
    </item>
    
    <item>
      <title>Transactions in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/10/07/transactions-in-swiftui/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s Transaction type provides the context of the current state-processing update. In this post, Majid Jabrayilov shows us how we can use the transaction that accompanies every state change to override state-related view animations.</description>
    </item>
    
    <item>
      <title>Announcing Swift Algorithms</title>
      <link>https://swift.org/blog/swift-algorithms/</link>
      <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Swift Algorithms is a new open-source Swift package of sequence and collection algorithms. In this post, Nate Cook from the Swift standard library team at Apple gives a brief tour of this package and describes its relation to the Swift standard library.</description>
    </item>
    
    <item>
      <title>Reduce boilerplate code with an automatic synthesis of Equatable and Hashable conformance</title>
      <link>https://sarunw.com/posts/reduce-boilerplate-code-with-automatic-synthesis-of-equatable-and-hashable-conformance/</link>
      <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>In this post, Sarun Wongpatcharapakorn takes us back to Swift 4.1 to look at the automatic synthesis of the Equatable and Hashable protocols. Even if you are already familiar with this feature, it&#39;s helpful to be reminded of how it can be used.</description>
    </item>
    
    <item>
      <title>UIKit or SwiftUI: what to use in production?</title>
      <link>https://nalexn.github.io/uikit-switfui/</link>
      <pubDate>Tue, 13 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>How ready is SwiftUI for use in large production apps? In this post, Alexey Naumov considers this question and shows us how to structure a project with a UI layer that can be easily detached and replaced.</description>
    </item>
    
    <item>
      <title>Importing interactive UIKit views into SwiftUI</title>
      <link>https://www.swiftbysundell.com/tips/importing-interactive-uikit-views-into-swiftui/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>One of SwiftUI&#39;s strengths is that it works with existing Apple UI frameworks such as UIKit. This enables us to reuse our existing UIKit components when introducing SwiftUI into a project. In this post, John Sundell shows us how to bring a UIKit-based view into a SwiftUI view hierarchy.</description>
    </item>
    
    <item>
      <title>How Swift API Availability Works Internally</title>
      <link>https://swiftrocks.com/how-availability-works-internally-in-swift</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s @available attribute allows us to specify the availability of a declaration on different platforms and different versions of Swift. In this post, Bruno Rocha takes a deep dive into how Swift API availability works internally, showing us how the Swift compiler treats availability attributes.</description>
    </item>
    
    <item>
      <title>Introducing Swift Atomics</title>
      <link>https://swift.org/blog/swift-atomics/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Atomic operations are operations that run completely independently of other processes and will be fully executed without interruption. In this post on the official Swift blog, Karoy Lorentey from the Swift team announces Swift Atomics, a new open-source Swift package that enables low-level atomic Swift operations.</description>
    </item>
    
    <item>
      <title>Setting default values for NSUserDefaults</title>
      <link>https://sarunw.com/posts/setting-default-value-for-nsuserdefaults/</link>
      <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s UserDefaults type provides an interface to the default database associated with an application. It&#39;s most commonly used to store user preferences. In this post, Sarun Wongpatcharapakorn shows us how to set default values for such stored preferences in Swift.</description>
    </item>
    
    <item>
      <title>Pitfalls of protocol extensions</title>
      <link>https://dmtopolog.com/pitfalls-of-protocol-extensions/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Swift protocols are an incredibly powerful language feature, allowing us to define a blueprint of methods, properties, and other requirements that suit a particular piece of functionality. It&#39;s also possible to extend protocols to implement default behavior or add additional functionality. In this post, Dmitrii Ivanov examines protocol extensions, presenting what he thinks are some drawbacks of using this language feature.</description>
    </item>
    
    <item>
      <title>What does @main do in Swift 5.3?</title>
      <link>https://useyourloaf.com/blog/what-does-main-do-in-swift-5.3/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5.3 introduced the @main attribute, providing a way to designate a type as the entry point of a Swift program. In this post, Keith Harrison shares what he learned when he investigated how iOS and Swift programs start when using this attribute.</description>
    </item>
    
    <item>
      <title>Encapsulating SwiftUI view styles</title>
      <link>https://www.swiftbysundell.com/articles/encapsulating-swiftui-view-styles/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>When working with UI frameworks such as SwiftUI, it&#39;s desirable to separate the structure of our view components from the styles applied to them. In this post, John Sundell looks at several tools and techniques that we can use to do exactly that when creating custom SwiftUI views.</description>
    </item>
    
    <item>
      <title>Apple’s use of Swift and SwiftUI in iOS 14</title>
      <link>https://blog.timac.org/2020/0927-state-of-swift-ios14/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Since 2015, Alexandre Colucci has analyzed each iOS release to measure how many system applications were using Swift. In this post, Alexandre Colucci shows us how Apple&#39;s use of Swift has evolved with iOS 14 and also extends his analysis to measure how many built-in apps use SwiftUI.</description>
    </item>
    
    <item>
      <title>Handling Undo &amp; Redo in SwiftUI</title>
      <link>https://lostmoa.com/blog/HandlingUndoAndRedoInSwiftUI/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>The UndoManager type, available in Apple&#39;s Foundation framework, provides a general-purpose recorder of operations that enables undo and redo actions. In this post, Matthaus Woolard describes a Provider pattern he uses to improve how UndoManager integrates with SwiftUI.</description>
    </item>
    
    <item>
      <title>SwiftUI View Modifiers and if #available</title>
      <link>https://blog.overdesigned.net/posts/2020-09-23-swiftui-availability/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>When applied to a SwiftUI View, a ViewModifier produces a different version of the original value. In this post, Adam Overholtzer provides an extension on the View type, combining view modifiers with platform availability checks to conditionally apply the modifier.</description>
    </item>
    
    <item>
      <title>Context-Bound Types</title>
      <link>https://www.fabisevi.ch/2020/09/21/Context-Bound-Types/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Writing any kind of API involves trying to balance exposing the right amount of implementation details without revealing too much. In this post, Joe Fabisevich looks at this topic and walks us through the task of creating a view controller with a header view in Swift.</description>
    </item>
    
    <item>
      <title>Protocol extensions</title>
      <link>https://dmtopolog.com/protocol-extensions/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Protocols can be extended to provide method implementations to conforming types, allowing us to define behavior on protocols themselves, rather than in each type&#39;s conformance. In this post, Dmitrii Ivanov looks at how protocol extensions are used to add default implementations and additional functionality.</description>
    </item>
    
    <item>
      <title>Tabs and pages in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/09/16/tabs-and-pages-in-swiftui/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s TabView is a view that switches between child views using interactive user interface elements. In this short post, Majid Jabrayilov demonstrates the basics of using TabView, and also shows us how to configure it to behave as a paging view.</description>
    </item>
    
    <item>
      <title>The State of SwiftUI</title>
      <link>https://steipete.com/posts/state-of-swiftui/</link>
      <pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Since SwiftUI&#39;s release in 2019, Apple has continued to evolve the framework, fixing many of the issues that were present in the early versions. In this post, Peter Steinberger takes a look at the current state of SwiftUI. Although Peter doesn&#39;t recommend going all-in on SwiftUI for production apps, he does recognize that it&#39;s the future at Apple, and many of the current concerns will be resolved over the coming years.</description>
    </item>
    
    <item>
      <title>Impossible SwiftUI views</title>
      <link>https://fivestars.blog/swiftui/impossible-swiftui-views.html</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s Never is an enum that represents a type with no values. It&#39;s commonly used as the return type of closures, functions, or methods that do not return normally. SwiftUI also makes use of Never, by extending it to conform to its View protocol. In this post, Federico Zanetello explores SwiftUI&#39;s inner workings to show us why.</description>
    </item>
    
    <item>
      <title>The Danger of Playing it Safe</title>
      <link>https://appdecentral.com/2020/09/16/the-danger-of-playing-it-safe/</link>
      <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Should we force unwrap Swift optionals? It&#39;s a question every Swift developers has an opinion about, and in this post, Drew McCormack clearly states his. I fully agree with Drew&#39;s opinion and his reasoning. We should be assertive and force unwrap when logic dictates that an optional can never be nil.</description>
    </item>
    
    <item>
      <title>Dark side of extensions in Swift</title>
      <link>https://dmtopolog.com/dark-side-of-extensions/&#34;&#34;</link>
      <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Swift Extensions add new functionality to an existing class, structure, enum, or protocol type. In this post, Dmitrii Ivanov outlines what he considers to be some of the drawbacks of using extensions. I don&#39;t fully agree with everything Dmitrii covers, but as he says, his goal is not to dissuade us from using extensions but to remind us of the nuances of using this language feature.</description>
    </item>
    
    <item>
      <title>3 lesser-known ways of using Swift enums</title>
      <link>https://sarunw.com/posts/lesser-known-ways-of-using-swift-enums/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>An enumeration defines a common type for a group of related values. Enumerations in Swift are first-class types, and they adopt many features traditionally only available by class types. In this post, Sarun Wongpatcharapakorn introduces us to some enum use cases in Swift that we might not be aware of.</description>
    </item>
    
    <item>
      <title>Building widgets in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/09/09/building-widgets-in-swiftui/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s WidgetKit framework, available in Xcode 12, enables us to build widgets that show relevant, glanceable content from an app on the iOS Home screen or macOS Notification Center. Widget views are built exclusively using SwiftUI, and in this post, Majid Jabrayilov shares his experience of building and updating widgets.</description>
    </item>
    
    <item>
      <title>How Swift 5.3 enhances SwiftUI’s DSL</title>
      <link>https://swiftbysundell.com/articles/how-swift-5-3-enhances-swiftui-dsl/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5.3 was officially released last week, and although it&#39;s technically only a minor release, it includes several very useful language enhancements. In this post, John Sundell takes a look at some of these enhancements and shows how they collectively improve the SwiftUI development experience.</description>
    </item>
    
    <item>
      <title>NSUserActivity with SwiftUI</title>
      <link>https://swiftui-lab.com/nsuseractivity-with-swiftui/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Available on all of Apple&#39;s platforms, the NSUserActivity type provides a way to capture the state of an app and use it at a later point in time. It powers several capabilities such as Universal Links, Handoff, and SiriKit. In this post, Javier presents a series of examples demonstrating the methods SwiftUI provides to work with NSUserActivity.</description>
    </item>
    
    <item>
      <title>Swift 5.3 released!</title>
      <link>https://swift.org/blog/swift-5-3-released/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>With the release of Xcode 12 this week, we also got the official release of Swift 5.3. The focus of this release is language refinements, developer experience, and expanding the Swift ecosystem. In this post, Holly Borla from the Swift compiler team at Apple provides an overview of the release.</description>
    </item>
    
    <item>
      <title>SwiftUI 2.0: The Future is Declarative</title>
      <link>https://infinum.com/the-capsized-eight/swiftUI-2</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>In this post, Goran Brias takes a detailed look at the state of SwiftUI - what it promised, what it delivered, and where it&#39;s going. Goran&#39;s main point here is that SwiftUI is not just an alternative, it is the future of UI development on Apple platforms. A very interesting read.</description>
    </item>
    
    <item>
      <title>Testing delegates and protocols in XCTest</title>
      <link>https://sarunw.com/posts/testing-delegates-and-protocols-in-xctest/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>The delegate pattern uses composition to provide similar advantages to object inheritance and is a pattern commonly used when developing for Apple&#39;s platforms. In this short post, Sarun Wongpatcharapakorn demonstrates his technique for testing code which uses delegation.</description>
    </item>
    
    <item>
      <title>Standard library behavior change for LazyMapCollection prefix to act as a Sequence</title>
      <link>https://forums.swift.org/t/standard-library-behavior-change-for-lazymapcollection-prefix-to-act-as-a-sequence/39954</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift standard library provides lazy variations of its Sequence and Collection types, on which operations such as map and filter are implemented lazily. This means that the actual computations will only occur when the results are needed. In this Swift evolution pitch, Greg Titus proposes an addition to the standard library that improves the behavior of the LazyMapCollection type.</description>
    </item>
    
    <item>
      <title>Porting @AppStorage to iOS 13</title>
      <link>https://xavierlowmiller.github.io/blog/2020/09/04/iOS-13-AppStorage</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>The SwiftUI AppStorage property wrapper, available in iOS 14, is a type that reflects a value from UserDefaults and invalidates a view when the value changes. In this post, Xavier Lowmiller builds his version of AppStorage, creating a new type that provides the same functionality and can be used in iOS 13.</description>
    </item>
    
    <item>
      <title>Micro-interactions: Async Button</title>
      <link>https://trailingclosure.com/micro-interactions-async-button/</link>
      <pubDate>Mon, 14 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>This tutorial from Jean-Marc Boullianne shows us how to create an asynchronous button micro-interaction for an app. This is part of a series of tutorials Jean-Marc has written on micro-interactions, and this particular post is a great example of a simple micro-interaction that adds polish to an app.</description>
    </item>
    
    <item>
      <title>Support Negative Availability Literals</title>
      <link>https://forums.swift.org/t/support-negative-availability-literals/39946</link>
      <pubDate>Sun, 13 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>The availability condition #available is used to execute code conditionally based on the required platform and version conditions. Currently, it&#39;s only possible to check if conditions are positively satisfied. In this Swift evolution pitch, Bruno Rocha proposes extending #available to support checking if conditions are not satisfied.</description>
    </item>
    
    <item>
      <title>Conditional view modifiers</title>
      <link>https://fivestars.blog/swiftui/conditional-modifiers.html</link>
      <pubDate>Sat, 12 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides a wide range of view modifiers which produce a new version of the original value when applied to a view or another view modifier. It&#39;s possible that when working with SwiftUI views, we may want to conditionally apply a view modifier based on certain conditions. In this post, Federico Zanetello shows us how we can use view extensions to handle such cases.</description>
    </item>
    
    <item>
      <title>Private APIs, Objective-C runtime, and Swift</title>
      <link>https://medium.com/@victor.pavlychko/private-apis-objective-c-runtime-and-swift-ceaeefbb6e48</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Objective-C and Swift can be used together, and it&#39;s still very common for apps and projects to contain a mix of both. Calling public Objective-C APIs from Swift involves exposing the APIs via a bridging header. However, calling private, or Swift-unavailable, Objective-C APIs from our Swift code is also possible, thanks to Objective-C&#39;s dynamic nature. In this post, Victor Pavlychko focuses on accessing such APIs using the Objective-C runtime.</description>
    </item>
    
    <item>
      <title>withAnimation completion callback with animatable modifiers</title>
      <link>https://www.avanderlee.com/swiftui/withanimation-completion-callback/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides excellent support for animations, enabling us to implement simple animations using its withAnimation view modifier. In this post, Antoine Van Der Lee shows us how to create a custom animatable modifier which triggers a completion callback once the animation completes.</description>
    </item>
    
    <item>
      <title>Displaying recursive data using OutlineGroup in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/09/02/displaying-recursive-data-using-outlinegroup-in-swiftui/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>OutlineGroup is a SwiftUI structure that computes views on demand from an underlying collection of tree-structured data. In this post, Majid Jabrayilov shows us how to use OutlineGroup, as well as demonstrating how it can be used with SwiftUI&#39;s List type to display styled lists of tree-structured data.</description>
    </item>
    
    <item>
      <title>Save Custom Codable Types in AppStorage or SceneStorage</title>
      <link>https://lostmoa.com/blog/SaveCustomCodableTypesInAppStorageOrSceneStorage/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>AppStorage and SceneStorage are SwiftUI property wrappers designed for data persistence. Both of these property wrappers support Swift value types such as Bool, Int, etc. However, to use these property wrappers with custom codable types, we need to add RawRepresentable conformance to the types. In this post, Natalia Panferova shows us how to do this.</description>
    </item>
    
    <item>
      <title>Micro-interactions: Alignment Control</title>
      <link>https://trailingclosure.com/micro-interactions-alignment-control/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Micro-interactions are events that communicate status and provide feedback to a user when they interact with a UI element in an app. In this post, Jean-Marc Boullianne provides a tutorial on creating a micro-interaction for an alignment control, which he thinks will help to make an app feel polished and simple to use.</description>
    </item>
    
    <item>
      <title>Make a placeholder view in SwiftUI with redacted()</title>
      <link>https://sarunw.com/posts/make-placeholder-view-in-swiftui-with-redacted/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Available in iOS 14, SwiftUI&#39;s redacted view modifier redacts or obscures the content of any view it is applied to. In this short post, Sarun Wongpatcharapakorn demonstrates how to use this API and shows us how to customize what is displayed when a view is redacted.</description>
    </item>
    
    <item>
      <title>Swiftʼs Collection Types</title>
      <link>https://harshil.net/blog/swift-sequence-collection-array</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift standard library provides a whole suite of Sequence and Collection protocols, together with a large number of concrete types conforming to these protocols such as Array, Set, Dictionary, etc. In this detailed post, Harshil Shah covers all of the public types which make up Swift&#39;s Collection protocol hierarchy, examining Sequence, Collection, Array, and everything in between. An excellent post, and one to bookmark for future reference.</description>
    </item>
    
    <item>
      <title>Custom SwiftUI Toggle Styles</title>
      <link>https://trailingclosure.com/custom-swiftui-toggles/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s Toggle type is a UI control used to toggle between on and off states. We can customize the appearance of toggles by creating and applying styles that conform to the ToggleStyle protocol. In this short post, Jean-Marc Boullianne shows us how to create a custom toggle style, providing several examples of styles he has created.</description>
    </item>
    
    <item>
      <title>SwiftUI ScrollView offset</title>
      <link>https://fivestars.blog/swiftui/scrollview-offset.html</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>When using scrollable view types, it&#39;s common to want to access the content offset. The content offset is the point at which the origin of the content view is offset from the origin of the scroll view. While UIKit&#39;s UIScrollView provides contentOffset, allowing us to read/write to this property, SwiftUI&#39;s ScrollView does not provide such a property. Instead, SwiftUI provides the ScrollViewReader type, which can be used in place of direct access to a content offset property. However, there might still be times when we want to directly access the content offset of a SwiftUI ScrollView, and in this post, Federico Zanetello shows us how to do that.</description>
    </item>
    
    <item>
      <title>Working with Stacks in SwiftUI</title>
      <link>https://learnappmaking.com/stacks-vstack-hstack-swiftui-how-to/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides several stack view types that can be used to combine views to create complex interfaces. In this post, Reinder de Vries looks at the VStack, HStack, and ZStack types, showing us how to position views within these stacks using alignment and spacing. Even if you are familiar with SwiftUI stack views, this is a good, quick refresher tutorial.</description>
    </item>
    
    <item>
      <title>SwiftUI &#43; Combine = ❤️</title>
      <link>https://peterfriese.dev/swift-combine-love/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Apple announced both SwiftUI and Combine at WWDC 2019, introducing two frameworks that will completely change how apps for their platforms are built. In this post, Peter Friese demonstrates why using these two frameworks together will help us to build better apps, resulting in cleaner, more modular code.</description>
    </item>
    
    <item>
      <title>Typed throws</title>
      <link>https://forums.swift.org/t/typed-throws/39660</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Swift provides support for throwing, catching, propagating, and manipulating recoverable errors. To indicate that a function or method can throw an error, we add the throws keyword to the declaration. In this very detailed Swift evolution pitch, Jorge proposes adding the ability to specify the type of an error that a function will throw.</description>
    </item>
    
    <item>
      <title>SwiftUI betas - what changed before 1.0</title>
      <link>https://mackuba.eu/2020/08/17/swiftui-beta/</link>
      <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI continues to evolve, with lots of regular changes to the original APIs that debuted at WWDC 2019. In this post, Kuba Suder presents a list of all the API changes that took place between the original beta from June 2019 and the final version from September of that year. This is especially useful if you are trying to recreate examples from WWDC 2019 videos, but are wondering why the code won&#39;t compile.</description>
    </item>
    
    <item>
      <title>Extend implicit member syntax to cover chains of member references</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0287-implicit-member-chains.md</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>This Swift evolution proposal suggests an expansion of implicit member syntax to more complex expressions than just a single static member or function. What this means is that when the type of an expression is implied by the context, developers would be able to use leading dot syntax, even when the expression consists of chains of member references. This is a very logical language evolution in my opinion.</description>
    </item>
    
    <item>
      <title>How to Get Users’ Swipe Direction in SwiftUI</title>
      <link>https://medium.com/better-programming/how-to-get-users-swipe-direction-in-swiftui-b482a6a8771b</link>
      <pubDate>Sat, 29 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides the DragGesture type, which represents a dragging motion that invokes an action as the drag-event sequence changes. In this short post, Sarah shows us how we can capture the direction of a user&#39;s swipe using DragGesture.</description>
    </item>
    
    <item>
      <title>Managing scenes in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/08/26/managing-scenes-in-swiftui/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>On Apple platforms, a scene represents a part of an app&#39;s user interface, with a life cycle managed by the system. A single app may consist of multiple scenes, all of which can be running concurrently. With SwiftUI, we can use primitive scenes it provides, such as WindowGroup, together with custom scenes we create based on the Scene protocol. In this post, Majid Jabrayilov shows us how we can create custom scenes in SwiftUI, and how we can respond to app life cycle events.</description>
    </item>
    
    <item>
      <title>Flexible layouts in SwiftUI</title>
      <link>https://fivestars.blog/swiftui/flexible-swiftui.html</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>This year SwiftUI gained two new container view types - LazyVGrid and LazyHGrid - which provide grid-style layouts with a reasonable amount of flexibility. In this post, Federico Zanetello shows us how we can build a custom grid-style view, aiming to provide an even more powerful API than is available in these native SwiftUI types.</description>
    </item>
    
    <item>
      <title>Launching Language and Platform Package Compatibility</title>
      <link>https://blog.swiftpackageindex.com</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift Package Index, created by Dave Verwer and Sven A. Schmidt, is a search engine for packages that support the Swift Package Manager. It aims to help developers make informed decisions about the dependencies for their projects. In this blog post, the Package Index team announce the launch of language and platform package compatibility, which provides even more relevant information about each package in the index. The Package Index really is a fantastic resource, and it&#39;s great to see continued improvements like this.</description>
    </item>
    
    <item>
      <title>Building SwiftUI debugging utilities</title>
      <link>https://swiftbysundell.com/articles/building-swiftui-debugging-utilities/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Debugging - the process of identifying and removing bugs - is almost guaranteed to be part of any software development lifecycle. Xcode includes a suite of tools to help us debug, and although these are comprehensive, sometimes building our own set of debugging utilities can be useful. In this post, John Sundell shows us examples of such custom utilities used to debug SwiftUI-based views.</description>
    </item>
    
    <item>
      <title>Understanding Swift’s OptionSet</title>
      <link>https://www.donnywals.com/understanding-swifts-optionset/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>OptionSet is a Swift type that presents a mathematical set interface to a bit set. The protocol is used to represent bitset types, where individual bits represent members of a set. Even if you have not explicitly implemented the OptionSet protocol, you have likely used OptionSet when using Apple APIs. In this post, Donny Wals provides a good overview of the OptionSet type, including a look at some of Swift&#39;s bitwise operators.</description>
    </item>
    
    <item>
      <title>Force-Unwrapping in Swift is NOT a Bad Thing</title>
      <link>https://wolfmcnally.com/82/force-unwrapping-swift-not-bad-thing/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s Optional type represents either a wrapped value or nil, the absence of a value. When a programmer is certain than an Optional contains a value, the force unwrap operator is used to unconditionally unwrap the value. In this post, Wolf McNally examines force unwrapping in Swift, arguing that force unwraps which lead to crashes are not necessarily a bad thing. This is a really good read, and I very much agree with Wolf: code only as defensively as you have to.</description>
    </item>
    
    <item>
      <title>Working with an Internet Connection on iOS with Swift: Best Practices</title>
      <link>https://www.vadimbulavin.com/network-connectivity-on-ios-with-swift/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>The Network and System Configuration frameworks contain several APIs for performing network-related tasks such as checking connectivity or constraining network operations. In this post, Vadim Bulavin provides a list of best practices when using these APIs in Swift.</description>
    </item>
    
    <item>
      <title>Managing app in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/08/19/managing-app-in-swiftui/</link>
      <pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5.3 introduces the @main attribute, used to designate a type as the entry point for program execution. Combining this feature with the new App and Scene protocols from SwiftUI allows us to manage an app&#39;s lifecycle with minimal code, without needing to rely on UIKit types such as UIApplicationDelegate. In this post, Majid Jabrayilov shows us how to implement common app lifecycle events using these new features.</description>
    </item>
    
    <item>
      <title>Sharing layout information in SwiftUI</title>
      <link>https://fivestars.blog/swiftui/swiftui-share-layout-information.html</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides container views such as stacks and lists, which we use to lay out the views in our user interface. However, when such container views are not enough to help us get our layout just right, SwiftUI also provides the GeometryReader type, which defines its content as a function of its own size and coordinate space. In this post, Federico Zanetello shows us how we can use GeometryReader, together with PreferenceKey, to share layout information from child views to ancestor views.</description>
    </item>
    
    <item>
      <title>How to manage multiple sheets in SwiftUI</title>
      <link>https://masilotti.com/multiple-sheets-swiftui/</link>
      <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s sheet modifier enables us to modally present a sheet view when a given condition is true. It&#39;s a simple way of modally presenting content and works great when presenting a single sheet from a view. However, things get slightly more complicated when presenting multiple sheets based on different conditions. In his first SwiftUI post, Joe Masilotti describes how he solved the problem of presenting multiple sheets, showing us how he went from an initial solution to a final, more reusable implementation.</description>
    </item>
    
    <item>
      <title>SwiftUI GroupBox for iOS</title>
      <link>https://itnext.io/swiftui-groupbox-for-ios-bb16aa71469c</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Available in SwiftUI on macOS since Catalina, the SwiftUI Groupbox type is now available in iOS 14. A Groupbox is a view with an optional label that contains a logical grouping of views. In this short post, Luca provides examples of using Groupbox to display a variety of data.</description>
    </item>
    
    <item>
      <title>A deep dive into Swift’s function builders</title>
      <link>https://www.swiftbysundell.com/articles/deep-dive-into-swift-function-builders/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Despite not yet being an officially released language feature, Swift&#39;s function builders power SwiftUI&#39;s DSL-like API and is one of the more interesting recent additions to the language. In this deep dive, John Sundell takes a closer look at function builders, providing insights into the feature by implementing a function builder for a settings API. Like John, I hope the function builders feature goes through the Swift Evolution process sooner rather than later.</description>
    </item>
    
    <item>
      <title>Swift types with @AppStorage and @SceneStorage</title>
      <link>https://www.fivestars.blog/swiftui/app-scene-storage.html</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Introduced this year, AppStorage is a SwiftUI property wrapper that reflects a value from UserDefaults which allows for easy storage and observation of app data. Similarly, SceneStorage is a property wrapper that reads and writes to persisted, per-scene storage. They are both super useful, but as they are backed by plists, they are limited in the types of data they support. In this post, Federico Zanetello shows us how we can extend the Published SwiftUI property wrapper to provide similar storage functionality for Codable types.</description>
    </item>
    
    <item>
      <title>[Concurrency] Add `async` to the Swift type system.</title>
      <link>https://github.com/apple/swift/pull/33147</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Modern development involves a lot of asynchronous programming, implemented in Swift using closures and completion handlers. However, implementing asynchronous operations using closures can quickly become problematic, and tasks such as error handling and conditional execution become harder to do correctly. Coroutines are a specialized type of subroutine/function which allows for execution to be suspended and resumed, and the coroutine model has long been proposed as a Swift language extension to make asynchronous programming more natural and less error-prone. In this pull request, Doug Gregor begins the introduction of coroutines to Swift, adding async to the Swift type system. A good first step towards a better asynchronous future.</description>
    </item>
    
    <item>
      <title>Self-Sizing UITableView Cells with SwiftUI</title>
      <link>https://noahgilmore.com/blog/swiftui-self-sizing-cells/</link>
      <pubDate>Fri, 14 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI works with existing UI frameworks, making it possible to integrate SwiftUI views into UIKit views, and vice versa. In this really interesting post, Noah Gilmore describes his experience of implementing self-sizing UITableView cells which contain an embedded SwiftUI view.</description>
    </item>
    
    <item>
      <title>Menus in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/08/05/menus-in-swiftui/</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>iOS 14 introduces Menu - a new SwiftUI view type used to display popup menus from buttons. In this post, Majid Jabrayilov shows us how to use menus to provide secondary actions or selection options, and describes some of the benefits menus provide over alternative options such as action sheets.</description>
    </item>
    
    <item>
      <title>Package Manager Source Archive Dependencies</title>
      <link>https://forums.swift.org/t/package-manager-source-archive-dependencies/38626</link>
      <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>In this Swift evolution pitch, Mattt proposes extending the Swift Package Manager to add support for non-binary source dependencies. As Mattt outlines, this proposal is part of the necessary groundwork required to achieve the overall goal of creating a Swift package registry service.</description>
    </item>
    
    <item>
      <title>Adding a closure as a target to UIButton and other controls in Swift</title>
      <link>https://www.avanderlee.com/swift/uibutton-uicontrol-closure-target/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>iOS 14 introduced new APIs that allow us to use the UIAction type when defining actions associated with UIControls. In this short post, Antoine Van Der Lee shows us how we can use these new APIs to define our actions as closures, improving the discoverability of our action definitions.</description>
    </item>
    
    <item>
      <title>SwiftUI Kit - A SwiftUI system components and interactions demo app</title>
      <link>https://github.com/jordansinger/SwiftUI-Kit</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Jordan Singer has created SwiftUI Kit, an open-source app that demonstrates SwiftUI system components and interactions. The app can be used to see how views appear, and interactions work when using default system components, and the source code is available as a reference.</description>
    </item>
    
    <item>
      <title>How to declare Swift protocol for a specific class</title>
      <link>https://sarunw.com/posts/how-to-declare-swift-protocol-for-specific-class/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Protocols enable us to define a blueprint of methods and properties suited to a particular task. Classes, structures, and enums can then adopt protocols and provide their implementation of those methods and properties. With Swift 5, protocol definitions can constrain their conforming types to those that subclass a particular class. In this post, Sarun Wongpatcharapakorn describes how to add such a constraint and explains the benefits of doing so.</description>
    </item>
    
    <item>
      <title>Building a Multi-platform App with SwiftUI</title>
      <link>https://heartbeat.fritz.ai/building-a-multi-platform-app-with-swiftui-5336bce94689</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>The Introduction to SwiftUI session at WWDC 2020 included content that focused on using SwiftUI to build multi-platform apps - i.e apps that work on both iOS and macOS. Building such apps can be done by separately building for each platform from a single codebase, or creating a Mac Catalyst app which runs an app built for iPad on macOS. In this post, Rick Wierenga looks at the former, providing a tutorial that shows us how to use a single codebase to build a HackerNews app for each platform.</description>
    </item>
    
    <item>
      <title>Creating custom .redacted effects</title>
      <link>https://fivestars.blog/code/redacted-custom-effects.html</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>The latest version of SwiftUI, available in Xcode 12, includes a redacted(reason:) view modifier. This modifier is used to hide the content of SwiftUI views, and while useful, is currently quite limited in the API it provides. In this post, Federico Zanetello explores how we can expand on what is currently available by adding custom redacted effects.</description>
    </item>
    
    <item>
      <title>Memoization of Swift properties</title>
      <link>https://forums.swift.org/t/memoization-of-swift-properties/38783</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Memoization is an optimization technique where the results of expensive computations (e.g function calls or computed properties) are stored, and these cached results are returned when the inputs to future computations are unchanged. In this Swift evolution pitch, Justin Reusch proposes adding keywords to Swift which tell the compiler when to synthesize boilerplate code to support the memoization of computed properties. I think this would be a good addition to the language.</description>
    </item>
    
    <item>
      <title>Dependency Injection via Property Wrappers</title>
      <link>https://www.kiloloco.com/articles/004-dependency-injection-via-property-wrappers/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Property Wrappers in Swift allow us to add a layer of separation between code that manages how a property is stored and the code that defines a property. It&#39;s a powerful feature with a lot of potential use cases. Dependency injection is a software engineering technique used to supply dependencies to an object or value type. In this post, Kilo Loco demonstrates how we can use Swift property wrappers to pass dependencies to a SwiftUI view. It&#39;s a cool idea.</description>
    </item>
    
    <item>
      <title>Using MapKit with SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/29/using-mapkit-with-swiftui/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Apple continues to encourage the adoption of SwiftUI by creating more SwiftUI integrations for UIKit frameworks. In this post, Majid Jabrayilov describes the functionality available in the new SwiftUI Map type, which can be used to display MapKit maps in our SwiftUI apps. It&#39;s great to see more and more SwiftUI types like this, avoiding the need to mix SwiftUI and UIKit implementations.</description>
    </item>
    
    <item>
      <title>Implementing Grid Layout in SwiftUI</title>
      <link>https://exyte.com/blog/implementing-grid-layout-in-swiftui</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s LazyVGrid and LazyHGrid types, introduced in iOS 14, provide flexible grid layouts. In this post from the team at exyte, Denis Obukhov and Nikita Afonasov look at what a grid layout is, what features it has, and describe how their custom grid implementation differs from Apple&#39;s.</description>
    </item>
    
    <item>
      <title>SwiftUI features in WidgetKit</title>
      <link>https://www.fivestars.blog/code/swiftui-widgetkit.html</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s WidgetKit framework allows us to display relevant content from an app on the iOS Home screen or in Notification Center on macOS. SwiftUI is used to build widgets, and it has gained new features designed specifically for the task. In this post, Federico Zanetello explores some of these new features and includes examples of how they might be used in more general contexts.</description>
    </item>
    
    <item>
      <title>Activity Indicators in SwiftUI</title>
      <link>https://medium.com/better-programming/activity-indicators-in-swiftui-17b66e6c0137</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Activity indicators and progress bars are UI components that can be used to inform users that an app is performing some task and to give them some idea of how long they will be waiting. In this post, Sarah provides some examples of such UI components implemented in SwiftUI.</description>
    </item>
    
    <item>
      <title>RedditOS - A SwiftUI Reddit client for macOS Big Sur</title>
      <link>https://github.com/Dimillian/RedditOS</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>This open-source SwiftUI app created by Thomas Ricouard is a Reddit client for macOS. It&#39;s great to see apps like this being developed as open-source projects, as it provides opportunities for collaboration and learning from others in the Swift community. Note - you need macOS Big Sur to run this app.</description>
    </item>
    
    <item>
      <title>Sidebar navigation in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/21/sidebar-navigation-in-swiftui/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s NavigationView type - used for presenting a stack of views representing a navigation hierarchy - is incredibly powerful, enabling us to build complex layouts that adapt to the platform they are running on. In this post, Majid Jabrayilov shows us how to use a NavigationView to add a third sidebar column to a two-column master-detail navigation layout.</description>
    </item>
    
    <item>
      <title>SwiftUI Hierarchy List</title>
      <link>https://www.fivestars.blog/code/swiftui-hierarchy-list.html</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>New in iOS 14 is the ability to easily create hierarchical lists using SwiftUI&#39;s List view type. Given a recursive data model that contains optional children of the same type as the parent, a List will display a tree-like structure with expandable rows. In this post, Federico Zanetello shows us how to implement our version of a hierarchical list, creating a custom type that is compatible with iOS 13. I like the approach Federico takes in his posts. Implementing our version of existing types and APIs is a great way of learning more about how the original versions work.</description>
    </item>
    
    <item>
      <title>Entry Points in Swift: How @main and @UIApplicationMain work internally</title>
      <link>https://swiftrocks.com/entry-points-swift-uiapplicationmain-main</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>When creating Swift command-line programs, the Swift compiler automatically generates the main C function, which is used as the program&#39;s entry point. On iOS, where the entry point needs to be more tightly controlled, Swift provides attributes that can be used to designate an app&#39;s entry point. In this post, Bruno Rocha looks at how Swift determines the entry point of an app and explains how the attributes available in iOS work internally.</description>
    </item>
    
    <item>
      <title>Learn About SwiftUI Text and Label in iOS 14</title>
      <link>https://medium.com/better-programming/learn-about-swiftui-text-and-label-in-ios-14-bfee41252117</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>In this short post, Anupam Chugh explores the powerful new Text APIs available in the latest version of SwiftUI. Gist with full source code is provided.</description>
    </item>
    
    <item>
      <title>Safer Localization in SwiftUI</title>
      <link>https://dev.to/jeehut/safer-localization-in-swiftui-4gn8</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides support for localization through its LocalisedStringKey struct. In this post, Cihat Gündüz digs into how this struct enables localization and describes how he implemented improvements to the localization process.</description>
    </item>
    
    <item>
      <title>Allow Property Wrappers with Multiple Arguments to Defer Initialization when wrappedValue is not Specified</title>
      <link>https://forums.swift.org/t/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified/38319</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Swift Property Wrappers without arguments can defer specifying the wrapped value until the initialization of the containing type. In this Swift evolution pitch, Andrew Arnopoulos proposes making this feature available to Property Wrappers which have multiple arguments. Seems like a reasonable proposal to me.</description>
    </item>
    
    <item>
      <title>Generating automatic placeholders for SwiftUI views</title>
      <link>https://www.swiftbysundell.com/tips/swiftui-automatic-placeholders/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI now includes a new modifier, redacted, which can be used to automatically generate placeholders for views. In this post, John Sundell provides an example of using this new modifier, and also shows us how we can use the redactionReasons environment variable to implement custom behaviour.</description>
    </item>
    
    <item>
      <title>Loading Network Data in SwiftUI</title>
      <link>https://blog.timroesner.com/swiftui-network-data-loading</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>The Combine framework provides a declarative API for processing asynchronous events over time. This makes it ideal for asynchronously loading data from a network. In this post, Tim Roesner shows us how we can use Combine together with SwiftUI to request data and display it in a view.</description>
    </item>
    
    <item>
      <title>Swift globals and static members are atomic and lazily computed</title>
      <link>https://www.jessesquires.com/blog/2020/07/16/swift-globals-and-static-members-are-atomic-and-lazily-computed/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>A lazy stored property in Swift is a property whose initial value is not calculated until the first time it used. This is useful as it allows us to delay the initialization of a property that requires a computationally expensive setup until that property is actually needed. In this post, Jesse Squires reminds us that Swift globals and static members are also lazily initialized, and he explains how the concept of atomicity is distinct from the concept of thread-safety.</description>
    </item>
    
    <item>
      <title>Opaque return types in Swift</title>
      <link>https://www.swiftbysundell.com/articles/opaque-return-types-in-swift/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s opaque return types allow us to hide type information for a returned value. While this language feature is likely most familiar from its usage in SwiftUI, it&#39;s a general-purpose feature that can be used in many different contexts. In this post, John Sundell takes a closer look at opaque return types, providing concrete examples of how they can be used.</description>
    </item>
    
    <item>
      <title>Handling deeplinks in iOS 14 with onOpenURL</title>
      <link>https://www.donnywals.com/handling-deeplinks-in-ios-14-with-onopenurl/</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Handling deeplinks using UIKit is cumbersome, requiring developers to implement logic in their App/Scene delegate which needs to know the full app structure to manipulate its navigation state. Thankfully, handling deeplinks with SwiftUI in iOS 14 is much more powerful and flexible. In this post, Donny Wals provides a complete example of using SwiftUI&#39;s new onOpenURL view modifier, showing us how views can modify their state as needed in response to a deeplink.</description>
    </item>
    
    <item>
      <title>Proposing to expand `available` to introduce `discouraged`</title>
      <link>https://forums.swift.org/t/proposing-to-expand-available-to-introduce-discouraged/38197</link>
      <pubDate>Fri, 24 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s available attribute documents characteristics of a declaration&#39;s lifecycle. This Swift evolution pitch from Erica Sadun and Chris Lattner proposes extending the available attribute, introducing discouraged, an argument that can be used to describe why using the associated declaration is discouraged. A small but useful addition to the language.</description>
    </item>
    
    <item>
      <title>Mastering toolbars in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/15/mastering-toolbars-in-swiftui/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI gains a new Toolbar API in iOS 14. Using this API, we can add bar button items to our apps which automatically adapt to their environment. In this post, Majid looks at how this new API works and provides an example of its usage.</description>
    </item>
    
    <item>
      <title>Getting started with WidgetKit</title>
      <link>https://wwdcbysundell.com/2020/getting-started-with-widgetkit/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Apple introduced WidgetKit at WWDC20, a new framework that enables us to build widgets that can be displayed on users&#39; home screens. These widgets are built exclusively using SwiftUI. In this post, John Sundell takes a first look at WidgetKit, and shows us how to get started by building a simple widget.</description>
    </item>
    
    <item>
      <title>StackOv - An open-source SwiftUI Stack Overflow client for iOS, iPadOS, and MacOS</title>
      <link>https://github.com/surfstudio/StackOv</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI is still relatively new, and so the number of pure SwiftUI apps (i.e no UIKit) in the App store is probably low. This open-source app - a Stack Overflow client for iOS, iPadOS, and MacOS - is very nearly 100% SwiftUI, with UIKit really only being used for app lifecycle management. This is a great reference if you are working on your own SwiftUI app.</description>
    </item>
    
    <item>
      <title>Forward scan matching for trailing closures</title>
      <link>Forward scan matching for trailing closures</link>
      <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5.3 extended trailing closure syntax, allowing additional labeled trailing closures to follow an initial un-labeled trailing closure. In this Swift evolution pitch, Doug Gregor from the Swift Core Team proposes an improvement to how the Swift compiler scans and matches trailing closure arguments to parameters. This is a source-breaking change, but Doug believes that it&#39;s worth doing now to get an improved scanning model sooner.</description>
    </item>
    
    <item>
      <title>SwiftUI Property Wrappers</title>
      <link>https://swiftuipropertywrappers.com</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides a variety of property wrappers that we can leverage to manage state and data flow in our applications. Deciding which property wrapper to use depends on several factors, such as the type of data being wrapped, how the data is used, and how the SwiftUI view receives the data. This site, created by Donny Wals, is a quick reference when making such a decision. Definitely one to bookmark.</description>
    </item>
    
    <item>
      <title>Introducing Swift Service Lifecycle</title>
      <link>https://swift.org/blog/swift-service-lifecycle/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Tom Doron from the Swift Core Team announced a new open-source project for the Swift server ecosystem. The Service Lifecycle package is designed to help server applications, i.e services, manage their startup and shutdown sequences. It&#39;s always great to see progress being made regarding Swift on the server, and in this post, Tom describes the new package and provides an example of its usage.</description>
    </item>
    
    <item>
      <title>Invert guard let scoping</title>
      <link>https://forums.swift.org/t/invert-guard-let-scoping/38401</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>In this Swift evolution pitch, Danny Sung proposes the introduction of an inverted scope guard let pattern. Danny explains that this would solve the problem of guarding against a condition, while also making an optional value associated with the condition available inside the body of the guard statement. Although I understand the problem, I am not sure if adding negated versions of such keywords is the right solution.</description>
    </item>
    
    <item>
      <title>Mastering grids in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Two new container views - LazyVGrid and LazyHGrid - have been added to SwiftUI in iOS 14. These new container views arrange their child views in a grid that grows either vertically or horizontally, creating items only as needed. In this post, Majid demonstrates how we can create complex and adaptive layouts using these incredibly powerful new types.</description>
    </item>
    
    <item>
      <title>Swift Unwrapped #86: Tuples</title>
      <link>https://spec.fm/podcasts/swift-unwrapped/fxMk4ipF</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Tuples are a Swift compound type consisting of a comma-separated list of types, enclosed in parentheses. They are probably most often used to return multiple values from a function. In this episode of the Swift Unwrapped podcast, Jesse Squires and JP Simard use a Swift evolution proposal as a starting point for a discussion about tuples, and compare the type against named types such as structures and classes.</description>
    </item>
    
    <item>
      <title>A guide to SwiftUI’s state management system</title>
      <link>https://swiftbysundell.com/articles/swiftui-state-management-guide/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI includes several property wrappers that allow us to declare exactly how data is observed and mutated by views. In this post from John Sundell, he takes a closer look at SwiftUI&#39;s overall state management system and provides concrete examples of when we might use each of the related property wrappers.</description>
    </item>
    
    <item>
      <title>Building Glyph: A Year With SwiftUI</title>
      <link>https://www.getglyph.app/blog/3-building-glyph-a-year-with-swiftui</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>With so many posts written about what is possible with SwiftUI, it&#39;s interesting to read about a real-world experience of using it in a production app. In this post, Roshan Choxi shares his experience of building the Glyph iPad app entirely in SwiftUI.</description>
    </item>
    
    <item>
      <title>Custom navigation bar title view in SwiftUI</title>
      <link>https://sarunw.com/posts/custom-navigation-bar-title-view-in-swiftui/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI in iOS 14 includes a new ToolbarItem type and toolbar view modifier, which can be used together to create a customized navigation bar title. In this short post, Sarun shows us how to create a navigation bar title that displays text, an image, and even a button.</description>
    </item>
    
    <item>
      <title>SwiftUI: Bridging UIKit with ScrollViewReader and DragGesture</title>
      <link>https://www.fivestars.blog/code/section-title-index-swiftui.html</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI includes a ScrollView type, which is similar in function to its UIKit counterpart. However, until recently, SwiftUI was unable to programmatically scroll to a particular offset in the ScrollView. With iOS 14, this is now possible, and in this post, Federico Zanetello uses this new ability, together with DragGesture, to implement his own version of an index list.</description>
    </item>
    
    <item>
      <title>SwiftUI’s New App Lifecycle and Replacements for AppDelegate and SceneDelegate in iOS 14</title>
      <link>https://medium.com/better-programming/swiftuis-new-app-lifecycle-and-replacements-for-appdelegate-and-scenedelegate-in-ios-14-c9cf4a2367a9</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>With iOS 14, it is now possible to build entire apps using only SwiftUI, avoiding the need to implement UIKit lifecycle protocols such as UIApplicationDelegate. This is made possible due to the introduction of new SwiftUI features such as the App protocol and SceneBuilder function builder. Here, Anupam Chugh shows us how we can leverage these new SwiftUI features to implement a SwiftUI app lifecycle.</description>
    </item>
    
    <item>
      <title>as, as?, and as!</title>
      <link>https://oleb.net/2020/as/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>This is a really interesting post from Ole Begemann. Swift&#39;s type casting operators, is and as, are powerful but complex operators, with a whole list of functions. Here, Ole presents an unexpected fatal error encountered when using one of these operators, and uses it to explain the difference between downcasting at runtime, and type coercion at compile time.</description>
    </item>
    
    <item>
      <title>Importing Web-based SwiftPM packages to your Xcode Playground</title>
      <link>https://ericasadun.com/2020/07/03/importing-web-based-swiftpm-packages-to-your-xcode-playground/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>I really enjoy the variety of Swift-related topics that Erica Sadun writes about. In this short post, Erica shows us how she overcame a limitation in Xcode playgrounds which currently only allows us to import Swift packages that are either already downloaded or developed locally.</description>
    </item>
    
    <item>
      <title>A first look at matchedGeometryEffect</title>
      <link>https://sarunw.com/posts/a-first-look-at-matchedgeometryeffect/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides great support for animation, allowing us to animate changes to views, or to a view&#39;s state. In the latest version of SwiftUI, included in the iOS 14 beta, we get a new method, matchedGeometryEffect, which defines a group of views with synchronized geometry. Combining this method with SwiftUI&#39;s support for animations allows us to animate a change in the position and size of two or more views in our view hierarchy. In this post, Sarun shows us how it&#39;s done.</description>
    </item>
    
    <item>
      <title>The difference between @StateObject, @EnvironmentObject, and @ObservedObject in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/02/the-difference-between-stateobject-environmentobject-and-observedobject-in-swiftui/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI implements it&#39;s data flow management types, such as State, Binding, and ObservedObject, as property wrappers. In this post, Majid explains the difference between some of these property wrappers, including the new StateObject property wrapper which is available in iOS 14</description>
    </item>
    
    <item>
      <title>Adding optional @Bindings to SwiftUI views</title>
      <link>https://www.fivestars.blog/code/optional-binding.html</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI gained a number of new view types at WWDC this year, one of them being DisclosureGroup. DisclosureGroup acts like an expandable cell, showing or hiding it&#39;s content based on it&#39;s disclosure state. One interesting aspect of this view is that it provides a number of initializers, some of which require an isExpanded binding, some of which don&#39;t. In other words, this isExpanded binding is optionally passed in when the view is initialized. In this post, Federico Zanetello shows us how we can add optional bindings to SwiftUI views, by creating his own version of the DisclosureGroup view.</description>
    </item>
    
    <item>
      <title>UICollectionView Compositional List Layout</title>
      <link>https://www.youtube.com/watch?v=5Q4KgyESHRA</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>iOS 14 adds a new list layout to UICollectionView, and with Apple recommending we use this for displaying lists of data, it&#39;s likely that UITableView will be deprecated at some point in the future. In this video from Kilo Loco, we learn how to implement the new UICollectionView List Compositional Layout in Swift.</description>
    </item>
    
    <item>
      <title>Introduce AnonymousKeyPath</title>
      <link>https://forums.swift.org/t/introduce-anonymouskeypath/38080</link>
      <pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>In this evolution pitch from the Swift forums, Shai Mishali suggests the introduction of a new kind of KeyPath - AnonymousKeyPath. The idea here is that the key path can be used without knowing the Root of the KeyPath, but rather only the Value constrained to it. Although it&#39;s an interesting suggestion, the discussion that follows the pitch indicates that the problem it solves can be solved in other, more effective ways.</description>
    </item>
    
    <item>
      <title>iOS 14: Notable UIKit Additions</title>
      <link>https://www.swiftjectivec.com/ios-14-notable-uikit-additions/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>With Apple understandably putting a lot of effort into SwiftUI, it&#39;s great to see that UIKit is not being ignored. iOS 14 includes substantial updates to UIKit, and in this post from Jordan Morgan, we get a rundown of some of the new additions, with Swift code samples for each. I really like the move away from the target-action pattern to UIActions.</description>
    </item>
    
    <item>
      <title>Returning to an old hobbyhorse: Migrating higher order function names to comply with API guidelines</title>
      <link>https://forums.swift.org/t/returning-to-an-old-hobbyhorse-migrating-higher-order-function-names-to-comply-with-api-guidelines/37728</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>A higher order function is a function which takes a function as an argument, or returns a function. In this post from the Swift forums, Erica Sadun pitches a proposal to rename Swift&#39;s higher order functions, such as map and filter, based on the Swift API design guidelines. It&#39;s something which can be done without causing breaking changes, and I am in favour of the proposal.</description>
    </item>
    
    <item>
      <title>New property wrappers in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/06/29/new-property-wrappers-in-swiftui/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI allows us to declaratively build our user interfaces, while also indicating data dependencies for our views. We indicate these dependencies using data management types, which are implemented in SwiftUI as property wrappers such as State and Binding. With iOS 14, SwiftUI introduces additional property wrappers to help us manage state and data flow, and in this post, Majid shows us how we can use them.</description>
    </item>
    
    <item>
      <title>How SwiftUI can now be used to build entire iOS apps</title>
      <link>https://wwdcbysundell.com/2020/building-entire-apps-with-swiftui/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>At this year&#39;s WWDC20, SwiftUI received some very impressive updates. One of them is the ability to create an entry point for an app without needing to rely on UIKit/AppKit. What this means is that we can now build an entire app using SwiftUI. In this post, John Sundell shows us how simple it is to build such an app.</description>
    </item>
    
    <item>
      <title>Use PinnedScrollableViews to make sticky headers</title>
      <link>https://yoswift.dev/swiftui/pinnedScrollableViews/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>In this short post from Yo! Swift, we learn how to use the new SwiftUI PinnedScrollableViews type to implement sticky headers in a scrollable view.</description>
    </item>
    
    <item>
      <title>Add custom SwiftUI view to View Library with LibraryContentProvider</title>
      <link>https://sarunw.com/posts/add-custom-swiftui-view-to-view-library/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Xcode&#39;s library allows us to quickly access commonly used SwiftUI system elements such as views and modifiers. New to iOS 14 and Xcode 12 is the ability to add our own custom SwiftUI views to the library. This post from Sarun shows us how to do it.</description>
    </item>
    
    <item>
      <title>Enabling high-performance Metal rendering with drawingGroup()</title>
      <link>https://www.hackingwithswift.com/books/ios-swiftui/enabling-high-performance-metal-rendering-with-drawinggroup</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>As many iOS devices now render at 120 frames per second, it&#39;s important we consider performance when rendering complex content. In this post from Paul Hudson, we learn how to use the drawingGroup view modifier to improve rendering when using SwiftUI.</description>
    </item>
    
    <item>
      <title>Grouping Array Elements With Dictionary in Swift</title>
      <link>https://swiftsenpai.com/swift/group-array-elements-with-dictionary/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5 introduced a new initializer for Dictionary, which allows us to create a dictionary of grouped elements from an input array. Here, Lee Kah Seng demonstrates how we can use this initializer to group array elements based on a custom property of the array element type.</description>
    </item>
    
    <item>
      <title>SwiftUI: Two equal width columns</title>
      <link>https://noahgilmore.com/blog/swiftui-two-columns-equal-width/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides built-in view modifiers which we can apply to views to produce a different version of the original view. One such modifier is frame(width:height:alignment:), which when applied to a view positions it within an invisible frame with the specified size. In this post, Noah Gilmore shows us how we can use the frame modifier to create a view consisting of two equal width columns.</description>
    </item>
    
    <item>
      <title>SwiftUI Tips and Tricks</title>
      <link>https://medium.com/better-programming/swiftui-tips-and-tricks-c7840d8eb01b</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Anupam Chugh has compiled a list of tips and tricks to help us build our SwiftUI applications. Check them out.</description>
    </item>
    
    <item>
      <title>SwiftUI: Double-Edged Sword</title>
      <link>https://mohsen.dev/2020/06/21/swiftui-double-edged-sword.html</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>I really like this short post from Mohsen Alijanpour. One of the many benefits of migrating to SwiftUI from the world of UIKit, which assumes we will build using the MVC pattern, is that SwiftUI is architecure-less. That is, SwiftUI doesn&#39;t assume what architectural pattern we will use when building. Here, Mohsen highlights this freedom, while also reminding us that such freedom comes at the cost of more responsibility.</description>
    </item>
    
    <item>
      <title>Using SceneStorage for State Restoration in SwiftUI Apps</title>
      <link>https://lostmoa.com/blog/UsingSceneStorageForStateRestorationInSwiftUIApps/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>iOS 14 introduces a new SwiftUI property wrapper, SceneStorage. In this short post, Natalia Panferova shows us how we can use it to persist tab selection in a tab-based app.</description>
    </item>
    
    <item>
      <title>The magic of Animatable values in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/06/17/the-magic-of-animatable-values-in-swiftui/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI provides view modifiers which allow us to animate changes to a view&#39;s state. In this post, Majid demonstrates how we can build complex animations using Swift&#39;s VectorArithmetic protocol.</description>
    </item>
    
    <item>
      <title>Integrating SwiftUI &amp; UI Kit</title>
      <link>https://www.youtube.com/watch?v=ssz02HMEoR0&amp;t</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>In this talk from dotSwift 2020, Ishmael Shabazz discusses integrating SwiftUI and UIKit. Ishmael first looks at how we can use UIKit views in a SwiftUI hierarchy, and then switches sides to show us how to add SwiftUI views to a UIKit hierarchy.</description>
    </item>
    
    <item>
      <title>Re: Making Wrong Code Look Wrong</title>
      <link>https://silverhammermba.github.io/blog/2020/06/17/wrong-code</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Based on an old blog post by Joel Spolsky, Maxwell Anselm describes how serious software development challenges from the past are basically non-issues in modern languages like Swift. This is a great read, and really highlights the progress that has been made in programming language design.</description>
    </item>
    
    <item>
      <title>SwiftUI, UIViewRepresentable, and attributed text</title>
      <link>https://blog.hyperdeck.io/posts/2020-6-18-swiftui-uiviewrepresentable-and-attributed-text.html</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is an interesting post from Benedikt Terhechte on the difficulty of handling rich text with SwiftUI 1.0. To support Markdown in his Hyperdeck app, Benedikt needed a SwiftUI type which supported rich text via attributed text. However, as there is no native SwiftUI 1.0 type which supports attributed text, Benedikt needed to look for other solutions.</description>
    </item>
    
    <item>
      <title>What&#39;s new in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/06/23/what-is-new-in-swiftui/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>It&#39;s WWDC20, and all new SwiftUI features are here! In this post, Majid takes a peek at some of these new features. There are some really cool additions in this iteration of SwiftUI, and I particularly like the new way of defining an app&#39;s entry point using the new App and Scene protocols.</description>
    </item>
    
    <item>
      <title>Building a silly WatchKit App</title>
      <link>https://ericasadun.com/2020/06/05/building-a-silly-watchkit-app/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Erica Sadun with a short post describing her efforts to build a simple WatchKit app using SwiftUI. The amount of code required to implement her app was small, about 40 lines, but Erica encountered some problems when trying to deploy her app to hardware for testing.</description>
    </item>
    
    <item>
      <title>TikTok logo-ish effect in SwiftUI</title>
      <link>https://nerdyak.tech/development/2020/06/12/create-tiktok-logo-effect-in-swiftui.html</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Taking a break from WWDC, this post from Pavel Zak shows us how to create an image with a blurred and blended effect, similar to the TikTok logo. Pavel uses a custom ViewModifier, creating an effect which can be reused on any SwiftUI view.</description>
    </item>
    
    <item>
      <title>What’s new in SwiftUI for iOS 14</title>
      <link>https://www.hackingwithswift.com/articles/221/whats-new-in-swiftui-for-ios-14</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>It&#39;s a big week, with lots of awesome new things to learn and try out. SwiftUI was always going to see big improvements this year, and luckily we have people like Paul Hudson to help us keep up with all the changes. This evolving post from Paul summarises the SwiftUI changes as Paul works through them, and he includes code samples for all. Bookmark and check back in daily.</description>
    </item>
    
    <item>
      <title>The power of @ViewBuilder in SwiftUI</title>
      <link>https://swiftwithmajid.com/2019/12/18/the-power-of-viewbuilder-in-swiftui/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Swift function builders allow us to create APIs which provide a DSL-like syntax. ViewBuilder is one such function builder, and is used by SwiftUI to create views. In this post, Majid shows us how we can build our own reusable SwiftUI views, using ViewBuilder to separate our presentation logic and content.</description>
    </item>
    
    <item>
      <title>Benefits of using throwing functions (try) - Swift&#39;s most underrated feature?</title>
      <link>https://swiftrocks.com/benefits-of-throwing-functions-try-swift-underrated-feature</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Based on his experience with one of his own projects, Bruno Rocha makes his case for why he thinks throwing functions are Swift&#39;s most underrated feature. Bruno lists a number of benefits, providing code examples for each.</description>
    </item>
    
    <item>
      <title>Static Thread Safety</title>
      <link>https://forums.swift.org/t/static-thread-safety/37542</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is an interesting Swift evolution draft proposal. In it, Guy Brooker proposes some small language changes which would allow the Swift compiler to spot basic concurrent programming errors. I like the syntax Guy proposes for specifying execution context.</description>
    </item>
    
    <item>
      <title>Using the builder pattern in Swift</title>
      <link>https://swiftbysundell.com/articles/using-the-builder-pattern-in-swift/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>In this post from John Sundell we take a look at the builder pattern. John describes how the design pattern works, looks at the problems it aims to solve, and shows us how we can implement and use it in Swift.</description>
    </item>
    
    <item>
      <title>View composition in SwiftUI</title>
      <link>https://swiftwithmajid.com/2019/10/30/view-composition-in-swiftui/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Majid looks at view composition in this post, showing us how we can use computed properties, grouping, and custom view modifiers to make our SwiftUI code more reusable and maintainable.</description>
    </item>
    
    <item>
      <title>Why TextView is my SwiftUI canary</title>
      <link>https://appdecentral.com/2020/06/07/why-textview-is-my-swiftui-canary/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is a very interesting post from Drew McCormack. Ahead of WWDC20, Drew writes about how SwiftUI&#39;s declarative style currently presents performance challenges when working with large volumes of changing model data. Drew then explains why he will be looking at how SwiftUI handles text as the framework evolves, as it&#39;s a good indication of whether SwiftUI is ready to replace UIKit/AppKit.</description>
    </item>
    
    <item>
      <title>SwiftUI wishlist for WWDC20</title>
      <link>https://swiftwithmajid.com/2020/06/10/swiftui-wishlist-for-wwdc20/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>With WWDC20 just around the corner, Majid shares his wishlist of SwiftUI features and updates which he hopes Apple will announce next week. I would be surprised if Apple didn&#39;t announce at least a couple of these, particularly a SwiftUI version of CompositionalLayout and additional views such as SearchBar and TextView.</description>
    </item>
    
    <item>
      <title>Infinite List Scroll with SwiftUI and Combine</title>
      <link>https://www.vadimbulavin.com/infinite-list-scroll-swiftui-combine/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Vadim Bulavin demonstrates how we can implement infinite scroll on iOS using SwiftUI and the Combine framework. It&#39;s a really nice, simple approach, implemented using the MVVM iOS app architecture.</description>
    </item>
    
    <item>
      <title>Adding support for versioning and migration to your Codable models.</title>
      <link>http://merowing.info/2020/06/adding-support-for-versioning-and-migration-to-your-codable-models./</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>I really like this idea from Krzysztof Zabłocki that adds support for versioning to Codable models. It&#39;s super lightweight, involving conformance to a single protocol and a custom decoder with one method, but allows us to decode any versioned model and apply all necessary migrations.</description>
    </item>
    
    <item>
      <title>Function Builders in Swift and SwiftUI</title>
      <link>https://www.vadimbulavin.com/swift-function-builders-swiftui-view-builder/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 5.1 introduced functions builders, a language feature which enables SwiftUI&#39;s declarative DSL. In this article from Vadim Bulavin, we learn more about what function builders are, how they are handled by the Swift compiler, and how we can implement our own custom builders.</description>
    </item>
    
    <item>
      <title>Intro to free functions in Swift</title>
      <link>https://jakubturek.com/intro-to-functional-programming-in-swift/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is an excellent post from Jakub Turek on functional programming and free functions in Swift. Jakub guides us through a complete example of using free, generic and composable functions to transform complex data. The approach results in an implementation which is easier to both read and test. Definitely one to code along to in a playground.</description>
    </item>
    
    <item>
      <title>Designing reusable Swift libraries</title>
      <link>https://www.swiftbysundell.com/articles/designing-reusable-swift-libraries/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Implementing pragmatic reusable code involves striking the right balance between reducing duplication and avoiding unnecessary layers of abstraction. This post from John Sundell aims to help us achieve that balance, showing us how to package generic concepts as libraries with the help of strong types and unit testing.</description>
    </item>
    
    <item>
      <title>How to Conditionally Apply View Modifiers in SwiftUI</title>
      <link>https://medium.com/better-programming/conditionally-applying-view-modifiers-in-swiftui-c5541711eb41</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>In this post Frank Jia implements an extension on the SwiftUI View type that allows us to conditionally apply a view modifier. Frank&#39;s usage of the ViewBuilder attribute results in a concise, elegant implementation.</description>
    </item>
    
    <item>
      <title>The Swift 5.1 features that power SwiftUI’s API</title>
      <link>https://swiftbysundell.com/articles/the-swift-51-features-that-power-swiftuis-api/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI will no doubt feature heavily at WWDC this year and so I thought it would be a good idea to review the Swift 5.1 features which made SwiftUI possible. This post from John Sundell covers opaque return types, omitted returns, function builders, and property wrappers.</description>
    </item>
    
    <item>
      <title>Decode and Flatten JSON with Dynamic Keys Using Decodable</title>
      <link>https://swiftsenpai.com/swift/decode-dynamic-keys-json/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Lee Kah Seng demonstrates how we can use Swift&#39;s Decodable protocol to decode and flatten JSON with dynamic keys. This is definitely something that might come in useful, and Lee provides a full working example.</description>
    </item>
    
    <item>
      <title>Swift Without Screens - Powering Connected Devices</title>
      <link>https://www.youtube.com/watch?v=VILUaec-sCs</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>After a long run of SwiftUI-related posts 😅, it&#39;s time for something completely different. In this video from the try! Swift NYC 2019 conference, Marc Aupont shows us how Swift can be used to drive applications running on embedded systems such as the Raspberry Pi. Very cool.</description>
    </item>
    
    <item>
      <title>ViewModifiers in SwiftUI</title>
      <link>https://swiftwithmajid.com/2019/08/07/viewmodifiers-in-swiftui/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>ViewModifiers play a central role in SwiftUI, and in this post Majid shows us how we can create our own custom modifiers. I really like the idea of wrapping a network request to fetch an image in a custom ViewModifier. It&#39;s a great example of encapsulation and reuse.</description>
    </item>
    
    <item>
      <title>When Should I Use @State, @Binding, @ObservedObject, @EnvironmentObject, or @Environment?</title>
      <link>https://jaredsinclair.com/2020/05/07/swiftui-cheat-sheet.html</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Excellent post from Jared Sinclair in which he defines in simple terms when we should use the most common SwiftUI property wrappers. It&#39;s a super useful cheat sheet, and definitely one to bookmark as a reference.</description>
    </item>
    
    <item>
      <title>Using coordinators to manage SwiftUI view controllers</title>
      <link>https://www.hackingwithswift.com/books/ios-swiftui/using-coordinators-to-manage-swiftui-view-controllers</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is an excellent post from Paul Hudson on SwiftUI coordinators. Paul takes us step by step through a complete example of using a coordinator to act as a delegate for a UIKit view controller.</description>
    </item>
    
    <item>
      <title>How the SwiftUI DSL Works</title>
      <link>https://harshil.net/blog/swiftui-dsl-function-builders</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Harshil Shah writes about SwiftUI&#39;s DSL (Domain Specific Language), with a focus on function builders. Although not intended to be publicly used yet, function builders are available in current Swift development toolchains, and are key to really understanding how SwiftUI works.</description>
    </item>
    
    <item>
      <title>Mastering images in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/05/27/mastering-images-in-swiftui/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Majid covers the SwiftUI Image type in this post. He first starts with the basics before moving onto view modifiers relating to resizing and rendering. A good reference if you are working with images in SwiftUI.</description>
    </item>
    
    <item>
      <title>Scroll List to Row in SwiftUI</title>
      <link>https://lostmoa.com/blog/ScrollListToRowInSwiftUI/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Continuing the SwiftUI theme, this post by Natalia Panferova shows us how we can implement scroll to row for a SwiftUI List. The approach is based on the fact that currently the List view in SwiftUI is a UITableView under the hood.</description>
    </item>
    
    <item>
      <title>How to use @ObservedObject to manage state from external objects</title>
      <link>https://www.hackingwithswift.com/quick-start/swiftui/how-to-use-observedobject-to-manage-state-from-external-objects</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>At this point, most of us are likely familiar with how observed objects can be used with SwiftUI to manage state. However, a quick refresh is often helpful, and this post from Paul Hudson provides exactly that.</description>
    </item>
    
    <item>
      <title>Getting the most out of Xcode Previews for SwiftUI</title>
      <link>https://swiftbysundell.com/articles/getting-the-most-out-of-xcode-previews/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>John Sundell shows us a number of techniques and abstractions to help us make the most of Xcode 11&#39;s Preview feature. As always, John provides lots of code snippets which we can immediately start using in our own code.</description>
    </item>
    
    <item>
      <title>Combine and SwiftUI views</title>
      <link>https://swiftwithmajid.com/2019/11/27/combine-and-swiftui-views/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <description>In this post, Majid demonstrates how we can use SwiftUI&#39;s onReceive view modifier to react to values emitted from a Combine publisher. I really like the approach of wrapping the publisher creation and onReceive logic into a custom view modifier to make it reusable.</description>
    </item>
    
    <item>
      <title>Swift tip: marking unused required initializers as unavailable</title>
      <link>https://www.jessesquires.com/blog/2020/05/20/marking-unused-required-initializers-as-unavailable/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0000</pubDate>
      
      <description>Jesse Squires shares a Swift tip to help us avoid accidentally calling an irrelevant type initializer.</description>
    </item>
    
    <item>
      <title>An effective way to clear entire Userdefaults in Swift</title>
      <link>https://ohmyswift.com/blog/2020/05/19/an-effective-way-to-clear-entire-userdefaults-in-swift/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      
      <description>This is a nice, simple Swift tip from Oh my Swift. It uses an iOS app&#39;s bundle identifier to simplify the task of clearing all the UserDefault values associated with the app.</description>
    </item>
    
    <item>
      <title>What&#39;s new in Swift 5.3?</title>
      <link>https://theswiftdev.com/whats-new-in-swift-5-3/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <description>Tibor Bödecs with a post that showcases some of the latest language features coming in Swift 5.3. All of the improvements Tibor describes are really cool, but my favourite is the implementation of SE-0268, which improves didSet semantics. It&#39;s a subtle, low-profile change which improves the performance of the language.</description>
    </item>
    
    <item>
      <title>The Future of Swift on the Server</title>
      <link>https://www.timc.dev/posts/future-of-server-side-swift/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <description>This is a really interesting piece from Tim Condon on the future of server-side Swift. Tim first writes about IBM&#39;s decision to step away from Swift, something which was obviously disappointing for the community. However, Tim then makes a solid argument for why he thinks the future is looking bright for Swift on the server, considering the planned roadmap for Swift 6 and numerous server-related non-Apple projects. I really like the reminder of how young Swift is, particularly when compared to languages such as Go and Rust.</description>
    </item>
    
    <item>
      <title>How to Define a Protocol With @Published Property Wrapper Type</title>
      <link>https://swiftsenpai.com/swift/define-protocol-with-published-property-wrapper/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <description>One current limitation of Swift&#39;s property wrapper feature is that we cannot apply a property wrapper to a property defined in a protocol. Here, Lee demonstrates a workaround to this limitation, showing us how we can apply the @Published property wrapper to a protocol property.</description>
    </item>
    
    <item>
      <title>Understanding type erasure in Swift</title>
      <link>https://www.donnywals.com/understanding-type-erasure-in-swift/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <description>In this post Donny Wals explains type erasure. Donny first describes why type erasure is useful, and then shows us how we can apply it in our code. This is a great post, and explains a complicated topic in a very accessible manner.</description>
    </item>
    
    <item>
      <title>The Some Keyword In Swift</title>
      <link>https://learnappmaking.com/some-swift-opaque-types-how-to/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <description>In this post Reinder de Vries explains a language feature introduced with Swift 5.1 - opaque types. Reinder describes what they are, how they relate to Generics, and how they can solve a common problem encountered when using protocols with associated types.</description>
    </item>
    
    <item>
      <title>Template-view pattern in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/05/13/template-view-pattern-in-swiftui/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <description>Continuing the SwiftUI theme, this post from Majid describes a technique which can be used to support dynamic type in stack views. I really like posts like this that demonstrate how a bit of creativity can go a long way to solving common UI issues.</description>
    </item>
    
    <item>
      <title>SwiftUI Navigation in List View: Programmatic Navigation</title>
      <link>https://lostmoa.com/blog/ProgrammaticNavigationInSwiftUIListView/</link>
      <pubDate>Sat, 16 May 2020 16:47:06 +0000</pubDate>
      
      <description>It&#39;s been a while, but I&#39;m planning to again focus some of my time on Swift. And with that...this is a nice idea to provide a solution to programmatic navigation in SwiftUI. Code samples included 🥳.</description>
    </item>
    
    <item>
      <title>Reasoning about protocols</title>
      <link>https://swiftindepth.com/2019-01-01/reasoning-about-protocols</link>
      <pubDate>Fri, 04 Jan 2019 16:47:06 +0000</pubDate>
      
      <description>This is a really nice read. Tjeerd clears up some of the confusion which may arise when using Swift protocols.</description>
    </item>
    
    <item>
      <title>Unit testing retain cycles</title>
      <link>https://paul-samuels.com/blog/2018/11/20/unit-testing-retain-cycles/</link>
      <pubDate>Tue, 27 Nov 2018 17:28:55 +0000</pubDate>
      
      <description>Paul Samuels demonstrates how we can use two helper functions to easily unit test for retain cycles.</description>
    </item>
    
    <item>
      <title>Swift Tip: Local Struct Definitions</title>
      <link>https://www.objc.io/blog/2018/11/20/local-structs/</link>
      <pubDate>Mon, 26 Nov 2018 13:23:52 +0000</pubDate>
      
      <description>This Swift tip from the objc.io team demonstrates the benefits of keeping a struct definition local to a function. Simple but useful.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Add Result to the Standard Library</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md</link>
      <pubDate>Fri, 23 Nov 2018 14:05:25 +0000</pubDate>
      
      <description>Result is a type commonly used for manual propagation and handling of errors within the Swift community. This Swift evolution proposal seeks to add a generic Result type to the Swift standard library. It’s currently in review 🤞🏽.</description>
    </item>
    
    <item>
      <title>Language Server Protocol</title>
      <link>https://nshipster.com/language-server-protocol/</link>
      <pubDate>Tue, 13 Nov 2018 09:21:55 +0000</pubDate>
      
      <description>Apple recently announced that it was starting work to adopt the Language Server Protocol for Swift. In this post, Mattt Thompson from NSHipster explains why this is one of the most important decisions Apple has made for Swift since releasing the language as open-source in 2014.</description>
    </item>
    
    <item>
      <title>What&#39;s .self, .Type and .Protocol? Understanding Swift Metatypes</title>
      <link>https://swiftrocks.com/whats-type-and-self-swift-metatypes.html</link>
      <pubDate>Thu, 08 Nov 2018 11:07:06 +0000</pubDate>
      
      <description>Bruno Rocha digs in to Swift metatypes. He first explains what a metatype is, before highlighting the differences between dynamic and static metatypes.</description>
    </item>
    
    <item>
      <title>The power of key paths in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-key-paths-in-swift</link>
      <pubDate>Sun, 04 Nov 2018 16:00:53 +0000</pubDate>
      
      <description>In this entry of his regular series on Swift, John Sundell demonstrates the power of Swift key paths, a dynamic feature introduced with Swift 4. I particularly like the section on converting key paths to functions, allowing them to be used in place of completion closures.</description>
    </item>
    
    <item>
      <title>Specializing Protocols in Swift</title>
      <link>https://www.swiftbysundell.com/posts/specializing-protocols-in-swift</link>
      <pubDate>Tue, 30 Oct 2018 13:56:25 +0000</pubDate>
      
      <description>John Sundell shows us how we can use protocols to create multiple levels of abstraction, allowing us to start out with a more general protocol that we can then specialize.</description>
    </item>
    
    <item>
      <title>DropdownTitleView - A UINavigationItem.titleView compatible UIControl with a title, subtitle, and dropdown.</title>
      <link>https://github.com/GitHawkApp/DropdownTitleView</link>
      <pubDate>Fri, 26 Oct 2018 15:40:34 +0000</pubDate>
      
      <description>This is a nice Swift component which provides a simple and configurable dropdown view which can be substituted for a UINavigationItem titleView.</description>
    </item>
    
    <item>
      <title>Building DSLs in Swift</title>
      <link>https://www.swiftbysundell.com/posts/building-dsls-in-swift</link>
      <pubDate>Sun, 21 Oct 2018 10:05:06 +0000</pubDate>
      
      <description>John Sundell demonstrates how Swift&#39;s type inference and overloading capabilities make it a  great language for building Domain Specific Languages.</description>
    </item>
    
    <item>
      <title>Sizes - View your app on different device and font sizes</title>
      <link>https://github.com/marcosgriselli/Sizes</link>
      <pubDate>Thu, 18 Oct 2018 08:31:59 +0000</pubDate>
      
      <description>This is a really cool Swift library from Marcos Griselli. It enables us to evaluate how our app layout behaves across all possible device sizes, orientations, and font combinations while running on a single simulator configuration. Very useful.</description>
    </item>
    
    <item>
      <title>New LSP language service supporting Swift and C-family languages for any editor and platform</title>
      <link>https://forums.swift.org/t/new-lsp-language-service-supporting-swift-and-c-family-languages-for-any-editor-and-platform/17024</link>
      <pubDate>Wed, 17 Oct 2018 12:10:40 +0000</pubDate>
      
      <description>On the official Swift forums, Argyrios Kyrtzidis announces that Apple are going to start a new open-source project for a Swift and C-family language service based on the Language Server Protocol. What this means is that they will focus on building common infrastructure that can be shared by Xcode and other editors such as Atom or Sublime Text.</description>
    </item>
    
    <item>
      <title>Hiding Implementation Details Using internal Properties</title>
      <link>https://holko.pl/2018/10/08/internal-modifier/</link>
      <pubDate>Fri, 12 Oct 2018 15:16:45 +0000</pubDate>
      
      <description>Arek Holko demonstrates how to provide dependency injection while hiding implementation details using internal properties.</description>
    </item>
    
    <item>
      <title>Smoke Framework</title>
      <link>https://github.com/amzn/smoke-framework</link>
      <pubDate>Fri, 12 Oct 2018 14:58:28 +0000</pubDate>
      
      <description>Amazon engineering have released a light-weight server-side service framework written in Swift. It uses SwiftNIO for it’s networking layer, and can even be used with model code generators such as Swagger.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Fix ExpressibleByStringInterpolation</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0228-fix-expressiblebystringinterpolation.md</link>
      <pubDate>Wed, 10 Oct 2018 08:46:08 +0000</pubDate>
      
      <description>This is a really cool Swift language evolution proposal which proposes a new design for the ExpressibleByStringInterpolation protocol. Due to issues with the original implementation of this protocol, it was deprecated. The new design aims to address these issues, and add new capabilities to string interpolation.</description>
    </item>
    
    <item>
      <title>Bloom Filters and Swift 4.2</title>
      <link>http://khanlou.com/2018/09/bloom-filters/</link>
      <pubDate>Fri, 05 Oct 2018 10:49:44 +0000</pubDate>
      
      <description>This is a really interesting post from Soroush Khanlou. Soroush explains how a data structure called a Bloom filter works, and describes how we can implement such a data structure using Swift 4.2 features.</description>
    </item>
    
    <item>
      <title>The State of Developer Ecosystems - Swift &amp; Objective-C</title>
      <link>https://www.jetbrains.com/research/devecosystem-2018/swift-objc/</link>
      <pubDate>Thu, 04 Oct 2018 16:33:32 +0000</pubDate>
      
      <description>JetBrains have collected data on the current state of developer ecosystems, and published this interested report on how Swift and Objective-C are being used.</description>
    </item>
    
    <item>
      <title>It’s wrappers all the way down</title>
      <link>https://oleb.net/2018/lastindex-reversed/</link>
      <pubDate>Sun, 30 Sep 2018 11:46:37 +0000</pubDate>
      
      <description>Ole Begemann uses the example of splitting a string to teach us about the design of collection types and protocol hierarchy in the Swift standard library.</description>
    </item>
    
    <item>
      <title>Swift 5.0 Release Process</title>
      <link>https://swift.org/blog/5-0-release-process/</link>
      <pubDate>Fri, 28 Sep 2018 13:08:00 +0000</pubDate>
      
      <description>On the official Swift blog, Ted Kremenek outlines the goals, release process, and estimated schedule for Swift 5. The primary goal of the next major release is achieving application binary interface stability, meaning Swift code compiled against different Swift compiler versions will be able to interoperate.</description>
    </item>
    
    <item>
      <title>Async/await in Swift unit tests</title>
      <link>https://www.swiftbysundell.com/posts/asyncawait-in-swift-unit-tests</link>
      <pubDate>Tue, 25 Sep 2018 13:45:36 +0000</pubDate>
      
      <description>John Sundell shows us how to use the async/await programming paradigm to write concise unit tests for asynchronous code.</description>
    </item>
    
    <item>
      <title>Swift 4.2 Released!</title>
      <link>https://swift.org/blog/swift-4-2-released/</link>
      <pubDate>Fri, 21 Sep 2018 10:18:54 +0000</pubDate>
      
      <description>Ted Kremenek writes on the official Swift blog, detailing the language changes and updates available in Swift 4.2.</description>
    </item>
    
    <item>
      <title>Lightweight presenters in Swift</title>
      <link>https://www.swiftbysundell.com/posts/lightweight-presenters-in-swift</link>
      <pubDate>Thu, 20 Sep 2018 11:59:47 +0000</pubDate>
      
      <description>John Sundell demonstrates how we can use the presenter pattern to ensure separation of concerns, a core programming principle.</description>
    </item>
    
    <item>
      <title>Improving Your Build Time in Xcode 10</title>
      <link>https://patrickbalestra.com/blog/2018/08/27/improving-your-build-time-in-xcode-10.html</link>
      <pubDate>Tue, 11 Sep 2018 16:46:00 +0000</pubDate>
      
      <description>Patrick Balestra teaches us how to improve our Swift project build times using new features available in Xcode 10.</description>
    </item>
    
    <item>
      <title>Switching with Associated Values</title>
      <link>https://www.objc.io/blog/2018/09/04/switching-with-associated-values/</link>
      <pubDate>Mon, 10 Sep 2018 11:50:30 +0000</pubDate>
      
      <description>In this post the objc.io, we learn how to use a computed property to reduce the complexity of switching on enums with associated values. Nice tip!</description>
    </item>
    
    <item>
      <title>Evolution- Default Implementation In Protocols</title>
      <link>https://forums.swift.org/t/default-implementation-in-protocols/15794/8</link>
      <pubDate>Sun, 09 Sep 2018 08:40:17 +0000</pubDate>
      
      <description>Alejandro Alonso has been working on a Swift language change to allow default method implementations in protocol definitions. This thread is a discussion among community members of the pros and cons of this proposal.</description>
    </item>
    
    <item>
      <title>SwiftSyntax - Swift bindings for the libSyntax library</title>
      <link>https://github.com/apple/swift-syntax</link>
      <pubDate>Sun, 09 Sep 2018 08:35:18 +0000</pubDate>
      
      <description>SwiftSyntax is a Swift package which enables us to build tools to parse, inspect, generate, and transform Swift source code.</description>
    </item>
    
    <item>
      <title>Why you’re not supposed to call description</title>
      <link>https://oleb.net/2018/dont-call-description/</link>
      <pubDate>Wed, 05 Sep 2018 16:46:09 +0000</pubDate>
      
      <description>If you have ever wondered why accessing a value’s description or debugDescription directly is discouraged, this post from Ole Begemann will tell you all you need to know.</description>
    </item>
    
    <item>
      <title>Early returning functions in Swift</title>
      <link>https://www.swiftbysundell.com/posts/early-returning-functions-in-swift</link>
      <pubDate>Tue, 04 Sep 2018 15:26:15 +0000</pubDate>
      
      <description>John Sundell shows us the benefits of returning early from functions, a technique we can use to improve code readability and comprehension.</description>
    </item>
    
    <item>
      <title>Value-Oriented Programming </title>
      <link>https://matt.diephouse.com/2018/08/value-oriented-programming/</link>
      <pubDate>Sun, 02 Sep 2018 10:43:28 +0000</pubDate>
      
      <description>Matt Diephouse describes value-oriented programming, an approach he uses which builds on protocol-oriented programming, adding the benefits that value types can provide.</description>
    </item>
    
    <item>
      <title>Enum iterations in Swift 4.2</title>
      <link>https://www.swiftbysundell.com/posts/enum-iterations-in-swift-42</link>
      <pubDate>Fri, 31 Aug 2018 08:51:31 +0000</pubDate>
      
      <description>John Sundell looks at CaseIterable, a protocol introduced in Swift 4.2. John describes what CaseIterable means, and demonstrates how we can use it to reduce boilerplate code.</description>
    </item>
    
    <item>
      <title>Easier Scrolling With Layout Guides</title>
      <link>https://useyourloaf.com/blog/easier-scrolling-with-layout-guides/</link>
      <pubDate>Thu, 30 Aug 2018 12:36:09 +0000</pubDate>
      
      <description>Keith Harrison from UseYourLoaf demonstrates how we can use layout guides to configure UIScrollView constraints. Swift code examples are provided.</description>
    </item>
    
    <item>
      <title>Swift Property Observers</title>
      <link>https://nshipster.com/swift-property-observers/</link>
      <pubDate>Wed, 29 Aug 2018 10:45:21 +0000</pubDate>
      
      <description>Mattt Thompson focuses on Swift property observers in this NSHipster post. Mattt first explains the types of properties available in Swift, before describing some use cases for property observers.</description>
    </item>
    
    <item>
      <title>Open Sourcing Validated</title>
      <link>https://www.pointfree.co/blog/posts/14-open-sourcing-validated</link>
      <pubDate>Tue, 28 Aug 2018 12:25:38 +0000</pubDate>
      
      <description>The point free team are open sourcing a new Swift library for handling errors. Validated allows us to accumulate errors into a single type, useful for when we want to know all the reasons why something went wrong.</description>
    </item>
    
    <item>
      <title>Kickstarting new official Docker support for Swift</title>
      <link>https://forums.swift.org/t/kickstarting-new-official-docker-support-for-swift/15487</link>
      <pubDate>Mon, 27 Aug 2018 11:37:20 +0000</pubDate>
      
      <description>Haris Amin has started a thread on the official Swift forum outlining a plan to support an official Swift Docker image. Docket is software which allows people to get started and experiment with container-based software. Great to see.</description>
    </item>
    
    <item>
      <title>Similar Prefixes</title>
      <link>http://khanlou.com/2018/08/similar-prefixes/</link>
      <pubDate>Fri, 24 Aug 2018 10:25:23 +0000</pubDate>
      
      <description>Soroush Khanlou shows us how to identify the code smell known as a data clump. Soroush’s post is based on an idea discussed in Martin Fowler’s seminal 1999 book Refactoring.</description>
    </item>
    
    <item>
      <title>Creating a Bottom Sheet </title>
      <link>https://skagedal.github.io/2018/08/03/bottom-sheet.html</link>
      <pubDate>Wed, 22 Aug 2018 11:09:49 +0000</pubDate>
      
      <description>In this post Simon Kågedal Reimer shows us how we can create a bottom sheet UI component using Swift, similar to the component used in the Apple Maps app.</description>
    </item>
    
    <item>
      <title>Model controllers in Swift</title>
      <link>https://www.swiftbysundell.com/posts/model-controllers-in-swift</link>
      <pubDate>Tue, 21 Aug 2018 14:46:11 +0000</pubDate>
      
      <description>John Sundell demonstrates how we can use dedicated model controllers to improve code encapsulation, giving each defined type a very distinct and clearly defined area of responsibility.</description>
    </item>
    
    <item>
      <title>An iOS alert view with a text field and a “smart” OK button</title>
      <link>https://oleb.net/2018/uialertcontroller-textfield/</link>
      <pubDate>Mon, 20 Aug 2018 08:42:40 +0000</pubDate>
      
      <description>This is a very interesting post from Ole Bergmann, in which he demonstrates an approach to keeping an object alive by intentionally capturing it in a closure. Not an approach I had previously considered.</description>
    </item>
    
    <item>
      <title>Migrating an Objective-C class to Swift using subclassing</title>
      <link>https://oleb.net/2018/objc-swift-subclassing/</link>
      <pubDate>Sun, 19 Aug 2018 11:39:07 +0000</pubDate>
      
      <description>After first looking at using Swift extensions to migrate an Objective-C type to Swift, Ole Begemann now turns his attention to using subclassing to achieve the same goal.</description>
    </item>
    
    <item>
      <title>RFC: making Swift.org a more valuable resource for the Swift community</title>
      <link>https://forums.swift.org/t/rfc-making-swift-org-a-more-valuable-resource-for-the-swift-community/15303</link>
      <pubDate>Sat, 18 Aug 2018 13:07:13 +0000</pubDate>
      
      <description>On the Swift forum Ted Kremenek has written a request for comment regarding making Swift.org a more valuable resource for the Swift community. Ted suggests that Swift.org could be improved, and is asking the community what changes they would like to see. It’s great to see the core team interacting with the community like this.</description>
    </item>
    
    <item>
      <title>Missing The Else</title>
      <link>http://khanlou.com/2018/08/missing-the-else/</link>
      <pubDate>Fri, 17 Aug 2018 14:21:35 +0000</pubDate>
      
      <description>In this post Soroush Knanlou explains why a Swift if statement without a matching else statement indicates a possible bug. A good tip to help us identify potential code smells.</description>
    </item>
    
    <item>
      <title>Trimming long argument lists in Swift</title>
      <link>https://www.swiftbysundell.com/posts/trimming-long-argument-lists-in-swift</link>
      <pubDate>Tue, 14 Aug 2018 16:49:26 +0000</pubDate>
      
      <description>John Sundell provides some tips on how to deal with long and complicated function argument lists.</description>
    </item>
    
    <item>
      <title>Polymorphic methods in enums</title>
      <link>https://forums.swift.org/t/polymorphic-methods-in-enums/15093/3</link>
      <pubDate>Mon, 13 Aug 2018 13:28:58 +0000</pubDate>
      
      <description>This is an interesting discussion on the official Swift forums. It was started by Pablo Bendersky who would like to be able to add extensions on enums constrained by the enum case. I can see the value in this.</description>
    </item>
    
    <item>
      <title>Migrating an Objective-C class to Swift: a piecemeal approach</title>
      <link>https://oleb.net/2018/objc-swift-transition/</link>
      <pubDate>Sat, 11 Aug 2018 09:20:15 +0000</pubDate>
      
      <description>Migrating legacy Objective-C code to Swift can be an arduous process, and is often done as part of general code maintenance over a long period of time. In this post, Ole Begemann presents a piecemeal approach to such a migration, and provides a solution for a particular roadblock he encountered.</description>
    </item>
    
    <item>
      <title>Where usage in Swift</title>
      <link>https://www.avanderlee.com/swift/where-using-swift/</link>
      <pubDate>Fri, 10 Aug 2018 09:26:36 +0000</pubDate>
      
      <description>Antoine van der Lee presents examples of how and when we can use the where clause in Swift to easily filter values.</description>
    </item>
    
    <item>
      <title>Synthesized Conformance to Equatable</title>
      <link>https://swiftunboxed.com/internals/synthesized-equatable-conformance/</link>
      <pubDate>Thu, 09 Aug 2018 11:39:26 +0000</pubDate>
      
      <description>Greg Heo looks behind the curtain to show us how the Swift compiler automatically synthesizes conformance to the Equatable protocol. Greg starts by describing how the compiler decides is conformance is possible, before looking at how it generates the code.</description>
    </item>
    
    <item>
      <title>Conditional Compilation in Swift, Part 1</title>
      <link>https://davedelong.com/blog/2018/07/25/conditional-compilation-in-swift-part-1/</link>
      <pubDate>Wed, 08 Aug 2018 08:40:58 +0000</pubDate>
      
      <description>Dave Delong has developed his own way of conditionalizing compilation of Swift code when using Xcode. Dave shows us how we can use configuration files settings together with certain build settings to conditionally compile code based on the platform being targeted.</description>
    </item>
    
    <item>
      <title>Never</title>
      <link>https://nshipster.com/never/</link>
      <pubDate>Tue, 07 Aug 2018 12:09:38 +0000</pubDate>
      
      <description>Mattt Thompson from NSHipster looks at Never, a simple, uninhabited Swift type. Mattt first explains uninhabited types before demonstrating how we can use Never to eliminate states.</description>
    </item>
    
    <item>
      <title>Structuring Swift code</title>
      <link>https://www.swiftbysundell.com/posts/structuring-swift-code</link>
      <pubDate>Mon, 06 Aug 2018 10:38:46 +0000</pubDate>
      
      <description>In this post John Sundell offers his advice on how we can structure our Swift projects in a solid and consistent manner, making them easier to navigate for existing and new team members.</description>
    </item>
    
    <item>
      <title>Swift tip: Building arrays with compactMap</title>
      <link>https://www.jessesquires.com/blog/swift-tip-building-arrays-with-compactmap/</link>
      <pubDate>Fri, 03 Aug 2018 08:19:14 +0000</pubDate>
      
      <description>Jesse Squires demonstrates how we can use the Swift compactMap function to build arrays of optional items, while maintaining the intended order of the items.</description>
    </item>
    
    <item>
      <title>Benchmarking Swift Locking APIs</title>
      <link>http://www.vadimbulavin.com/benchmarking-locking-apis/</link>
      <pubDate>Thu, 02 Aug 2018 16:35:10 +0000</pubDate>
      
      <description>This is a really interesting post from Vadim Bulavin in which he benchmarks Swift locking APIs. While the results are not entirely surprising, I was surprised by how bad one particular API performed.</description>
    </item>
    
    <item>
      <title>Custom Types for Powerful Matching</title>
      <link>http://www.figure.ink/blog/2018/7/23/custom-types-for-powerful-matching</link>
      <pubDate>Wed, 01 Aug 2018 08:01:57 +0000</pubDate>
      
      <description>Joshua Emmons show us how we can use Swift custom types to implement powerful pattern matching. Joshua overloads the ~= operator using newly-defined types to clean up a hard to read switch statement.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Plan for module stability</title>
      <link>https://forums.swift.org/t/plan-for-module-stability/14551</link>
      <pubDate>Sat, 28 Jul 2018 14:43:18 +0000</pubDate>
      
      <description>In this post on the official Swift forum, Jordan Rose outlines the proposed solution for ABI stability, which is something we should get when Swift 5 arrives. This is something a lot of people in the community are looking forward to, and it’s really interesting to see how it might be achieved.</description>
    </item>
    
    <item>
      <title>Updating Strings For Swift 4.2</title>
      <link>https://useyourloaf.com/blog/updating-strings-for-swift-4.2/</link>
      <pubDate>Fri, 27 Jul 2018 10:04:09 +0000</pubDate>
      
      <description>Keith Harrison from UseYourLoaf looks at the changes to the String API which are introduced with Swift 4.2. If you have been keeping up with Swift evolution, most of what is here should make sense.</description>
    </item>
    
    <item>
      <title>Advance Generics to create reusable UI</title>
      <link>https://medium.com/cocoaacademymag/advance-generics-to-create-reusable-ui-f0b8b8934895</link>
      <pubDate>Tue, 24 Jul 2018 15:14:06 +0000</pubDate>
      
      <description>In this post James Rochabrun shows us how we can leverage Swift generics to create a reusable search UI component.</description>
    </item>
    
    <item>
      <title>Wormholy - iOS network debugging</title>
      <link>https://github.com/pmusolino/Wormholy</link>
      <pubDate>Mon, 23 Jul 2018 12:57:55 +0000</pubDate>
      
      <description>This is a cool library from Paolo Musolino which enables us to debug iOS network calls. It’s simple to set up, requiring no code, and provides an interface allowing us to see the details of executes network calls. Very nice.</description>
    </item>
    
    <item>
      <title>Refactoring Swift code for testability</title>
      <link>https://www.swiftbysundell.com/posts/refactoring-swift-code-for-testability</link>
      <pubDate>Sun, 22 Jul 2018 10:38:08 +0000</pubDate>
      
      <description>John Sundell describes pure functions and dependency injection - two techniques we can apply when refactoring Swift code to make it more testable.</description>
    </item>
    
    <item>
      <title>Retroactive Conformances vs. Swift-in-the-OS</title>
      <link>https://forums.swift.org/t/retroactive-conformances-vs-swift-in-the-os/14393</link>
      <pubDate>Sat, 21 Jul 2018 15:24:33 +0000</pubDate>
      
      <description>This is an interesting Swift evolution discussion started by Jordan Rose which looks at problems encountered when retroactively conforming a type to a protocol. Jordan first describes the problems before proposing a rule which might help to avoid them.</description>
    </item>
    
    <item>
      <title>Atomic Properties in Swift</title>
      <link>http://www.vadimbulavin.com/atomic-properties/</link>
      <pubDate>Tue, 17 Jul 2018 13:28:30 +0000</pubDate>
      
      <description>Vadim Bulavin demonstrates how we can use locking APIs available in Apple frameworks to implement atomic properties in Swift. Vadim first describes the core concepts relating to concurrency and atomic properties, before providing code examples of Swift atomic properties.</description>
    </item>
    
    <item>
      <title>Swift GYB</title>
      <link>https://nshipster.com/swift-gyb/</link>
      <pubDate>Mon, 16 Jul 2018 15:19:51 +0000</pubDate>
      
      <description>The much loved blog NSHipster is back, and in this article, Mattt Thompson looks at a technique for generating boilerplate code in Swift. Mattt looks at GYB, a lightweight templating system that allows us to use python to generate Swift code.  Welcome back 😃!</description>
    </item>
    
    <item>
      <title> Swift&#39;s new calling convention</title>
      <link>https://www.jessesquires.com/blog/swifts-new-calling-convention/</link>
      <pubDate>Fri, 13 Jul 2018 10:35:28 +0000</pubDate>
      
      <description>Swift 4.2 introduced changes to function calling conventions. This means changes to how functions receive their arguments, the order of the arguments, and how they return a result. In this post Jesse Squires describes exactly what has changed, and how these changes can benefit us.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Introduce compactMapValues to Dictionary</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0218-introduce-compact-map-values.md</link>
      <pubDate>Thu, 12 Jul 2018 16:26:27 +0000</pubDate>
      
      <description>This Swift evolution proposal adds a combined filter/map operation to Dictionary. This new operation corresponds to the compactMap operation available for Sequences.</description>
    </item>
    
    <item>
      <title>Subclass-free view controllers in Swift</title>
      <link>https://www.swiftbysundell.com/posts/subclass-free-view-controllers-in-swift</link>
      <pubDate>Wed, 11 Jul 2018 11:38:08 +0000</pubDate>
      
      <description>John Sundell presents a few techniques in this post which can help us write subclass-free UIViewControllers when creating iOS apps. John explains the benefit of each technique as well as providing Swift code examples.</description>
    </item>
    
    <item>
      <title>Parallel Programming with Swift: What could possibly go wrong?</title>
      <link>https://medium.com/flawless-app-stories/parallel-programming-with-swift-what-could-possibly-go-wrong-f5bcc38b1814</link>
      <pubDate>Tue, 10 Jul 2018 12:32:36 +0000</pubDate>
      
      <description>In this post Jan Olbrich describes what can go wrong when programming for concurrency in Swift.</description>
    </item>
    
    <item>
      <title>@autoclosure what, why and when</title>
      <link>https://medium.com/ios-os-x-development/https-medium-com-pavelgnatyuk-autoclosure-what-why-and-when-swift-641dba585ece</link>
      <pubDate>Mon, 09 Jul 2018 09:44:12 +0000</pubDate>
      
      <description>In this short post, Pavel Gnatyuk explains what the Swift autoclosure attribute is, why it’s useful, and when we can use it.</description>
    </item>
    
    <item>
      <title>Introducing the !! Unwrap or Die operator to the Swift Standard Library</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0217-bangbang.md</link>
      <pubDate>Sun, 08 Jul 2018 12:39:06 +0000</pubDate>
      
      <description>Although I don’t think this Swift evolution proposal is completely useless, I agree with Chris Lattner’s opinion that the motivation for its inclusion is not very strong. Still, it’s always great to see the community proposing changes.</description>
    </item>
    
    <item>
      <title>Zhi — Swift Library for Live Reloading Auto Layout Constraints on iOS</title>
      <link>http://hboon.com/zhi/</link>
      <pubDate>Wed, 04 Jul 2018 06:13:47 +0000</pubDate>
      
      <description>This is an interesting iOS library which allows us to tweak auto layout constraints and observe the results without needing to rebuild. Created by Hwee-Boon Yar, it’s written in Swift and also supports tweaking properties such as fonts and colors.</description>
    </item>
    
    <item>
      <title>The Forbidden @inline Attribute in Swift</title>
      <link>https://swiftrocks.com/the-forbidden-inline-attribute-in-swift.html</link>
      <pubDate>Tue, 03 Jul 2018 16:22:14 +0000</pubDate>
      
      <description>Bruno Rocha looks at an obscure Swift attribute - the @inline attribute. This attribute can be used in Swift to specify if we want the compiler to perform function inlining, a common compiler optimization technique. Note that although this attribute is currently available for use, it’s not something which is officially documented, and so usage is generally discouraged.</description>
    </item>
    
    <item>
      <title>Thoughts on @dynamicMemberLookup</title>
      <link>https://oleb.net/blog/2018/06/dynamic-member-lookup/</link>
      <pubDate>Mon, 02 Jul 2018 17:05:08 +0000</pubDate>
      
      <description>Ole Begemann shares his thoughts on a controversial new feature of Swift 4.2, dynamic member lookup. Ole demonstrates some use cases for the feature, before coming to some conclusions regarding it’s usefulness.</description>
    </item>
    
    <item>
      <title>Swift Tip: Refactoring with Deprecations</title>
      <link>https://www.objc.io/blog/2018/06/26/refactoring-with-deprecations/</link>
      <pubDate>Fri, 29 Jun 2018 10:32:32 +0000</pubDate>
      
      <description>This Swift tip from the objc.io team describes how we can use deprecation annotations when refactoring code to ensure we leave no dead code behind.</description>
    </item>
    
    <item>
      <title>On Apple&#39;s Love Affair With Swift</title>
      <link>https://stefan-lesser.com/2018/06/20/on-apples-love-affair-with-swift/</link>
      <pubDate>Tue, 26 Jun 2018 12:19:31 +0000</pubDate>
      
      <description>In response to a recent article examining Swift, in which the author questioned the decisions behind the development of the language, Stefan Lesser selects the most relevant excerpts from an interview with Chris Lattner to answer the questions.</description>
    </item>
    
    <item>
      <title>Swift vs. Kotlin — the differences in memory management</title>
      <link>https://blog.indoorway.com/swift-vs-kotlin-the-differences-in-memory-management-860828edf8</link>
      <pubDate>Mon, 25 Jun 2018 16:50:27 +0000</pubDate>
      
      <description>In this post Krzysztof Turek compares Swift with Kotlin in the context of iOS and Android development, explaining how each language and platform handles memory management.</description>
    </item>
    
    <item>
      <title>The power of Result types in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-result-types-in-swift</link>
      <pubDate>Sun, 24 Jun 2018 10:49:34 +0000</pubDate>
      
      <description>John Sundell looks at the Result type, a commonly used type in many swift projects which will likely some day be part of the Swift standard library. John provides code examples of how this type can be best utilized to reduce ambiguity.</description>
    </item>
    
    <item>
      <title>Swift techniques to filter duplicates out of large JSON arrays</title>
      <link>http://aplus.rs/2018/swift-techniques-remove-duplicates-array/</link>
      <pubDate>Fri, 22 Jun 2018 09:41:06 +0000</pubDate>
      
      <description>This post from Aleksandar Vacić demonstrates how the standard library reduce function can be used to gain vast performance improvements when writing code which filters values.</description>
    </item>
    
    <item>
      <title>Swift Unwrapped -  Interview with Ted Kremenek</title>
      <link>https://spec.fm/podcasts/swift-unwrapped/154699</link>
      <pubDate>Tue, 19 Jun 2018 12:17:17 +0000</pubDate>
      
      <description>This edition of the Swift Unwrapped podcast features an interview with Ted Kremenek, who manages the Languages and Runtimes team at Apple. Ted talks about everything Swift, from the upcoming 4.2 version to Swift 5, which will be released early next year.</description>
    </item>
    
    <item>
      <title>What’s new in iOS 12?</title>
      <link>https://www.hackingwithswift.com/articles/121/whats-new-in-ios-12</link>
      <pubDate>Mon, 18 Jun 2018 13:38:46 +0000</pubDate>
      
      <description>Paul Hudson walks us through the major changes coming with iOS 12, providing Swift code examples that we can try out ourselves.</description>
    </item>
    
    <item>
      <title>Enumerating enum cases in Swift</title>
      <link>https://oleb.net/blog/2018/06/enumerating-enum-cases/</link>
      <pubDate>Sun, 17 Jun 2018 12:15:35 +0000</pubDate>
      
      <description>New in Swift 4.2 is the ability to specify that the compiler should generate a collection of an enum’s cases. In this post, Ole Begemann first shows us how we can use the new CaseIterable protocol with enums, before looking at how we can make other types  CaseIterable.</description>
    </item>
    
    <item>
      <title>Swift Diagnostics: #warning and #error</title>
      <link>https://swiftunboxed.com/internals/diagnostics-warning-error/</link>
      <pubDate>Sat, 16 Jun 2018 11:32:35 +0000</pubDate>
      
      <description>This is a really interesting post from Greg Heo, in which he looks at two new compiler diagnostic directives which are available in Swift 4.2. Rather than simple show us how we can use them, Greg instead digs deeper, showing us how they are implemented in C++.</description>
    </item>
    
    <item>
      <title>Why optional closures in Swift are escaping</title>
      <link>https://www.jessesquires.com/blog/why-optional-swift-closures-are-escaping/</link>
      <pubDate>Fri, 15 Jun 2018 13:21:57 +0000</pubDate>
      
      <description>In this short post, Jesse Squires explains why optional closure function parameters are always implicitly escaping. Once you read why, it makes total sense.</description>
    </item>
    
    <item>
      <title>Random numbers in Swift</title>
      <link>https://oleb.net/blog/2018/06/random-numbers-in-swift/</link>
      <pubDate>Wed, 13 Jun 2018 12:06:56 +0000</pubDate>
      
      <description>Swift 4.2 introduces a native random number API in the standard library. In this post, Ole Begemann walks us through what was added, and describes how we can the new API to write correct random number related code.</description>
    </item>
    
    <item>
      <title>On my misalignment with Apple&#39;s love affair with Swift</title>
      <link>https://rant.monkeydom.de/posts/2018/06/10/on-my-misalignment-with-apple_s-love-affair-with-swift</link>
      <pubDate>Tue, 12 Jun 2018 18:32:08 +0000</pubDate>
      
      <description>This is an interesting post from Dominik Wagner in which he explains why he is not a fan of Swift. Although I don’t share Dominik’s overall opinion of Swift, I do agree with some of the points he makes, particularly regarding the tension that exists between Swift and existing Apple frameworks. Even if you love the language, it’s good to understand the reasons why other’s don’t.</description>
    </item>
    
    <item>
      <title>Code Injection In Swift</title>
      <link>https://medium.com/itch-design-no/code-injection-in-swift-c49be095414c</link>
      <pubDate>Sat, 09 Jun 2018 00:53:37 +0000</pubDate>
      
      <description>Christoffer Winterkvist describes how we can use the Swift Vaccine library together with the  Injectionlll macOS app to achieve code injection, or hot reloading, in our Xcode projects. This is pretty cool, and I can definitely see this being used in my day to day development.</description>
    </item>
    
    <item>
      <title>SE-0155 Status Update</title>
      <link>https://forums.swift.org/t/se-0155-status-update/13154</link>
      <pubDate>Fri, 08 Jun 2018 01:28:10 +0000</pubDate>
      
      <description>The Swift evolution proposal to Normalize Enum Case Representation is partly implemented, and this Swift Forums post lists the status for each goal of the proposal. This is a worthwhile proposal, with some nice improvements to the language, so it’s great to see progress being made.</description>
    </item>
    
    <item>
      <title>WhatsNewKit - Showcase your awesome new app features</title>
      <link>https://github.com/SvenTiigi/WhatsNewKit</link>
      <pubDate>Thu, 07 Jun 2018 00:31:18 +0000</pubDate>
      
      <description>This Swift library from Sven Tiigi enables us to easily showcase new app features. It’s fully customizable and comes with predefined themes and animations.</description>
    </item>
    
    <item>
      <title>Static factory methods in Swift</title>
      <link>https://www.swiftbysundell.com/posts/static-factory-methods-in-swift</link>
      <pubDate>Wed, 06 Jun 2018 00:45:47 +0000</pubDate>
      
      <description>In this entry in his weekly series, John Sundell looks at an approach to writing setup code which avoids subclassing. John demonstrates how using static factory methods can be a great way to separate setup code from actual logic, while also enabling nice syntax features.</description>
    </item>
    
    <item>
      <title>Swift Tip: Type-Safe Initialization using Storyboards</title>
      <link>https://www.objc.io/blog/2018/05/22/type-safe-initialization-using-storyboards/</link>
      <pubDate>Tue, 05 Jun 2018 01:55:04 +0000</pubDate>
      
      <description>In this short post, one in a series of weekly Swift Tips, the Objc.io team demonstrate a simple way to make working with iOS storyboards safer and more robust.</description>
    </item>
    
    <item>
      <title>VisualActivityViewController - A way to represent what you’re sharing</title>
      <link>https://github.com/naturaln0va/VisualActivityViewController</link>
      <pubDate>Mon, 04 Jun 2018 01:29:34 +0000</pubDate>
      
      <description>UIActivityViewControllers provide a simple way to share data with other iOS apps. However, one limitation is that we don’t see a preview of what we are sharing. This 100% Swift library from Ryan Ackermann solves this, building on top of the standard UIActivityViewController to provide a preview of the content being shared.</description>
    </item>
    
    <item>
      <title>Multicast Delegate and Delegates Composition</title>
      <link>http://www.vadimbulavin.com/multicast-delegate/</link>
      <pubDate>Sun, 03 Jun 2018 07:35:00 +0000</pubDate>
      
      <description>The delegate pattern is familiar to most iOS developers, and is used heavily by Apple to achieve object composition without inheritance. In this post, Vadim Bulavin looks at a variation of this pattern, which he calls multicast delegation. Vadim provides Swift code example throughout to aid understanding.</description>
    </item>
    
    <item>
      <title>Benchmark of Swift extensions vs methods: Swift 4.1</title>
      <link>https://medium.com/@minikin/benchmark-of-swift-extensions-vs-methods-swift-4-1-may-2018-2df3229f76fe</link>
      <pubDate>Sat, 02 Jun 2018 00:38:59 +0000</pubDate>
      
      <description>Sasha Prokhorenko ran some benchmarking tests to compare the compilation time of methods defined in the main type versus methods defined in an extension of the type. Check out the results.</description>
    </item>
    
    <item>
      <title>Any[Object]</title>
      <link>https://blog.krzyzanowskim.com/2018/05/29/any-object/</link>
      <pubDate>Fri, 01 Jun 2018 05:10:58 +0000</pubDate>
      
      <description>In this post, Marcin Krzyzanowski first informs us that we probably use Swift’s AnyObject type incorrectly. Marcin then demonstrates how, slightly contrary to the Swift documentation, AnyObject can represent value types as well as class types.</description>
    </item>
    
    <item>
      <title>Date.now() and other calendar thoughts</title>
      <link>https://forums.swift.org/t/date-now-and-other-calendar-thoughts/12853/2</link>
      <pubDate>Thu, 31 May 2018 01:48:51 +0000</pubDate>
      
      <description>Dave Delong started this interesting discussion on the Swift Forums. In Dave’s opinion, the current date/time APIs of Foundation are lacking,  and adding a suggested Date.now() function will only make things worse. Dave then proposes a related addition to Foundation, Clock, which would tell us the date and time of day.</description>
    </item>
    
    <item>
      <title>Launch arguments in Swift</title>
      <link>https://www.swiftbysundell.com/posts/launch-arguments-in-swift</link>
      <pubDate>Wed, 30 May 2018 04:25:02 +0000</pubDate>
      
      <description>John Sundell looks at launch arguments in the context of iOS apps. While traditionally used as input to command line tools, launch arguments can be incorporated into our iOS development process, helping us to debug and test our app.</description>
    </item>
    
    <item>
      <title>10 Quick Swift Tips</title>
      <link>https://www.hackingwithswift.com/articles/106/10-quick-swift-tips</link>
      <pubDate>Tue, 29 May 2018 02:20:50 +0000</pubDate>
      
      <description>This is an enjoyable list of 10 Swift tips from Paul Hudson. As Paul says, Swift is a huge language with lots of interesting syntax and features. Paul looks at 10 such features, providing code examples for all.</description>
    </item>
    
    <item>
      <title>Swift Lazy Property Initialization</title>
      <link>https://useyourloaf.com/blog/swift-lazy-property-initialization/</link>
      <pubDate>Mon, 28 May 2018 07:52:01 +0000</pubDate>
      
      <description>We are all most likely familiar with lazy stored properties in Swift, but this post from Use Your Loaf provides a convenient overview of what they are, and how and when we should use them.</description>
    </item>
    
    <item>
      <title>CardParts - Reactive, card-based UI framework</title>
      <link>https://github.com/intuit/CardParts</link>
      <pubDate>Sun, 27 May 2018 03:50:53 +0000</pubDate>
      
      <description>This Swift library from Intuit provides a card-style UI framework. It is used in the Mint app, and uses MVVM and data binding built on RxSwift.</description>
    </item>
    
    <item>
      <title>How to use regular expressions in Swift</title>
      <link>https://www.hackingwithswift.com/articles/108/how-to-use-regular-expressions-in-swift</link>
      <pubDate>Wed, 23 May 2018 13:48:44 +0000</pubDate>
      
      <description>Paul Hudson gives us a primer in using regular expressions in Swift. Paul first explains the basics, before showing us how we can make NSRegularExpression easier to use.</description>
    </item>
    
    <item>
      <title>Design Patterns in Swift: State Pattern</title>
      <link>https://agostini.tech/2018/05/13/design-patterns-in-swift-state</link>
      <pubDate>Mon, 21 May 2018 13:22:34 +0000</pubDate>
      
      <description>This post from Dejan Agostini describes what the State pattern is, and shows us how to implement it in Swift using a simple example.</description>
    </item>
    
    <item>
      <title>Swift guard vs if let cheat sheet</title>
      <link>https://medium.com/@PaulWall43/swift-guard-vs-if-let-cheat-sheet-swift-4-b4bac6fd4175</link>
      <pubDate>Sun, 20 May 2018 09:15:23 +0000</pubDate>
      
      <description>This cheat sheet from Paul Wallace helps us make the right choice when choosing between using guard and if let in our Swift code.</description>
    </item>
    
    <item>
      <title>Functional Refactoring in Swift</title>
      <link>https://benscheirman.com/2018/02/functional-refactoring-in-swift/</link>
      <pubDate>Sat, 19 May 2018 12:43:18 +0000</pubDate>
      
      <description>Ben Scheirman explains what we need to consider when we begin refactoring our code to be more functional. Ben provides an example which demonstrates how we can iterate on our refactoring to find the best version.</description>
    </item>
    
    <item>
      <title>Type-safe identifiers in Swift</title>
      <link>https://www.swiftbysundell.com/posts/type-safe-identifiers-in-swift</link>
      <pubDate>Fri, 18 May 2018 12:34:23 +0000</pubDate>
      
      <description>John Sundell demonstrates how using type-safe identifiers can be an excellent way to make our code more robust and less error prone.</description>
    </item>
    
    <item>
      <title>Swift Tip: First Class Functions</title>
      <link>https://www.objc.io/blog/2018/05/08/first-class-functions/</link>
      <pubDate>Thu, 17 May 2018 14:50:55 +0000</pubDate>
      
      <description>This short post from the objc.io team looks at first class functions in Swift. First class functions are a really great functional feature of Swift, allowing us to use functions as function parameters, as property types, or as function return types.</description>
    </item>
    
    <item>
      <title>Introducing Related Projects to Swift Forums</title>
      <link>https://swift.org/blog/related-projects/</link>
      <pubDate>Wed, 16 May 2018 13:04:30 +0000</pubDate>
      
      <description>As always, it’s great to see the core Swift team recognize the Swift community and it’s efforts, and in this official Swift blog post Ted kremenek announces an expansion to the Swift Forums. A new top-level category, Related Projects, is being added to the Swift Forum, creating a space for discussions relating to Swift projects developed by the community. Great stuff!</description>
    </item>
    
    <item>
      <title>An elegant pattern to craft cache-efficient functions in Swift</title>
      <link>https://medium.com/@vin.pradeilles/an-elegant-pattern-to-craft-cache-efficient-functions-in-swift-c1a18f73e28c</link>
      <pubDate>Tue, 15 May 2018 11:01:52 +0000</pubDate>
      
      <description>In this post, Vincent Pradeilles describes how we can create Swift functions which cache their results, saving us valuable CPU cycles. Vincent looks at both non-recursive and recursive functions.</description>
    </item>
    
    <item>
      <title>Memory Leaks in Swift</title>
      <link>https://medium.com/flawless-app-stories/memory-leaks-in-swift-bfd5f95f3a74</link>
      <pubDate>Mon, 14 May 2018 11:09:31 +0000</pubDate>
      
      <description>This post from Leandro Pérez looks at memory leaks in Swift. Leandro first explains what memory leaks are, and how they occur, before describing what we can do to avoid them.</description>
    </item>
    
    <item>
      <title>Reimplementation of Implicitly Unwrapped Optionals</title>
      <link>https://swift.org/blog/iuo/</link>
      <pubDate>Tue, 08 May 2018 11:48:45 +0000</pubDate>
      
      <description>This post on the official Swift blog details a new implementation of implicitly unwrapped optional which is available in the latest Swift snapshot. As always, it’s great to see changes like these - changes which eliminate inconsistencies and introduce clarity - being prioritized as the language evolves.</description>
    </item>
    
    <item>
      <title>Watch out for protocol extensions in your Swift API </title>
      <link>https://medium.com/@londeix/watch-out-for-protocol-extensions-in-your-swift-api-unit-tests-trap-e28ad4ef3268</link>
      <pubDate>Mon, 07 May 2018 12:32:32 +0000</pubDate>
      
      <description>Bartosz Polaczyk looks at a potential gotcha relating to testing code defined in Swift protocol extensions. As a companion to this article, I also recommend reading the excellent article from Raizlabs which Bartosz links to, which looks in detail at method dispatching in Swift.</description>
    </item>
    
    <item>
      <title>Behind-the scenes improvements in Swift 4.1</title>
      <link>https://medium.com/@slavapestov/behind-the-scenes-improvements-in-swift-4-1-269dd56e30c2</link>
      <pubDate>Sun, 06 May 2018 14:54:07 +0000</pubDate>
      
      <description>In the article Slava Pestov from the Swift compiler team focuses on some of the less visible improvements introduce in Swift 4. Slava dives into the technical details of these improvements, describing why they were introduced and how they work.</description>
    </item>
    
    <item>
      <title>How to check whether a value is inside a range</title>
      <link>https://www.hackingwithswift.com/articles/90/how-to-check-whether-a-value-is-inside-a-range</link>
      <pubDate>Sat, 05 May 2018 10:59:43 +0000</pubDate>
      
      <description>Paul Hudson shows us just how powerful Swift’s ranges are, demonstrating how we can check whether a value is within a certain range. I was not aware that this also worked with Swift strings. Very useful.</description>
    </item>
    
    <item>
      <title>Unowned Properties in Swift</title>
      <link>https://swiftrocks.com/unowned-properties-in-swift.html</link>
      <pubDate>Fri, 04 May 2018 09:53:03 +0000</pubDate>
      
      <description>This short post from Bruno Rocha explains why we should consider using the unowned keyword rather than the weak keyword when preventing reference cycles.</description>
    </item>
    
    <item>
      <title>What&#39;s new in Swift?</title>
      <link>https://www.whatsnewinswift.com</link>
      <pubDate>Thu, 03 May 2018 15:01:44 +0000</pubDate>
      
      <description>Paul Hudson has created this fantastic resource which allows us to learn what’s new in each version of Swift, with included code examples. A definite bookmark!</description>
    </item>
    
    <item>
      <title>So Swift, So Clean Architecture for iOS</title>
      <link>http://basememara.com/swift-clean-architecture/</link>
      <pubDate>Tue, 01 May 2018 17:30:31 +0000</pubDate>
      
      <description>This is an interesting article from Basem Emara in which he presents his version of a clean app architecture. Basem bases his architecture on an idea by the well known software engineer Robert Martin.</description>
    </item>
    
    <item>
      <title>Blurring the Lines Between MVVM and VIPER</title>
      <link>https://theswiftpost.co/blurring-the-lines-between-mvvm-and-viper/</link>
      <pubDate>Mon, 30 Apr 2018 14:52:47 +0000</pubDate>
      
      <description>Göksel Köksal explains why he thinks MVVM and VIPER are not so different. Göksel starts by explaining the components of each software architecture, before showing us why using one doesn’t necessarily mean abandoning the other. Swift code examples are of course included 😃.</description>
    </item>
    
    <item>
      <title>Playground driven development in Swift</title>
      <link>https://medium.com/flawless-app-stories/playground-driven-development-in-swift-cf167489fe7b</link>
      <pubDate>Mon, 30 Apr 2018 13:45:36 +0000</pubDate>
      
      <description>Khoa Pham shows us how to use a Swift playground to speed up our app development process. This is a detailed post that walks us through each step required to get started with this approach.</description>
    </item>
    
    <item>
      <title>Swift Evolution - RFC: In-Line Tests</title>
      <link>https://forums.swift.org/t/rfc-in-line-tests/12111</link>
      <pubDate>Sat, 28 Apr 2018 06:31:27 +0000</pubDate>
      
      <description>In this RFC, Robert Widmann suggests a very interesting Swift evolution idea. Robert comments that currently, unit testing in Swift feels like a second-class citizen, and comes with significant overhead. To improve the situation, he suggests the idea of in-line tests, enabling us to add unit tests right next to the code being tested. I really like this idea. 👍🏽.</description>
    </item>
    
    <item>
      <title>What’s new in Swift 4.2?</title>
      <link>https://www.hackingwithswift.com/articles/77/whats-new-in-swift-4-2</link>
      <pubDate>Fri, 27 Apr 2018 08:56:03 +0000</pubDate>
      
      <description>Swift is evolving at an impressive pace, and the upcoming version, Swift 4.2, brings with it some great improvements. In this post, Paul Hudson describes some of these improvements, including derived enum cases and dynamic member lookup.</description>
    </item>
    
    <item>
      <title>Swift Tip: Bindings with KVO and Key Paths</title>
      <link>https://www.objc.io/blog/2018/04/24/bindings-with-kvo-and-keypaths/</link>
      <pubDate>Thu, 26 Apr 2018 12:33:18 +0000</pubDate>
      
      <description>Taken from their soon to be published book, the objc.io team show us how to create lightweight UI bindings using Key-Value-Observing and Swift’s key paths. Very nice.</description>
    </item>
    
    <item>
      <title>The Cake Pattern with Swinject</title>
      <link>https://medium.com/@pjwelcome/the-cake-pattern-with-swinject-4357c4d2bd0b</link>
      <pubDate>Tue, 24 Apr 2018 12:35:20 +0000</pubDate>
      
      <description>Peter-John Welcome demonstrates how we can use the Swinject framework together with the cake pattern to implement dependency injection. The major benefit is decoupling of components, which in turn means easier unit testing.</description>
    </item>
    
    <item>
      <title>Forcing Compiler Errors in Swift</title>
      <link>https://ericasadun.com/2018/04/18/forcing-compiler-errors-in-swif</link>
      <pubDate>Mon, 23 Apr 2018 16:46:22 +0000</pubDate>
      
      <description>Erica Sadun looks at the state of metadevelopment support  in Swift, showing us compiler directives introduced in Swift 4.2 which allow us to force compiler errors. Although there is still room for improvement in this area, it’s great to see directives being added which provide compile-time feedback.</description>
    </item>
    
    <item>
      <title>Memory Management and Performance of Value Types</title>
      <link>https://swiftrocks.com/memory-management-and-performance-of-value-types.html</link>
      <pubDate>Sun, 22 Apr 2018 08:31:58 +0000</pubDate>
      
      <description>In this detailed post, Bruno Rocha examines the performance differences between Swift structs and classes. Bruno explains how both are stored in memory, and provides advice on how to avoid negative performance impacts.</description>
    </item>
    
    <item>
      <title>Writing Swift: Adventures in Compiler Mods</title>
      <link>https://ericasadun.com/2018/04/15/writing-swift-adventures-in-compiler-mods/</link>
      <pubDate>Sat, 21 Apr 2018 10:28:33 +0000</pubDate>
      
      <description>This is a great post from Erica Sadun in which she describes learning how to make changes to the Swift compiler. The lessons she learns are key for anyone who wishes to jump in and contribute to Swift.</description>
    </item>
    
    <item>
      <title>Data Classes in Swift</title>
      <link>https://arasthel.com/data-classes-on-swift/</link>
      <pubDate>Tue, 17 Apr 2018 10:42:34 +0000</pubDate>
      
      <description>This is an interesting post from Jorge Martín in which he looks at Kotlin’s data class type, and examines how such a type could be used in Swift to easily copy and mutate state.</description>
    </item>
    
    <item>
      <title>Enums And Optionals</title>
      <link>http://khanlou.com/2018/04/enums-and-optionals/</link>
      <pubDate>Mon, 16 Apr 2018 12:33:41 +0000</pubDate>
      
      <description>In this post, Soroush Khanlou explains how adding an extra case to an enum can replace the usage of optional enum values. As Soroush says, simplicity is king, and I agree that it’s worth taking the time to think about whether an extra optional case makes sense.</description>
    </item>
    
    <item>
      <title>Overture - A library for function composition</title>
      <link>https://github.com/pointfreeco/swift-overture/blob/master/README.md</link>
      <pubDate>Sat, 14 Apr 2018 08:26:17 +0000</pubDate>
      
      <description>This Swift library from Point-Free provides APIs which make it easy for us to produce new functions from a combination of existing functions.</description>
    </item>
    
    <item>
      <title>Understanding protocol associated types and their constraints</title>
      <link>https://www.hackingwithswift.com/articles/74/understanding-protocol-associated-types-and-their-constraints</link>
      <pubDate>Wed, 11 Apr 2018 12:07:20 +0000</pubDate>
      
      <description>Paul Hudson dives into Swift protocols and associated types. Paul explains why protocol associated types are so powerful, before showing us how best control their complexity using constraints.</description>
    </item>
    
    <item>
      <title>Netfox - A lightweight, one line setup, iOS / OSX network debugging library!</title>
      <link>https://github.com/kasketis/netfox</link>
      <pubDate>Tue, 10 Apr 2018 14:05:38 +0000</pubDate>
      
      <description>This is a pretty cool library from Christos Kasketis. It provides a quick look of all executed network requests performed by an iOS or OSX app. Definitely useful. 🦊.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Hashable Enhancements</title>
      <link>https://github.com/apple/swift-evolution/blob/78332d211d00abac286c47609ce1a88a03c6e9bf/proposals/0206-hashable-enhancements.md</link>
      <pubDate>Tue, 10 Apr 2018 14:02:34 +0000</pubDate>
      
      <description>This is an interesting Swift evolution proposal from Karoy Lorentey and Vincent Esche. They propose enhancements to the Hashable protocol, which should make it easier for types to manually conform to the protocol.</description>
    </item>
    
    <item>
      <title>Expanding Swift&#39;s Reach</title>
      <link>http://appventure.me/2018/05/03/expanding-swifts-reach/</link>
      <pubDate>Mon, 09 Apr 2018 16:15:38 +0000</pubDate>
      
      <description>This is an interesting article from Benedikt Terhechte, in which he examines the issues preventing Swift from broader adoption in domains such as system programming. Benedikt first looks at language competitors in the systems programming space, before outlining how Swift can start to make inroads.</description>
    </item>
    
    <item>
      <title> Optionals as Collections</title>
      <link>http://www.figure.ink/blog/2018/3/29/optionals-as-collections</link>
      <pubDate>Sun, 08 Apr 2018 11:16:07 +0000</pubDate>
      
      <description>Joshua Emmons returns to a post he wrote on dealing with optionals and failable initializers. Joshua goes back to basics, looking at how flapMap applies to optionals, and comes to realise that when we think of optionals as collections, things make more sense.</description>
    </item>
    
    <item>
      <title>CocoaPods 1.5.0 — Swift Static Libraries</title>
      <link>http://blog.cocoapods.org/CocoaPods-1.5.0/</link>
      <pubDate>Sun, 08 Apr 2018 09:53:01 +0000</pubDate>
      
      <description>Coming just a few months after the release of Cocoapods 1.4, this latest release of the popular dependency manager adds support for building Swift pods as static libraries. This is something that will please a lot a developers, especially those building command line tools.</description>
    </item>
    
    <item>
      <title>Whats new in Swift 4.1?</title>
      <link>https://github.com/twostraws/whats-new-in-swift-4-1</link>
      <pubDate>Sun, 08 Apr 2018 09:47:04 +0000</pubDate>
      
      <description>To demonstrate what’s new in Swift 4.1, Paul Hudson has created this Xcode playground. The playground includes code samples for all the new Swift 4.1 features we have been looking forward to. Very handy!</description>
    </item>
    
    <item>
      <title>Swift Tip: Capture Lists</title>
      <link>https://www.objc.io/blog/2018/04/03/caputure-lists/</link>
      <pubDate>Sat, 07 Apr 2018 15:35:59 +0000</pubDate>
      
      <description>Weakly capturing self in Swift closures is a common approach to avoiding reference cycles. In this post from the objc.io blog, we learn of an alternative approach to referencing objects on self in closures, while also avoiding reference cycles.</description>
    </item>
    
    <item>
      <title>Conditional conformances in Swift</title>
      <link>https://www.swiftbysundell.com/posts/conditional-conformances-in-swift</link>
      <pubDate>Sat, 07 Apr 2018 10:34:47 +0000</pubDate>
      
      <description>John Sundell looks at Conditional Conformance, a new Swift feature included in the recent Swift 4.1 release. Conditional conformance is a great addition to the language, and John demonstrates how we can use it to write code in a recursive fashion, while reducing duplication.</description>
    </item>
    
    <item>
      <title>Heap Corruption Follow-up: Size, Alignment, and Crashing Collections</title>
      <link>https://topologyeyewear.github.io/engineering-blog/2018/03/19/heap_corruption_followup/</link>
      <pubDate>Thu, 05 Apr 2018 16:09:57 +0000</pubDate>
      
      <description>Greg Heo performs a post-mortem on a bug which was found in the Swift compiler. This is a great look at how Swift works with memory allocation. Greg explains some key concepts such as stride and alignment, before providing some tips on how we can efficiently investigate hard to find bugs.</description>
    </item>
    
    <item>
      <title>Code Challenge: Understanding Swift Closure Syntax</title>
      <link>https://extras.waynewbishop.com/swift/swift-closure-syntax</link>
      <pubDate>Wed, 04 Apr 2018 13:19:53 +0000</pubDate>
      
      <description>Wayne Bishop with a short post explaining how to understand some basic Swift closure syntax. We are all most likely familiar with what is included, but it can’t hurt to be reminded.</description>
    </item>
    
    <item>
      <title>TensorFlow for Swift</title>
      <link>https://www.tensorflow.org/community/swift</link>
      <pubDate>Tue, 03 Apr 2018 06:46:14 +0000</pubDate>
      
      <description>TensorFlow is an open-source machine learning framework. At their recent Developer summit, their announced first-class support for Swift. In this post, they outline their plans for open-sourcing the upcoming library.</description>
    </item>
    
    <item>
      <title>Feature flags in Swift</title>
      <link>https://www.swiftbysundell.com/posts/feature-flags-in-swift</link>
      <pubDate>Mon, 02 Apr 2018 11:22:28 +0000</pubDate>
      
      <description>John Sundell demonstrates how to implement feature flags in Swift. John looks at three types of flags - compilation flags, static flags, and runtime flags.</description>
    </item>
    
    <item>
      <title>Custom Label Effects in Swift 4</title>
      <link>https://medium.com/@nimjea/custom-label-effects-in-swift-4-69ec12ba2178</link>
      <pubDate>Mon, 02 Apr 2018 10:06:04 +0000</pubDate>
      
      <description>Anand Nimje shows us how to add some cool effects to our UILabel text using NSAttributedSting and Swift protocol extensions.</description>
    </item>
    
    <item>
      <title>Dependency Mixins in Swift using Protocol-Oriented-Programming</title>
      <link>https://chickenwing.software/scratches/programming/swift-programming/swift-dependency-mixin?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly</link>
      <pubDate>Sun, 01 Apr 2018 13:11:05 +0000</pubDate>
      
      <description>Eddie Sullivan describes an approach to handling dependencies between types. Eddie looks at the idea of using protocol-based mixins to reduce coupling. Although this is not exactly the approach I would take, it’s always worth learning about how others approach a common problem.</description>
    </item>
    
    <item>
      <title>Optional Forward Application</title>
      <link>http://www.figure.ink/blog/2018/3/27/optional-forward-application</link>
      <pubDate>Sun, 01 Apr 2018 12:57:43 +0000</pubDate>
      
      <description>This is an interesting post from Joshua Emmons in which he looks at handling optional parameters when using failable initialisers. Joshua initially described an approach using a custom free function, before amending the post to recommend using the flatMap function available in the Swift standard library.</description>
    </item>
    
    <item>
      <title>Updating to Swift 4.1</title>
      <link>https://www.avanderlee.com/swift/update-to-swift-4-1</link>
      <pubDate>Sat, 31 Mar 2018 15:32:46 +0000</pubDate>
      
      <description>With the recent release of Swift 4.1, Antoine van der Lee gives us a quick rundown of what we need to do to update our Swift code to the latest version.</description>
    </item>
    
    <item>
      <title>Swift 4.1 Released!</title>
      <link>https://swift.org/blog/swift-4-1-released/</link>
      <pubDate>Sat, 31 Mar 2018 10:11:25 +0000</pubDate>
      
      <description>Ted Kremenek with a post announcing the official release of Swift 4.1 🚀. Although this is only a minor language release, there are some really nice updates included. Onwards and upwards!</description>
    </item>
    
    <item>
      <title>Caveats of Swift default protocol extensions</title>
      <link>http://www.marisibrothers.com/2018/03/caveats-of-swift-default-protocol.html?m=1</link>
      <pubDate>Fri, 30 Mar 2018 15:08:02 +0000</pubDate>
      
      <description>In this post, Luciano Marisi outlines two good reasons why we should be careful when adding default implementations in Swift protocol extensions.</description>
    </item>
    
    <item>
      <title>Parallel programming with Swift: Promises</title>
      <link>https://medium.com/flawless-app-stories/parallel-programming-with-swift-promises-740be1a260ed</link>
      <pubDate>Thu, 29 Mar 2018 16:02:52 +0000</pubDate>
      
      <description>In this article from Jan Olbrich, we learn about Promises, and how we can use the PromiseKit library to implement asynchronous operations.</description>
    </item>
    
    <item>
      <title>Using Channels for Data Flow in Swift 📻</title>
      <link>https://medium.com/developermind/using-channels-for-data-flow-in-swift-14bbdf27b471</link>
      <pubDate>Tue, 27 Mar 2018 06:56:30 +0000</pubDate>
      
      <description>Göksel Köksal looks at how we usually pass information around using the delegation and observer patterns, and then suggests an alternative approach. His approach is a lightweight observer pattern implementation which uses Channels.</description>
    </item>
    
    <item>
      <title>Reflection and Mirror in Swift</title>
      <link>http://www.vadimbulavin.com/2018-03-09-reflection-and-mirror-in-swift/</link>
      <pubDate>Mon, 26 Mar 2018 16:51:23 +0000</pubDate>
      
      <description>In this post, Vadim Bulavin looks the the Reflective capabilities of Swift. Vadim first describes what Reflection is, before showing us what we can achieve using Swift’s Mirror type.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Introducing `Unwrappable`, a biased unwrapping protocol</title>
      <link>https://forums.swift.org/t/introducing-unwrappable-a-biased-unwrapping-protocol/11232</link>
      <pubDate>Mon, 26 Mar 2018 16:40:44 +0000</pubDate>
      
      <description>I really like this Swift evolution proposal from Erica Sadun and Chris Lattner. They propose an Unwrappable protocol, which introduces Optional-like behavior for any biased wrapped  type. The major benefit here is that this would extend Optional syntactic sugar to any associated-type enumeration.</description>
    </item>
    
    <item>
      <title>A Collection of Interesting Swift Features</title>
      <link>http://jordansmith.io/a-collection-of-interesting-swift-features/?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly</link>
      <pubDate>Sun, 25 Mar 2018 08:57:44 +0000</pubDate>
      
      <description>Jordan Smith presents a collection of 15 interesting Swift features. It’s likely that you are aware of many of these, but it’s a nice succinct rundown of some of the lesser talked about features of Swift.</description>
    </item>
    
    <item>
      <title>Size, Stride, Alignment</title>
      <link>https://swiftunboxed.com/internals/size-stride-alignment/</link>
      <pubDate>Sat, 24 Mar 2018 15:11:56 +0000</pubDate>
      
      <description>This is a fantastic look at three important properties of Swift types which relate to memory management- size, stride, and alignment. Greg Heo describes what the properties are, and when we should take them into consideration.</description>
    </item>
    
    <item>
      <title>Do you often forget [weak self]? Here’s a solution</title>
      <link>https://medium.com/anysuggestion/preventing-memory-leaks-with-swift-compile-time-safety-49b845df4dc6</link>
      <pubDate>Sat, 24 Mar 2018 12:52:31 +0000</pubDate>
      
      <description>In this post, Oleg Dreyman shares his approach to dealing with possible retain cycles and memory leaks. As a bonus, Oleg even provides Delegated, a tiny Swift library which encapsulates the approach described in the post.</description>
    </item>
    
    <item>
      <title>Preventing views from being model aware in Swift</title>
      <link>https://www.swiftbysundell.com/posts/preventing-views-from-being-model-aware-in-swift</link>
      <pubDate>Fri, 23 Mar 2018 10:20:34 +0000</pubDate>
      
      <description>In this edition of Swift by Sundell, John presents a few different approaches which can be used to decouple our UI code from our model code.</description>
    </item>
    
    <item>
      <title>The power of sets in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-sets-in-swift?utm_campaign=iOS%2BDev%2BWeekly&amp;utm_medium=email&amp;utm_source=iOS%2BDev%2BWeekly%2BIssue%2B342</link>
      <pubDate>Wed, 21 Mar 2018 07:36:33 +0000</pubDate>
      
      <description>Swift provides three primary collection types - Array, Set, and Dictionary. When choosing one to work with, we often default to using Array. In this post, John Sundell shows us why we should consider using Set, providing examples of it’s advantages over the other types.</description>
    </item>
    
    <item>
      <title>How Swift keypaths let us write more natural code</title>
      <link>https://www.hackingwithswift.com/articles/57/how-swift-keypaths-let-us-write-more-natural-code</link>
      <pubDate>Tue, 20 Mar 2018 10:58:15 +0000</pubDate>
      
      <description>Paul Hudson demonstrates how we can use Swift 4’s key-path expressions to write more natural Swift code, without constraining the types we create.</description>
    </item>
    
    <item>
      <title>Swift Evolution - &#39;Raw&#39; mode string literals</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0200-raw-string-escaping.md</link>
      <pubDate>Mon, 19 Mar 2018 15:07:35 +0000</pubDate>
      
      <description>I like this Swift evolution proposal from John Holdsworth. John proposes adding a feature which allows us to use &#39;raw-mode&#39; when creating string literals. This would enable us to create strings containing backslashes which are not interpreted as escaping introducers. This could be useful for regular expressions.</description>
    </item>
    
    <item>
      <title>Swift tips and tricks</title>
      <link>https://github.com/Luur/SwiftTips</link>
      <pubDate>Mon, 19 Mar 2018 15:04:17 +0000</pubDate>
      
      <description>This Github page is a list of Swift tips and tricks, compiled by Svyat Zubyak. Something to bookmark and scan through while you wait for projects to build.</description>
    </item>
    
    <item>
      <title>Functional Refactoring in Swift</title>
      <link>https://benscheirman.com/2018/02/functional-refactoring-in-swift/</link>
      <pubDate>Fri, 16 Mar 2018 08:20:45 +0000</pubDate>
      
      <description>In this post, Ben Scheirman demonstrates how we can refactor some common imperative code using a functional approach. It’s good to see an example of the zip operation being used, as it’s an operation I have neglected to consider in the past.</description>
    </item>
    
    <item>
      <title>Solving a Mysterious Heap Corruption Crash </title>
      <link>https://topologyeyewear.github.io/engineering-blog/2018/03/07/heap_corruption/</link>
      <pubDate>Thu, 15 Mar 2018 08:00:53 +0000</pubDate>
      
      <description>This is a great post from Agnes Vasarhelyi, in which we learn how an investigation into a mysterious heap corruption crash resulted in a bug being fixed in the Swift standard library.</description>
    </item>
    
    <item>
      <title>Swift Tip: Extensible Libraries with Protocols</title>
      <link>https://www.objc.io/blog/2018/02/27/extensible-libraries-with-protocols</link>
      <pubDate>Tue, 13 Mar 2018 07:26:14 +0000</pubDate>
      
      <description>This post from the Objc.io team demonstrates how we can build extensible, type-safe Swift libraries using protocol composition.</description>
    </item>
    
    <item>
      <title>Navigation in Swift</title>
      <link>https://www.swiftbysundell.com/posts/navigation-in-swift</link>
      <pubDate>Thu, 08 Mar 2018 07:22:27 +0000</pubDate>
      
      <description>John Sundell looks at two approaches to handling navigation between iOS UI components. John first describes the problem caused by using the default navigation approach, before demonstrating how using Coordinator or Navigator types can help.</description>
    </item>
    
    <item>
      <title>Tempura: A holistic approach to iOS development, inspired by Redux and MVVM</title>
      <link>https://github.com/BendingSpoons/tempura-swift</link>
      <pubDate>Wed, 07 Mar 2018 09:39:12 +0000</pubDate>
      
      <description>Tempura is a Swift library developed by the Bending Spoons team. It aims to provide a holistic approach to iOS development. It’s inspired by Redux and MVVM.</description>
    </item>
    
    <item>
      <title>How to use Dynamic Member Lookup in Swift</title>
      <link>https://www.hackingwithswift.com/articles/55/how-to-use-dynamic-member-lookup-in-swift</link>
      <pubDate>Mon, 05 Mar 2018 17:16:14 +0000</pubDate>
      
      <description>Paul Hudson shows us how to use an upcoming feature of Swift - dynamic member lookup. This is something which will allow us to use Swift in a similar way to languages such as PHP and Python.</description>
    </item>
    
    <item>
      <title>Swift Protocols Wishlist</title>
      <link>https://davedelong.com/blog/2018/02/08/swift-protocols-wishlist/</link>
      <pubDate>Sun, 04 Mar 2018 19:41:48 +0000</pubDate>
      
      <description>Dave Delong shares his wishlist of what he would change about how Swift deals with protocols. It’s a solid list, and although I have not hit every pain point he mentions,  I can’t say I disagree with any of his wishes.</description>
    </item>
    
    <item>
      <title>Deep dive into Swift frameworks</title>
      <link>https://theswiftdev.com/2018/01/25/deep-dive-into-swift-frameworks/</link>
      <pubDate>Sat, 03 Mar 2018 13:27:41 +0000</pubDate>
      
      <description>In this fantastic article Tibor Bodecs takes a deep dive into Swift frameworks. Tibor starts at the beginning, first looking at libraries, frameworks, and modules, before moving on to show us some of the tools we can use when working with them. A definite bookmark.</description>
    </item>
    
    <item>
      <title>Unit testing asynchronous Swift code</title>
      <link>https://www.swiftbysundell.com/posts/unit-testing-asynchronous-swift-code</link>
      <pubDate>Sat, 03 Mar 2018 11:42:42 +0000</pubDate>
      
      <description>John Sundell demonstrates a few techniques that can help us test asynchronous code. He first looks as expectations and dispatch queues, and then shows us how we can make our asynchronous code synchronous for the purposes of testing.</description>
    </item>
    
    <item>
      <title>Circular References Between Swift and Objective-C</title>
      <link>https://cjwirth.com/tech/circular-references-swift-objc</link>
      <pubDate>Sat, 03 Mar 2018 11:29:32 +0000</pubDate>
      
      <description>Caesar Wirth describes some of the challenges that arise when working in a mixed Swift and Objective-C codebase, and shows us how he deals with them. Some useful advice here. .</description>
    </item>
    
    <item>
      <title>Composing types in Swift</title>
      <link>https://www.swiftbysundell.com/posts/composing-types-in-swift</link>
      <pubDate>Tue, 20 Feb 2018 14:44:58 +0000</pubDate>
      
      <description>John Sundell looks at functionality composition, showing us a few situations that are better suited to composition, as opposed to inheritance. John demonstrates using composition with strives, enums, and classes in Swift.</description>
    </item>
    
    <item>
      <title>Binary Frameworks in Swift</title>
      <link>https://pspdfkit.com/blog/2018/binary-frameworks-swift/</link>
      <pubDate>Mon, 19 Feb 2018 18:17:57 +0000</pubDate>
      
      <description>Peter Steinberger explores what Application Binary Interface means in the context of Swift, and when it matters.</description>
    </item>
    
    <item>
      <title>Conditional Conformance</title>
      <link>https://swiftunboxed.com/lang/conditional-conformance/?utm_source=Swift_Developments&amp;utm_medium=email&amp;utm_campaign=Swift_Developments_Issue_122</link>
      <pubDate>Thu, 15 Feb 2018 10:51:33 +0000</pubDate>
      
      <description>Greg Heo thinks through conditional conformance in Swift, showing us what it’s good for, and how it works.</description>
    </item>
    
    <item>
      <title>Transforming collections in Swift</title>
      <link>https://www.swiftbysundell.com/posts/transforming-collections-in-swift</link>
      <pubDate>Tue, 13 Feb 2018 08:47:34 +0000</pubDate>
      
      <description>In this entry of his regular Swift blog series, John Sundell looks at how we can transform collections using standard library APIs. No doubt most of us are familiar with map, flatMap etc., but it’s good to refresh our knowledge. Also, I tend to forget about the zip function, so I was happy to be reminded of it’s usefulness.</description>
    </item>
    
    <item>
      <title>Sets &amp; free functions</title>
      <link>http://editorscut.com/Blog/2018/01/18-SetsFreeFunctions.html</link>
      <pubDate>Mon, 12 Feb 2018 16:46:18 +0000</pubDate>
      
      <description>This post from editor’s cut looks at implementing a Set type as a free function. This is probably something different to how we normally think of types, and it’s an interesting idea.</description>
    </item>
    
    <item>
      <title>Conditional Conformance in the Standard Library</title>
      <link>https://swift.org/blog/conditional-conformance/?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly</link>
      <pubDate>Sun, 11 Feb 2018 09:38:07 +0000</pubDate>
      
      <description>This post by Ben Cohen on the official Swift blog describes how Swift 4.1’s conditional protocol conformance feature has been utilised in the Swift standard library.</description>
    </item>
    
    <item>
      <title>Using Lazy to Delay Computation</title>
      <link>https://medium.com/swift-programming/using-lazy-to-delay-computation-8aa4ea236d0a</link>
      <pubDate>Sat, 10 Feb 2018 15:49:10 +0000</pubDate>
      
      <description>Short post reminding us that Swift’s lazy modifier can be used for more than just property declarations.</description>
    </item>
    
    <item>
      <title>Turning Swift compile-time safety into safety for your users</title>
      <link>https://medium.com/anysuggestion/turning-swift-compile-time-safety-into-safety-for-your-users-4e49a8a612f3</link>
      <pubDate>Tue, 06 Feb 2018 07:52:44 +0000</pubDate>
      
      <description>Oleg Dreyman shows us how we can take advantage of Swift’s compiler to ensure we always ask the user for confirmation before performing destructive actions on their data.</description>
    </item>
    
    <item>
      <title>Useful Optional Extensions</title>
      <link>https://appventure.me/2018/01/10/optional-extensions/</link>
      <pubDate>Mon, 05 Feb 2018 19:57:48 +0000</pubDate>
      
      <description>Benedikt Terhechte has done the hard work and sifted through Github repositories and the documentation of other languages to bring us an exhaustive collection of useful Optional extensions. There are some really nice ones included here.</description>
    </item>
    
    <item>
      <title>First class functions in Swift</title>
      <link>https://www.swiftbysundell.com/posts/first-class-functions-in-swift?utm_campaign=Revue%20newsletter&amp;utm_medium=Newsletter&amp;utm_source=Swiftly%20Curated</link>
      <pubDate>Tue, 30 Jan 2018 08:56:35 +0000</pubDate>
      
      <description>In this entry in his weekly Swift blog series, John Sundell looks at first class functions. John starts with some basic use cases for first class functions, such as passing functions as arguments, before demonstrating more advance use cases.</description>
    </item>
    
    <item>
      <title>Swift Tip: Codable Enums</title>
      <link>https://www.objc.io/blog/2018/01/23/codable-enums/?utm_campaign=Revue%20newsletter&amp;utm_medium=Swift%20Weekly%20Newsletter%20Issue%20104&amp;utm_source=Swift%20Weekly</link>
      <pubDate>Mon, 29 Jan 2018 20:23:11 +0000</pubDate>
      
      <description>In this post from Objc.io, we learn how to add Codable conformance to enums which have associated types. A very useful tip.</description>
    </item>
    
    <item>
      <title>Basics of parallel programming with Swift</title>
      <link>https://medium.com/flawless-app-stories/basics-of-parallel-programming-with-swift-93fee8425287</link>
      <pubDate>Sun, 28 Jan 2018 11:42:29 +0000</pubDate>
      
      <description>This is a great post from Jan Olbrich in which he covers the basics of concurrency and parallel programming in Swift. Jan starts by describing the difference between concurrency and parallelism, and then walks us through the various mechanisms available to us in Swift.</description>
    </item>
    
    <item>
      <title>Why Associated Type Requirements Become Generic Constraints</title>
      <link>https://www.bignerdranch.com/blog/why-associated-type-requirements-become-generic-constraints/</link>
      <pubDate>Sat, 27 Jan 2018 12:25:20 +0000</pubDate>
      
      <description>Jeremy Sherman looks at Swift protocols which have associated types. He compares Swift protocols with Objective-C protocols, and for the more curious reader, he considers whether Self is an associated type or not.</description>
    </item>
    
    <item>
      <title>What’s new in Swift 4.1</title>
      <link>https://www.hackingwithswift.com/articles/50/whats-new-in-swift-4-1</link>
      <pubDate>Sat, 27 Jan 2018 12:09:18 +0000</pubDate>
      
      <description>Xcode 9.3 beta is now available, and with it comes the latest point release of Swift - Swift 4.1. In this post, Paul Hudson runs through what he considers to the the top three new features of Swift 4.1.</description>
    </item>
    
    <item>
      <title>A hack for fixed-size arrays in Swift</title>
      <link>https://oleb.net/blog/2017/12/fixed-size-arrays/</link>
      <pubDate>Mon, 22 Jan 2018 15:28:12 +0000</pubDate>
      
      <description>This is an interesting post from Ole Begemann. He discusses something he found in the Swift standard library - a template implementation for a fixed-size array. This is a type not found in the standard library, and Ole shows us why.</description>
    </item>
    
    <item>
      <title>Alerts-Pickers: Advanced usage of UIAlertController with TextField, DatePicker, PickerView, TableView and CollectionView.</title>
      <link>https://github.com/dillidon/Alerts-Pickers?utm_campaign=Indie%2BiOS%2BFocus%2BWeekly&amp;utm_medium=email&amp;utm_source=Indie_iOS_Focus_Weekly_156</link>
      <pubDate>Mon, 22 Jan 2018 15:14:59 +0000</pubDate>
      
      <description>This 100% Swift library from dillidon provides a range of custom UIAlertControllers, which give end-users the choice of responding in a variety of ways. Very useful.</description>
    </item>
    
    <item>
      <title>Understanding Swift 4 generics and applying them in your code</title>
      <link>http://iosbrain.com/blog/2018/01/02/understanding-swift-4-generics-and-applying-them-to-your-code</link>
      <pubDate>Tue, 16 Jan 2018 11:37:36 +0000</pubDate>
      
      <description>In this post, Andrew Jaffee uses some simple examples to help us understand Swift 4 Generics, and shows us how to apply what we learn to our own code. Even if you are familiar with Swift Generics, this is a good, quick refresher.</description>
    </item>
    
    <item>
      <title>Online Swift Playground</title>
      <link>http://swiftplayground.run/</link>
      <pubDate>Tue, 16 Jan 2018 10:40:02 +0000</pubDate>
      
      <description>This is a cool project from Marcin Krzyzanowski. He has created an online Swift playground, built with Swift. It’s embeddable, so can be added to your own Swift-related sites. Awesome idea.</description>
    </item>
    
    <item>
      <title>Swift Non-Nil Values In An Array Of Optionals</title>
      <link>https://useyourloaf.com/blog/swift-non-nil-values-in-an-array-of-optionals/?utm_campaign=Revue%20newsletter&amp;utm_medium=Newsletter&amp;utm_source=Swiftly%20Curated</link>
      <pubDate>Sun, 14 Jan 2018 11:05:06 +0000</pubDate>
      
      <description>Good tip from Use Your Loaf on how to work with an array of Optional values. Rather than use flatMap to iterate over the non-nil values, we can use pattern matching.</description>
    </item>
    
    <item>
      <title>@objc and dynamic</title>
      <link>https://swiftunboxed.com/interop/objc-dynamic/</link>
      <pubDate>Thu, 11 Jan 2018 09:07:12 +0000</pubDate>
      
      <description>This post from Greg Heo examines Objective-C runtime visibility and dynamic dispatch. Greg does a great job of explaining how these work, and provides lots of Swift Intermediate Language examples to help us understand.</description>
    </item>
    
    <item>
      <title>Weak Arrays</title>
      <link>https://www.objc.io/blog/2017/12/28/weak-arrays/</link>
      <pubDate>Mon, 08 Jan 2018 17:36:42 +0000</pubDate>
      
      <description>This short post from Objc.io shows us how to create a Collection type which references it’s elements weakly. As standard Swift collections reference their elements strongly, this might come in useful.</description>
    </item>
    
    <item>
      <title>SwiftKotlin: A tool to convert Swift code to Kotlin.</title>
      <link>https://github.com/angelolloqui/SwiftKotlin</link>
      <pubDate>Mon, 08 Jan 2018 17:32:12 +0000</pubDate>
      
      <description>This is a cool tool to convert Swift to Kotlin. It can be used as a framework, command line tool, and a Mac app. Whenever I see Swift code translated to Kotlin, I am reminded of how similar the two languages are.</description>
    </item>
    
    <item>
      <title>Swift Demangler</title>
      <link>https://www.swiftdemangler.com</link>
      <pubDate>Sun, 07 Jan 2018 19:05:47 +0000</pubDate>
      
      <description>This is a cool tool which translates Swift symbols,  (e.g. _TtP3foo3bar_) into a human-readable form (e.g. foo.bar). This might come in useful when analyzing crash reports.</description>
    </item>
    
    <item>
      <title>iOS/macOS Developer Productivity Kit</title>
      <link>https://theswiftpost.co/ios-macos-developer-productivity-kit/</link>
      <pubDate>Thu, 04 Jan 2018 14:53:43 +0000</pubDate>
      
      <description>This is not really a Swift language post, but it’s useful if you work in Xcode. Candost Dagdeviren from Swift Post shows us how we can be more productive by utilising Xcode shortcuts together with some third party tools.</description>
    </item>
    
    <item>
      <title>Debugging Swift code with LLDB</title>
      <link>https://medium.com/flawless-app-stories/debugging-swift-code-with-lldb-b30c5cf2fd49</link>
      <pubDate>Wed, 03 Jan 2018 09:27:10 +0000</pubDate>
      
      <description>Ahmed Sulaiman shows us how to debug Swift code using LLDB. LLDB is an enormous tool, providing lots of debugging commands. Integrating even a few of these commands in to our daily debugging sessions is a great idea.</description>
    </item>
    
    <item>
      <title>Type Erasure in Swift</title>
      <link>https://mikeash.com/pyblog/friday-qa-2017-12-08-type-erasure-in-swift.html?utm_source=Swift_Developments&amp;utm_medium=email&amp;utm_campaign=Swift_Developments_Issue_118</link>
      <pubDate>Tue, 02 Jan 2018 15:11:26 +0000</pubDate>
      
      <description>Type Erasure is a phase you might have heard of, but you may not be sure exactly what it means. In this post from his Q&amp;A series, Mike Ash describes what Type Erasure is, and why we might want to use it.</description>
    </item>
    
    <item>
      <title>Decomposing Emoji</title>
      <link>https://www.objc.io/blog/2017/12/19/decomposing-emoji/?utm_campaign=iOS%2BDev%2BWeekly&amp;utm_medium=email&amp;utm_source=iOS_Dev_Weekly_Issue_332</link>
      <pubDate>Wed, 27 Dec 2017 11:07:27 +0000</pubDate>
      
      <description>Objc.io provide some insight on how the length of Strings are evaluated when dealing with emoji characters. Something to be aware of if you deal with user text input.</description>
    </item>
    
    <item>
      <title>Different flavors of dependency injection in Swift</title>
      <link>https://www.swiftbysundell.com/posts/different-flavors-of-dependency-injection-in-swift</link>
      <pubDate>Tue, 19 Dec 2017 08:55:03 +0000</pubDate>
      
      <description>John Sundell shows us three flavors of dependency injection. No matter your favorite flavor of DI, it’s always good to be reminded of the alternatives. Each is suited to a slightly different scenario.</description>
    </item>
    
    <item>
      <title>A Quick Tip For String Performance</title>
      <link>https://www.objc.io/blog/2017/12/12/quick-tip-for-string-performance/</link>
      <pubDate>Mon, 18 Dec 2017 15:02:27 +0000</pubDate>
      
      <description>When we create Swift strings, they are backed by either the Swift String type, or the Objective-C NSString type. This quick tip shows us how to improve performance by forcing our declared strings to be back by the Swift String type.</description>
    </item>
    
    <item>
      <title>Swift Evolution moves to Discourse</title>
      <link>https://forums.swift.org/top/all</link>
      <pubDate>Sun, 17 Dec 2017 10:47:01 +0000</pubDate>
      
      <description>Swift Evolution has up until now used mailing lists for all community discussions. While mailing lists served the purpose adequately, they were not ideal. Now, the move to Discourse is under way. Discourse provides a more modern, forum-based solution, and it’s where all Swift community discussions will now happen.</description>
    </item>
    
    <item>
      <title>Swift Codable With Custom Dates</title>
      <link>https://useyourloaf.com/blog/swift-codable-with-custom-dates/?utm_campaign=iOS%2BDev%2BWeekly&amp;utm_medium=email&amp;utm_source=iOS_Dev_Weekly_Issue_330</link>
      <pubDate>Thu, 14 Dec 2017 11:37:27 +0000</pubDate>
      
      <description>Another useful post from Keith Harrison of Use Your Loaf. This time Keith shows us how to use Swift 4’s Codable protocols to decode JSON which contains date values in more than one format.</description>
    </item>
    
    <item>
      <title>Key difference between Dictionary and NSDictionary</title>
      <link>http://lapcatsoftware.com/articles/key-difference.html</link>
      <pubDate>Tue, 12 Dec 2017 09:34:39 +0000</pubDate>
      
      <description>Jeff Johnson points out an interesting difference between Swift Dictionary and NSDictionary. The difference relates to how Swift implements String equality as Unicode canonical equivalence, and as Jeff points out, this could cause problems if you save and load dictionaries from user defaults.</description>
    </item>
    
    <item>
      <title>URLSession Waiting For Connectivity</title>
      <link>https://useyourloaf.com/blog/urlsession-waiting-for-connectivity/?utm_campaign=Revue%20newsletter&amp;utm_medium=Swift%20Weekly%20Newsletter%20Issue%2098&amp;utm_source=Swift%20Weekly</link>
      <pubDate>Mon, 11 Dec 2017 14:22:11 +0000</pubDate>
      
      <description>Keith Harrison from Use Your Loaf shows us how to use a new URLSession API available in iOS 11. Keith provides the relevant Swift code examples to help us implement this useful new feature.</description>
    </item>
    
    <item>
      <title>When Not to Use an Enum</title>
      <link>http://matt.diephouse.com/2017/12/when-not-to-use-an-enum/</link>
      <pubDate>Sun, 10 Dec 2017 15:03:32 +0000</pubDate>
      
      <description>Matt Diephouse shows us when not to use an enum. Matt looks at a recent post from John Sundell, in which John used enums to build an app analytics API. Matt argues that structs would be better suited to build such an API, and explains why.</description>
    </item>
    
    <item>
      <title>Total programming in Swift</title>
      <link>https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74</link>
      <pubDate>Thu, 07 Dec 2017 10:38:56 +0000</pubDate>
      
      <description>André Videla describes what a total program is, and examines Swift in this context. André shows us how Swift uses its type system to encourage totality - code that won’t crash or get stuck in an infinite loop.</description>
    </item>
    
    <item>
      <title>Why Dictionary sometimes encodes itself as an array </title>
      <link>https://oleb.net/blog/2017/12/dictionary-codable-array/</link>
      <pubDate>Wed, 06 Dec 2017 14:22:57 +0000</pubDate>
      
      <description>Oleb Begemann with a very interesting post on why Swift dictionaries sometimes encode themselves as arrays when using Swift 4’s Codable protocols. I wasn’t aware of this limitation, and as he points out, there is no clean and simple fix for it.</description>
    </item>
    
    <item>
      <title>Building an enum-based analytics system in Swift</title>
      <link>https://www.swiftbysundell.com/posts/building-an-enum-based-analytics-system-in-swift?utm_campaign=Revue%20newsletter&amp;utm_medium=Swift%20Weekly%20Newsletter%20Issue%2098&amp;utm_source=Swift%20Weekly</link>
      <pubDate>Tue, 05 Dec 2017 09:41:47 +0000</pubDate>
      
      <description>John Sundell demonstrates an approach to adding app analytics based on enums. It’s a nice idea, allowing us to add analytic events to our code without being tied to any particular analytics provider.</description>
    </item>
    
    <item>
      <title>Swift Substrings</title>
      <link>https://swiftunboxed.com/stdlib/substrings/</link>
      <pubDate>Fri, 01 Dec 2017 08:58:36 +0000</pubDate>
      
      <description>Greg Heo looks at Swift Substrings, showing us how they are implemented, and why Swift’s StringProtocol is a great example of protocol-oriented programming.</description>
    </item>
    
    <item>
      <title>Highway: Automate development tasks using Swift.</title>
      <link>https://github.com/ChristianKienle/highway?utm_campaign=Indie%2BiOS%2BFocus%2BWeekly&amp;utm_medium=email&amp;utm_source=Indie_iOS_Focus_Weekly_148</link>
      <pubDate>Thu, 30 Nov 2017 08:51:35 +0000</pubDate>
      
      <description>Christian Kienle has created a tool which allows us to automate development tasks using Swift. Highway is similar to Fastlane, a popular set of automation tools for iOS. Highway allows us to automate development tasks such as building, testing, and releasing.</description>
    </item>
    
    <item>
      <title>Using unit tests to identify &amp; avoid memory leaks in Swift</title>
      <link>https://www.swiftbysundell.com/posts/using-unit-tests-to-identify-avoid-memory-leaks-in-swift?utm_campaign=This%2BWeek%2Bin%2BSwift&amp;utm_medium=email&amp;utm_source=This_Week_in_Swift_150</link>
      <pubDate>Tue, 28 Nov 2017 08:40:59 +0000</pubDate>
      
      <description>John Sundell demonstrates how we can use simple unit tests to identify and avoid memory leaks. John looks at three scenarios - using delegates, observers, and closures - and describes the problem that can arise with each.</description>
    </item>
    
    <item>
      <title>Why Swift Enums with Associated Values Cannot Have a Raw Value</title>
      <link>https://medium.com/@PhiJay/why-swift-enums-with-associated-values-cannot-have-a-raw-value-21e41d5ec11</link>
      <pubDate>Mon, 27 Nov 2017 09:10:29 +0000</pubDate>
      
      <description>In this post Mischa Hildebrand explains why Swift enums with associated values cannot also have a raw value. Even though we may be familiar with this limitation, it’s interesting to think about the reasoning behind it.</description>
    </item>
    
    <item>
      <title>Lazy Collections in Swift</title>
      <link>https://theswiftpost.co/lightning-read-1-lazy-collections-swift/</link>
      <pubDate>Sun, 26 Nov 2017 17:23:35 +0000</pubDate>
      
      <description>Goksel Koksal with a lightning read in which he demonstrates how we can take advantage of Swift lazy collections. Goksel shows us how to reduce the number of computations in a chain of calls using the lazy variation of Array.</description>
    </item>
    
    <item>
      <title>Using child view controllers as plugins in Swift</title>
      <link>https://www.swiftbysundell.com/posts/using-child-view-controllers-as-plugins-in-swift</link>
      <pubDate>Fri, 24 Nov 2017 08:36:16 +0000</pubDate>
      
      <description>John Sundell shows us how to make our code more extensible and more maintainable. John uses child view controllers to structure his code as a collection of modular plugins, enabling him to mix and match functionality, while avoiding the problems associated with inheritance.</description>
    </item>
    
    <item>
      <title>Friday Q&amp;A: Locks, Thread Safety, and Swift: 2017 Edition</title>
      <link>https://www.mikeash.com/pyblog/friday-qa-2017-10-27-locks-thread-safety-and-swift-2017-edition.html?utm_source=Swift_Developments&amp;utm_medium=email&amp;utm_campaign=Swift_Developments_Issue_111</link>
      <pubDate>Wed, 22 Nov 2017 08:39:27 +0000</pubDate>
      
      <description>Mike Ash with a great rundown of the various APIs available relating to locks and thread safety. Mike describes each of the available APIs, and gives his recommendation on which API we should choose first.</description>
    </item>
    
    <item>
      <title>Windless - makes it easy to implement invisible layout loading view.</title>
      <link>https://github.com/Interactive-Studio/Windless</link>
      <pubDate>Tue, 21 Nov 2017 09:30:45 +0000</pubDate>
      
      <description>Windless is a cool Swift library which makes it easy to implement loading views. It allows you to turn any UIView in to a loading view, which can be displayed as you perform your asynchronous code.</description>
    </item>
    
    <item>
      <title>Introduction to Server Side Swift with Vapor</title>
      <link>https://www.vaporforums.io/thread/30?utm_source=newsletter_mailer&amp;utm_medium=email&amp;utm_campaign=weekly</link>
      <pubDate>Mon, 20 Nov 2017 08:56:13 +0000</pubDate>
      
      <description>This is a simple introduction to Vapor, the server side Swift framework. If you have not yet had the chance to learn about Vapor, this is where you should start. It shows you how to build a simple Swift API in about 5 minutes.</description>
    </item>
    
    <item>
      <title>Optimizing Swift Build Times</title>
      <link>https://github.com/fastred/Optimizing-Swift-Build-Times/blob/master/README.md</link>
      <pubDate>Sun, 19 Nov 2017 13:18:43 +0000</pubDate>
      
      <description>Arek Holko with a useful Github repository which aims to gather all possible knowledge which can be used to optimize Swift compile times. This is a nice initiative, and definitely worth bookmarking.</description>
    </item>
    
    <item>
      <title>JSONEncoder: Key strategies</title>
      <link>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20171106/040959.html</link>
      <pubDate>Sun, 19 Nov 2017 12:38:30 +0000</pubDate>
      
      <description>This is an interesting Swift Evolution thread in which Tony Parker from Apple shares a evolution proposal regarding key strategies for Swift 4’s Codable protocols. The proposal seeks to change Foundation code, making it possible to automatically convert between JSON snake_case_keys and camelCaseKeys.</description>
    </item>
    
    <item>
      <title>Swift 4 Access Levels</title>
      <link>https://useyourloaf.com/blog/swift-4-access-levels/</link>
      <pubDate>Fri, 17 Nov 2017 08:46:03 +0000</pubDate>
      
      <description>Access levels changed in Swift 4. This post from Use Your Loaf gives us a recap of the five Swift access levels, shows us what changed in Swift 4, and demonstrates how we can update our code to accommodate for the changes.</description>
    </item>
    
    <item>
      <title>Receiver: Swift µframework implementing the Observer pattern 📡</title>
      <link>https://github.com/RuiAAPeres/Receiver</link>
      <pubDate>Thu, 16 Nov 2017 17:41:08 +0000</pubDate>
      
      <description>This is a nice micro framework from Rui Peres which allows us to use the Reactive Observer pattern without the need to pull in larger, more complete Reactive libraries.</description>
    </item>
    
    <item>
      <title>Swift for Data Science / ML / Big Data analytics</title>
      <link>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20171023/040733.html</link>
      <pubDate>Thu, 16 Nov 2017 09:38:45 +0000</pubDate>
      
      <description>Interesting Swift Evolution discussion in which Chris Lattner shares his thoughts on the possibility of Swift-Python interoperability. This would mean that the majority of the Python ecosystem would be directly usable in Swift, something the data science and big data communities might find particularly useful.</description>
    </item>
    
    <item>
      <title>Auto Layout with Key Paths</title>
      <link>https://talk.objc.io/episodes/S01E75-auto-layout-with-key-paths</link>
      <pubDate>Mon, 13 Nov 2017 10:26:12 +0000</pubDate>
      
      <description>In episode 75 of their Swift Talk series, the guys from objc.io show us how we can clean up our layout code by introducing helper functions based on Swift key paths. This is a really cool usage of key paths, and I can definitely see myself adopting this approach.</description>
    </item>
    
    <item>
      <title>Injecting forEach into chained method calls</title>
      <link>https://oleb.net/blog/2017/10/chained-foreach/</link>
      <pubDate>Fri, 10 Nov 2017 09:15:42 +0000</pubDate>
      
      <description>Ole Begemann creates his own version of Swift’s forEach method. The purpose is to create a version of the method which can be used in a sequence of chained method calls, and Ole extends the implementation to make his version compatible with lazy sequences.</description>
    </item>
    
    <item>
      <title>Swift Imports</title>
      <link>https://robots.thoughtbot.com/swift-imports</link>
      <pubDate>Wed, 08 Nov 2017 09:03:55 +0000</pubDate>
      
      <description>We are all familiar with import declarations and it’s common to import one or more modules when writing Swift code. In this post, Patrick Montalto provides some background on how import actually works, and shows us how we can gain some advantages by using some lesser known variations of import.</description>
    </item>
    
    <item>
      <title>Using tokens to handle async Swift code</title>
      <link>https://www.swiftbysundell.com/posts/using-tokens-to-handle-async-swift-code</link>
      <pubDate>Tue, 07 Nov 2017 08:45:14 +0000</pubDate>
      
      <description>John Sundell shows us how we can use request tokens to improve our asynchronous APIs. As John points out, most codebases will include some sort of asynchronous method calls, and having the ability to cancel such calls can be useful. Using request tokens is one way we can provide such an ability.</description>
    </item>
    
    <item>
      <title>Introducing Kitura 2.0</title>
      <link>https://developer.ibm.com/swift/2017/10/30/kitura-20/</link>
      <pubDate>Fri, 03 Nov 2017 04:02:47 +0000</pubDate>
      
      <description>Chris Bailey from IBM with a post introducing the latest version of IBM’s popular Swift web framework. Version 2.0 has been built using the latest Swift capabilities, and includes some awesome features such as Codable Routing.</description>
    </item>
    
    <item>
      <title>Moving Safety into Types</title>
      <link>http://www.figure.ink/blog/2017/10/15/moving-safety-into-types</link>
      <pubDate>Wed, 01 Nov 2017 03:51:23 +0000</pubDate>
      
      <description>Joshua Emmons demonstrates how we can use the Swift type checker to better handle thrown errors. This is a really nice approach to isolation error handling to the point of creation, rather than the point of use.</description>
    </item>
    
    <item>
      <title>View Bindings in Pure Swift</title>
      <link>https://talk.objc.io/episodes/S01E73-view-bindings-in-pure-swift</link>
      <pubDate>Tue, 31 Oct 2017 09:31:59 +0000</pubDate>
      
      <description>Another good episode of Swift Talk from the guys at objc.io. In this episode, Chris and Florian experiment with reactive view bindings. They take the simple scenario of an activity indicator which needs to react to changes in state, and refactor it to bind the indicator to an observable state.</description>
    </item>
    
    <item>
      <title>Capturing objects in Swift closures</title>
      <link>https://www.swiftbysundell.com/posts/capturing-objects-in-swift-closures</link>
      <pubDate>Sun, 29 Oct 2017 01:14:17 +0000</pubDate>
      
      <description>Swift closures can capture and store references to any variables and constants from the context in which they are defined. This is a great feature, making closures easy to work with and extremely versatile. However, capturing references can be problematic. Closures which are stored, and which capture references, can result in retain cycles. A common solution to this is to weakly capture references. While this is a valid approach, alternative solutions are available which provide their own benefits. In this post, John Sundell looks are some of these solutions.</description>
    </item>
    
    <item>
      <title>SingleValueCodable - A simple exercise in leverage</title>
      <link>http://www.russbishop.net/singlevaluecodable</link>
      <pubDate>Fri, 27 Oct 2017 04:17:55 +0000</pubDate>
      
      <description>A single-value wrapper type is a type which encapsulates only a single property. Dealing with such types when using Swift’s Codable protocols can lead to less than perfect representations of the type’s data. In this post, Russ Bishop works through a small exercise in extending Codable to better such types.</description>
    </item>
    
    <item>
      <title>Why many developers prefer Swift to Objective-C</title>
      <link>https://www.hackingwithswift.com/articles/29/why-many-developers-prefer-swift-to-objective-c</link>
      <pubDate>Tue, 24 Oct 2017 09:04:22 +0000</pubDate>
      
      <description>In a previous article, Paul Hudson interviewed a number of Objective-C developers, asking them why they preferred using Objective-C over Swift. In this follow up, he hopes to balance the scale as he interviews another group of developers, this time hearing from those who prefer using Swift over Objective-C. I found myself nodding along as I read their answers.</description>
    </item>
    
    <item>
      <title>What Stats and Surveys are saying about Swift in 2017</title>
      <link>https://medium.com/@guydaher/what-stats-and-surveys-are-saying-about-swift-in-2017-7e21dcce1f8b</link>
      <pubDate>Mon, 23 Oct 2017 01:53:45 +0000</pubDate>
      
      <description>Guy Daher takes a look at what statistics and surveys are saying about the state of Swift in 2017. Guy presents the results of surveys from a variety of sources, including Github and StackOverflow, and gives his take on what they mean for the future of Swift.</description>
    </item>
    
    <item>
      <title>Swift 4.1 Release Process</title>
      <link>https://swift.org/blog/swift-4-1-release-process/</link>
      <pubDate>Sun, 22 Oct 2017 03:34:02 +0000</pubDate>
      
      <description>It’s so great to see the plans for Swift 4.1 being published already, considering the recent release of Swift 4. Here, on the official Swift blog, Ted Kremenek describes the goals, release process, and estimated schedule for Swift 4.1.</description>
    </item>
    
    <item>
      <title>Avoiding singletons in Swift</title>
      <link>https://www.swiftbysundell.com/posts/avoiding-singletons-in-swift</link>
      <pubDate>Thu, 19 Oct 2017 07:29:39 +0000</pubDate>
      
      <description>John Sundell makes his case for why we should avoid using singletons. John first describes why singletons are bad, and then demonstrates some techniques to help us avoid them. Although I do agree that singletons sometimes present their own set of problems, I am not on the side of avoiding them completely. When used with care, they sometimes can be a valid solution.</description>
    </item>
    
    <item>
      <title>The Flat Cache</title>
      <link>http://khanlou.com/2017/10/the-flat-cache/</link>
      <pubDate>Wed, 18 Oct 2017 07:44:32 +0000</pubDate>
      
      <description>Soroush Khanlou with an interesting post looking at the idea of a flat cache. As he says, the model layer of a client can be tough to implement correctly, but by using the described flat cache approach, we might be able to avoid some of the usual pain points.</description>
    </item>
    
    <item>
      <title>Swift: Money with Phantom Types 👻</title>
      <link>https://www.natashatherobot.com/swift-money-phantom-types/</link>
      <pubDate>Tue, 17 Oct 2017 07:43:26 +0000</pubDate>
      
      <description>A parameterized type that does not actually appear at all in the definition of a generic type is known as a phantom type. Such a type is used simply to enforce compile time type checking, allowing us to encapsulate definitions, and guard against incorrect usage. In this post, Natasha Murashev looks at such phantom types, and demonstrates how they can be used.</description>
    </item>
    
    <item>
      <title>Using generic type constraints in Swift 4</title>
      <link>https://www.swiftbysundell.com/posts/using-generic-type-constraints-in-swift-4</link>
      <pubDate>Mon, 16 Oct 2017 07:50:16 +0000</pubDate>
      
      <description>John Sundell shows us how to get the most out of generic type constraints. He presents code examples, together with explanations, of some common techniques and patterns that are made possible due to type constraints.</description>
    </item>
    
    <item>
      <title>Synthesizing Equatable and Hashable conformance</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md</link>
      <pubDate>Sun, 15 Oct 2017 14:32:01 +0000</pubDate>
      
      <description>Following in the footsteps of the well received Swift 4 Codable protocols, this Swift evolution proposal outlines the motivation for, and proposed implementation of, synthesized conformance to the Equatable and Hashable protocols. This is a really good proposal which would reduce the need for common boilerplate code. The idea is that if a types members all conform to Equatable or Hashable, then the entire type can simply opt-in to automatic synthesis by declaring itself as conforming.</description>
    </item>
    
    <item>
      <title>ArraySlice In Swift</title>
      <link>https://marcosantadev.com/arrayslice-in-swift/</link>
      <pubDate>Fri, 13 Oct 2017 10:06:05 +0000</pubDate>
      
      <description>Marco Santarossa with a post about the Swift ArraySlice type. He shows us how to create them, describes the relationship between ArraySlice and Array, and demonstrates how ArraySlice indices work.</description>
    </item>
    
    <item>
      <title>Updaing Strings For Swift 4</title>
      <link>https://useyourloaf.com/blog/updating-strings-for-swift-4/</link>
      <pubDate>Thu, 12 Oct 2017 07:50:29 +0000</pubDate>
      
      <description>Useful post from Use Your Loaf which outlines the major changes to the Swift String API introduced with Swift 4. Even if you are already familiar with most of the changes introduced, a refresh is always a good thing.</description>
    </item>
    
    <item>
      <title>Dictionary and Set Improvements in Swift 4.0</title>
      <link>https://swift.org/blog/dictionary-and-set-improvements/</link>
      <pubDate>Tue, 10 Oct 2017 07:56:31 +0000</pubDate>
      
      <description>Swift 4 added a lot of really awesome Dictionary and Set APIs. Operations like grouping, filtering, and transforming values are easier than ever, and can be performed in a single step. In this post on the official Swift blog, Nate Cook explores these new APIs. It’s also worth noting that most of the changes mentioned are available in Swift 3.2, so even if you have not yet moved to Swift 4, there is something here for you.</description>
    </item>
    
    <item>
      <title>Xcode 9.1 Improves Display of Fatal Errors</title>
      <link>https://swift.org/blog/xcode-9-1-improves-display-of-fatal-errors/</link>
      <pubDate>Mon, 09 Oct 2017 08:46:44 +0000</pubDate>
      
      <description>Xcode 9.1 significantly improves it’s user feedback when a Swift program terminates due to fatal error. Prior to Xcode 9.1, when a program terminated due to fatal error, the user was often left confused by the non-descriptive error message displayed. With the latest beta, Xcode will now display the reason for the fatal error termination. A nice improvement.</description>
    </item>
    
    <item>
      <title>The power of switch statements in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-switch-statements-in-swift</link>
      <pubDate>Sun, 08 Oct 2017 11:44:27 +0000</pubDate>
      
      <description>John Sundell looks at Swift switch statements, and demonstrates how versatile and powerful they can be, especially when combined with types defined using enums, tuples, and sets.</description>
    </item>
    
    <item>
      <title>Easier Swift Layout Priorities</title>
      <link>https://useyourloaf.com/blog/easier-swift-layout-priorities/</link>
      <pubDate>Sun, 08 Oct 2017 11:34:34 +0000</pubDate>
      
      <description>This short post from Use Your Loaf shows us how to make working with auto layout priorities in Swift a bit less painful. By overloading the + and - operators of UILayoutPriority, we can condense a few lines of code down to an intuitive one liner.</description>
    </item>
    
    <item>
      <title>Quicktype - Generate typesafe Swift JSON handling code</title>
      <link>https://swift.quicktype.io</link>
      <pubDate>Sat, 07 Oct 2017 14:38:19 +0000</pubDate>
      
      <description>This is a neat tool which generates typesafe JSON handling Swift code from whatever JSON you supply. It can generate either Swift 3 or Swift 4 code, and supports Swift 4’s Codable protocols. Swift is one of eight languages you can choose from.</description>
    </item>
    
    <item>
      <title>Codable Enums</title>
      <link>https://littlebitesofcocoa.com/318-codable-enums</link>
      <pubDate>Sat, 07 Oct 2017 14:30:21 +0000</pubDate>
      
      <description>Swift 4’s Codable protocols make it very easy to encode and decode conforming types, even working with enums when the enums rawValue also conforms to Codable. However, things get a little bit more complicated when dealing with enums which have associated values. This post from Little Bites of Cocoa shows us how we can handle such a situation.</description>
    </item>
    
    <item>
      <title>Why many developers still prefer Objective-C to Swift</title>
      <link>https://www.hackingwithswift.com/articles/27/why-many-developers-still-prefer-objective-c-to-swift</link>
      <pubDate>Fri, 06 Oct 2017 09:39:25 +0000</pubDate>
      
      <description>This is a great post from Paul Hudson in which he asks a number of current Objective-C developers why they have not made the move the Swift. There are some really interesting points made, and definitely many I agree with. As someone who did move from Objective-C to Swift, I still experience many of the issues they cite as reasons for sticking with Objective-C.</description>
    </item>
    
    <item>
      <title>BulletinBoard - Bottom Card Interfaces on iOS</title>
      <link>https://github.com/alexaubry/BulletinBoard</link>
      <pubDate>Fri, 06 Oct 2017 08:52:24 +0000</pubDate>
      
      <description>This is a cool iOS library from Alexis Aubry Radanovic which enables us to generate contextual card views and display them at the bottom of our device screen. It’s well suited for quick user interactions, and supports iPad and iPhone X out of the box.</description>
    </item>
    
    <item>
      <title>Creating custom collections in Swift</title>
      <link>https://www.swiftbysundell.com/posts/creating-custom-collections-in-swift</link>
      <pubDate>Thu, 05 Oct 2017 07:33:59 +0000</pubDate>
      
      <description>Swift collection data structures such as Array and Dictionary are extremely useful, and they most likely provide all the functionality we need in 99% of cases. However, when they don’t exactly meet our requirements, we can roll our own custom collections. In this post, John Sundell shows us how we can do this by walking through the implementation of a custom dictionary data structure.</description>
    </item>
    
    <item>
      <title>Measuring Swift compile times in Xcode 9</title>
      <link>https://www.jessesquires.com/blog/measuring-compile-times-xcode9/</link>
      <pubDate>Tue, 03 Oct 2017 08:10:31 +0000</pubDate>
      
      <description>Xcode Swift compile times are still a source of frustration for developers. The Swift type-checker, although improving with every Swift release, is a bottleneck. In this short post, Jesse Squires shows us how we can use two frontend Swift compiler flags to measure Swift compile times. We can then identify functions and expressions which take a long time to type-check, and update our code with explicitly type annotations. By doing so, we reduce the amount of type inference needed, which should lead to a reduction in compile times.</description>
    </item>
    
    <item>
      <title>Friday Q&amp;A: Swift 4 Weak References</title>
      <link>https://www.mikeash.com/pyblog/friday-qa-2017-09-22-swift-4-weak-references.html</link>
      <pubDate>Mon, 02 Oct 2017 08:10:51 +0000</pubDate>
      
      <description>The latest in Mike Ash’s Friday Q&amp;A series examines Swift 4’s implementation of weak object references. Mike covers everything we need to know - from the old implementation, to what makes up an object in Swift, and finally to side tables and how they are used in the Swift 4 implementation. The new implementation is exciting, and he hopes that it will lead to features such as stored properties in extensions.</description>
    </item>
    
    <item>
      <title>VegaScroll - Lightweight animated flowlayout for UICollectionView</title>
      <link>https://github.com/AppliKeySolutions/VegaScroll</link>
      <pubDate>Sun, 01 Oct 2017 09:18:18 +0000</pubDate>
      
      <description>Written in Swift 4, VegaScroll is a custom UICollectionViewFlowLayout. It provides a really nice lightweight, animated layout for your UICollectionViews, and is fully compatible with iOS 11.</description>
    </item>
    
    <item>
      <title>When JSONDecoder meets the real world, things get ugly…</title>
      <link>http://davelyon.net/2017/08/16/jsondecoder-in-the-real-world</link>
      <pubDate>Sun, 01 Oct 2017 09:09:57 +0000</pubDate>
      
      <description>Dave Lyon looks at decoding real-world API data using Swift 4’s Codable protocols. He explains why dealing with real-world JSON data might not be as simple as some of the examples we may have seen, and shows us how we can avoid common pitfalls.</description>
    </item>
    
    <item>
      <title>DispatchGroup vs. OperationQueue in Swift</title>
      <link>http://agostini.tech/2017/08/20/dispatchgroup-vs-operationqueue-in-swift</link>
      <pubDate>Sat, 30 Sep 2017 17:45:03 +0000</pubDate>
      
      <description>Dejan Agostini covers both DispatchGroups and OperationQueues as he demonstrates how to perform numerous asynchronous tasks and be notified when they all finish.</description>
    </item>
    
    <item>
      <title>Under the hood of Assertions in Swift</title>
      <link>https://www.swiftbysundell.com/posts/under-the-hood-of-assertions-in-swift</link>
      <pubDate>Thu, 28 Sep 2017 09:02:37 +0000</pubDate>
      
      <description>John Sundell looks at assertions and shows that although they are conceptually quite simple, they can be very powerful when placed in the right spots. He also provides an example of a custom assert function implementation, demonstrating how we can build on top of what the Swift standard library provides.</description>
    </item>
    
    <item>
      <title>The Best New Features in Swift 4</title>
      <link>https://plausible.coop/blog/2017/09/13/best-new-features-in-swift-4</link>
      <pubDate>Wed, 27 Sep 2017 08:21:26 +0000</pubDate>
      
      <description>Swift 4 was officially released last week, and most of us have probably been keeping up to date with changes by following evolution proposals. However, now that it’s officially out in the wild, it’s good to get a recap on the new features. This post from Mike Ash provides just that.</description>
    </item>
    
    <item>
      <title>Swift evolution - Non-Exhaustive Enums</title>
      <link>https://github.com/jrose-apple/swift-evolution/blob/non-exhaustive-enums/proposals/nnnn-non-exhaustive-enums.md</link>
      <pubDate>Tue, 26 Sep 2017 13:56:09 +0000</pubDate>
      
      <description>I really like this Swift evolution proposal from Jordan Rose. It aims to distinguish between enums which are exhaustive (they will never get new cases), and enums which are non-exhaustive, and to ensure that clients handle any future cases when dealing with the latter.</description>
    </item>
    
    <item>
      <title>Structures vs Classes in Swift</title>
      <link>http://agostini.tech/2017/09/03/structures-vs-classes-in-swift/</link>
      <pubDate>Tue, 26 Sep 2017 07:45:57 +0000</pubDate>
      
      <description>Dejan Agostini with a post explaining the difference between Swift Classes and Structures. He uses code examples to highlight the differences between the two, and advises on when we should use one over the other. We are probably all very familiar with most of the information in this post, but it’s good to be reminded of how things work.</description>
    </item>
    
    <item>
      <title>HGCircularSlider - Custom reusable circular slider control</title>
      <link>https://github.com/HamzaGhazouani/HGCircularSlider/blob/master/README.md</link>
      <pubDate>Mon, 25 Sep 2017 08:08:20 +0000</pubDate>
      
      <description>This is a nice Swift library from Hamza Ghazouani which provides a customizable circular slider control for iOS. It’s similar to the control seen in the iOS Clock Bedtime feature, and can be integrated via Cococpods or Carthage.</description>
    </item>
    
    <item>
      <title>Why Coroutines</title>
      <link>http://www.figure.ink/blog/2017/9/4/expressive-coroutines</link>
      <pubDate>Thu, 21 Sep 2017 07:28:34 +0000</pubDate>
      
      <description>Coroutines are a general form of subroutine (function) that don’t follow normal subroutine rules. Coroutines can exit (return) whenever they call other coroutines, and can pick up where they left off when called again. In this post, Joshua Emmons explains why coroutines are becoming extremely relevant in Swift, particularly so when we consider the async/await proposal being discussed in Swift evolution. This is a great explanation for anyone unsure of what a coroutine is and how they might be used in Swift.</description>
    </item>
    
    <item>
      <title>The Strange Case Of Mapping Over Optionals</title>
      <link>https://swiftunboxed.com/lang/optionals-map-flatmap/</link>
      <pubDate>Wed, 20 Sep 2017 07:56:12 +0000</pubDate>
      
      <description>Greg Heo with a post looking at how map and flatMap work when applied to optionals. Greg first looks at how traditional map and flatMap work when applied to collections, before taking a look at optionals. He provides code snippets of their Optional implementations, and offers guidance on when to use map and flatMap based on our requirements.</description>
    </item>
    
    <item>
      <title>Swift Error Handling Implementation</title>
      <link>https://www.mikeash.com/pyblog/friday-qa-2017-08-25-swift-error-handling-implementation.html</link>
      <pubDate>Tue, 19 Sep 2017 07:39:56 +0000</pubDate>
      
      <description>Mike Ash with another entry in his great Friday Q&amp;A series. In this post, Mike looks at how Swift error handling works on the inside. He looks at error handling in both Swift 3 and Swift 4, and then compares Swift error handling to exception handling in other languages. Very interesting.</description>
    </item>
    
    <item>
      <title>Listing all cases in an Swift enum</title>
      <link>https://medium.com/@londeix/listing-all-cases-in-an-enum-3b057f2c1432</link>
      <pubDate>Mon, 18 Sep 2017 08:29:57 +0000</pubDate>
      
      <description>Swift enumerations allows us to define a common type for a group of related values, and are a great way to keep our code organized and type-safe. However, one feature missing is the ability to easily list all available cases for an enum. In this post, Bartosz Polaczyk shows us how we can define our enums in such a way that that this is possible. Very useful.</description>
    </item>
    
    <item>
      <title>Concurrency in Swift: One approach</title>
      <link>https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782</link>
      <pubDate>Sun, 17 Sep 2017 10:46:34 +0000</pubDate>
      
      <description>This is a great detailed post by Chris Lattner in which he describes one approach to concurrency in Swift. Chris looks at the current state of concurrency in Swift, outlines his vision of where we want to get to, and then presents how we can get there using an async/await model.</description>
    </item>
    
    <item>
      <title>Making the case for Implicitly Unwrapped Optionals!</title>
      <link>https://medium.com/ios-os-x-development/making-the-case-for-c5a0280dac0a</link>
      <pubDate>Wed, 13 Sep 2017 07:58:10 +0000</pubDate>
      
      <description>Alex Manarpies makes the case for using implicitly unwrapped optionals. He looks at the common practice of declaring IBOutlets as implicitly unwrapped optionals, and describes why he thinks this is the right approach.</description>
    </item>
    
    <item>
      <title>Replacing legacy code using Swift protocols</title>
      <link>https://www.swiftbysundell.com/posts/replacing-legacy-code-using-swift-protocols</link>
      <pubDate>Tue, 12 Sep 2017 07:32:07 +0000</pubDate>
      
      <description>Legacy code is often best dealt with on an ongoing basis, refactoring in small steps rather than trying to refactor large chunks. In this post, John Sundell describes his approach to refactoring legacy code, based on using Swift protocols to refactor in steps without breaking too much.</description>
    </item>
    
    <item>
      <title>Clean code: The curse of a boolean parameter</title>
      <link>https://medium.com/@amlcurran/clean-code-the-curse-of-a-boolean-parameter-c237a830b7a3</link>
      <pubDate>Mon, 11 Sep 2017 07:36:10 +0000</pubDate>
      
      <description>Alex Curran describes how Bools can sometimes be a source of unwanted complexity in our code. He looks at the example of a method which takes a Bool parameter, and shows us how to refactor it to reduce it’s complexity.</description>
    </item>
    
    <item>
      <title>Handling empty optional strings in Swift</title>
      <link>https://medium.com/ios-os-x-development/handling-empty-optional-strings-in-swift-ba77ef627d74</link>
      <pubDate>Sun, 10 Sep 2017 16:09:47 +0000</pubDate>
      
      <description>When does an Optional String have a value? In most cases, it is when it is both non-nil and non-empty. However, checking that both of these are true for Optional Strings can be cumbersome in Swift. This post from Nathan Chan provides a handy Swift extension to make things a bit easier.</description>
    </item>
    
    <item>
      <title>Swift is like TypeScript</title>
      <link>https://alhazmy13.github.io/swift-is-like-typescript/</link>
      <pubDate>Thu, 07 Sep 2017 07:46:17 +0000</pubDate>
      
      <description>TypeScript is an open-source programming language developed by Microsoft. It’s a syntactical superset of JavaScript, adding optional static typing. This site provides side by side code samples of Swift and TypeScript, showing the similarities between the two languages.</description>
    </item>
    
    <item>
      <title>Friday Q&amp;A - Swift.Unmanaged</title>
      <link>https://mikeash.com/pyblog/friday-qa-2017-08-11-swiftunmanaged.html</link>
      <pubDate>Tue, 05 Sep 2017 07:43:49 +0000</pubDate>
      
      <description>One of Swift’s great strengths is how well it interoperates with C code. In one of his regular Friday Q&amp;A posts, Mike Ash looks at a key component of this interoperability - Swift’s Unmanaged struct. As Mike shows us, the Unmanaged struct is the API we need when we want to convert Swift object references to and from raw C pointers.</description>
    </item>
    
    <item>
      <title>Dijkstra’s Algorithm In Swift</title>
      <link>https://medium.com/swiftly-swift/dijkstras-algorithm-in-swift-15dce3ed0e22</link>
      <pubDate>Mon, 04 Sep 2017 07:42:47 +0000</pubDate>
      
      <description>Dijkstra’s Algorithm is a well known algorithm used to find the shortest path between nodes in a graph. In this post, Federico Zanetello explains the algorithm and shows us how to implement it in Swift.</description>
    </item>
    
    <item>
      <title>Core Animation gems: Using replicator layers in Swift</title>
      <link>https://www.swiftbysundell.com/posts/ca-gems-using-replicator-layers-in-swift</link>
      <pubDate>Sun, 03 Sep 2017 12:11:21 +0000</pubDate>
      
      <description>John Sundell shows us how CAReplicatorLayer can be a great tool for certain types of renderings and animations. He walks us through an implementation of using one image to create a tiled, animated view. CAReplicatorLayer may not be something we have cause to use regularly, but it’s good to know how to use it in case the opportunity arises.</description>
    </item>
    
    <item>
      <title>Using Swift Codable With Property Lists</title>
      <link>https://useyourloaf.com/blog/using-swift-codable-with-property-lists</link>
      <pubDate>Fri, 01 Sep 2017 07:55:06 +0000</pubDate>
      
      <description>Swift 4’s Codable protocols are a fantastic addition to the language, allowing us to easily encode/decode types to/from external formats. In this post from Use Your Loaf, we learn how to use the new Codable protocols to encode/decode data to/from Cocoa property lists.</description>
    </item>
    
    <item>
      <title>Swift Local Refactoring</title>
      <link>https://swift.org/blog/swift-local-refactoring/</link>
      <pubDate>Tue, 29 Aug 2017 07:36:28 +0000</pubDate>
      
      <description>Great post on the official Swift blog by Xi Ge in which he looks at the new Swift refactoring engine available in Xcode 9. This new engine can perform both local and global transformations of our code, and the logic behind local refactoring actions is implemented entirely  in the Swift compiler and SourceKit, and is open-source. This is great as it means we can contribute refactoring actions. Xi examines the kinds of local refactoring actions available and shows us how we can get started adding our own.</description>
    </item>
    
    <item>
      <title>Under the hood of Futures &amp; Promises in Swift</title>
      <link>https://www.swiftbysundell.com/posts/under-the-hood-of-futures-and-promises-in-swift</link>
      <pubDate>Mon, 28 Aug 2017 07:44:15 +0000</pubDate>
      
      <description>Asynchronous code can be difficult to implement correctly. In this post, John Sundell looks at one abstraction which aims to make asynchronous programming easier - Futures and Promises. This is a good look at what futures and promises are, and John provides a sample implementation to help us understand how they work.</description>
    </item>
    
    <item>
      <title>Codable Dates</title>
      <link>https://littlebitesofcocoa.com/316-codable-dates</link>
      <pubDate>Fri, 25 Aug 2017 07:36:36 +0000</pubDate>
      
      <description>Jake Marsh learns how to easily encode/decode Dates when using Swift 4’s Codable protocols. As he says, we have all had to handle some crazy date format when working with HTTP APIs, but with Swift 4, this should become less painful. A useful little bite of Cocoa.</description>
    </item>
    
    <item>
      <title>Reducing flakiness in Swift tests</title>
      <link>https://www.swiftbysundell.com/posts/reducing-flakiness-in-swift-tests</link>
      <pubDate>Wed, 23 Aug 2017 07:34:25 +0000</pubDate>
      
      <description>John Sundell shows us how to avoid three common sources of flakiness when testing - timing, async code, and UI testing delays. There are some good tips here and as John reminds us, the key to writing better tests is to always make the right assumptions.</description>
    </item>
    
    <item>
      <title>10 things I like about Swift</title>
      <link>https://medium.com/swift-programming/10-things-i-like-about-swift-7bbd40cabb79</link>
      <pubDate>Sun, 20 Aug 2017 13:51:30 +0000</pubDate>
      
      <description>Nathan Chan lists 10 things he likes about Swift. I bet that as you read down the list you will find yourself nodding in agreement. It’s good to remind ourselves why we fell in love! 😍.</description>
    </item>
    
    <item>
      <title>FAPanels - Swift Panel library </title>
      <link>https://github.com/fahidattique55/FAPanels</link>
      <pubDate>Sat, 19 Aug 2017 14:42:22 +0000</pubDate>
      
      <description>This Swift library from Fahid Attique allows you to  compose screens from a series of panels. It’s highly configurable, and provides support for animating panels as they are displayed.</description>
    </item>
    
    <item>
      <title>Synthesizing Equatable and Hashable conformance</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md</link>
      <pubDate>Wed, 16 Aug 2017 07:04:49 +0000</pubDate>
      
      <description>This Swift evolution proposal from Tony Allevato looks to reduce the amount of boilerplate code we need to write to conform to the Equatable and Hashable protocols. He proposes that the Swift compiler synthesize conformance to Equatable/Hashable for a type when all of it’s members are Equatable/Hashable. Considering how the Swift compiler currently synthesizes the Swift 4 Codable protocols under similar circumstances, this really makes sense, and would be a great addition to the language.</description>
    </item>
    
    <item>
      <title>Mental models in API design</title>
      <link>https://oleb.net/blog/2017/07/mental-models-in-api-design/</link>
      <pubDate>Tue, 15 Aug 2017 07:26:43 +0000</pubDate>
      
      <description>Taking inspiration from Don Norman’s The Design of Everyday Things, Olg Begemann examines API design. He uses Swift standard library APIs as examples, and explains how a well designed API manages to convey the API designer’s mental model to the API user.</description>
    </item>
    
    <item>
      <title>Type Erasure in Swift</title>
      <link>https://www.slacktime.org/type-erasure/</link>
      <pubDate>Mon, 14 Aug 2017 07:53:53 +0000</pubDate>
      
      <description>When using Swift protocols, it is sometimes useful to declare associated types as part of their  definition. This allows us to give placeholder names to types that are used as part of the protocol. However, one issue we encounter when doing this is that the protocol cannot be used as a concrete type. Type erasure is one way to get around this limitation, and in this post Chris shows us how.</description>
    </item>
    
    <item>
      <title>Speed up Swift compile time</title>
      <link>https://medium.com/theappspace/speed-up-swift-compile-time-6f62d86f85e6</link>
      <pubDate>Sun, 13 Aug 2017 12:10:35 +0000</pubDate>
      
      <description>Dejan Atanasov provides some tips to speed up Swift compile times. He looks at changes we can make to Xcode project configuration, together with changes to how we write our Swift code.</description>
    </item>
    
    <item>
      <title>Commander - Compose beautiful command line interfaces in Swift</title>
      <link>https://github.com/kylef/Commander</link>
      <pubDate>Fri, 11 Aug 2017 07:12:35 +0000</pubDate>
      
      <description>Commander is a small Swift framework from Kyle Fuller. It allows you to create command line interfaces by composing collections of commands written in Swift. Definitely something which is useful for tooling.</description>
    </item>
    
    <item>
      <title>Swift 5: Start your engines</title>
      <link>https://github.com/apple/swift-evolution/blob/master/README.md</link>
      <pubDate>Thu, 10 Aug 2017 07:39:03 +0000</pubDate>
      
      <description>With the official Swift 4 release imminent, it’s time to start planning the next evolution of the language. In this update Ted Kremenek outlines the primary goals of the the next development major versions, Swift 5. It’s not surprising to see API stability being the primary focus, as it was discussed as a goal for Swift 4. Reading this reminds me how awesome it is that Swift is being developed in the open. Start your engines! 🏎.</description>
    </item>
    
    <item>
      <title>Exploring Swift Closures</title>
      <link>http://kfarst.github.io/ios/2017/08/02/exploring-swift-closures/</link>
      <pubDate>Wed, 09 Aug 2017 07:43:17 +0000</pubDate>
      
      <description>Kevin Farst explores an invaluable part of the Swift language - closures. Kevin provides some tips such as using typealias to define commonly used closures, and provides examples of using closures to improve our code. Even if we are overly familiar with closures, it’s good to remind ourselves how we can best use them to make our life a little easier.</description>
    </item>
    
    <item>
      <title>Understanding Operation and OperationQueue in Swift</title>
      <link>http://agostini.tech/2017/07/30/understanding-operation-and-operationqueue-in-swift/</link>
      <pubDate>Tue, 08 Aug 2017 07:32:03 +0000</pubDate>
      
      <description>Dejan Agostini explains what Operations and OperationQueues are, and provides Swift examples of how we can use them. This is a good introductory article on implementing concurrency on iOS.</description>
    </item>
    
    <item>
      <title>Building a declarative animation framework in Swift - Part 2</title>
      <link>https://www.swiftbysundell.com/posts/building-a-declarative-animation-framework-in-swift-part-2</link>
      <pubDate>Mon, 07 Aug 2017 09:11:45 +0000</pubDate>
      
      <description>John Sundell continues to build a declarative animation framework in Swift in this post, the second in a series. Here, he adds the ability to coordinate animations performed on multiple views. It’s a nice approach, and something which could be easily adopted when performing animations in any project.</description>
    </item>
    
    <item>
      <title>Swift Initializer Problems</title>
      <link>https://github.com/apple/swift/blob/master/docs/InitializerProblems.rst</link>
      <pubDate>Sat, 05 Aug 2017 09:30:00 +0000</pubDate>
      
      <description>Swift initialization, particularly for class types where inheritance is involved, can sometimes feel a little complicated. This Swift document outlines 3 issues associated with Swift initialization, and proposes some possible solutions.</description>
    </item>
    
    <item>
      <title>How do I simplify `Swift.print`?</title>
      <link>http://ericasadun.com/2017/07/18/dear-erica-how-do-i-simplify-swift-print/</link>
      <pubDate>Fri, 04 Aug 2017 07:30:06 +0000</pubDate>
      
      <description>Erica Sadun encountered a problem when trying to call Swift.print on macOS from a subclass of a type which declares it’s own print function. Fortunately this name-overlap issue is fixed in macOS High Sierra, but the solution Erica comes up with is interesting.</description>
    </item>
    
    <item>
      <title>Why the Func</title>
      <link>https://academy.realm.io/posts/daniel-steinberg-altconf-2017-why-the-func/</link>
      <pubDate>Thu, 03 Aug 2017 07:40:26 +0000</pubDate>
      
      <description>Daniel Steinberg with a talk from AltConf 2017 in which he looks at what functional programming means in Swift. He takes a deep dive in to using map, and shows us what we can learn from trying to write our own map functions.</description>
    </item>
    
    <item>
      <title>Matching NSErrors</title>
      <link>http://www.figure.ink/blog/2017/7/24/update-matching-nserrors</link>
      <pubDate>Wed, 02 Aug 2017 07:36:26 +0000</pubDate>
      
      <description>Joshua Emmons shows us how to easily pattern match NSErrors in Swift. It transpires that since Swift 3, NSErrors are bridged to Swift error structs, and when combined with the pattern matching operator (~=), this allows us to deal with NSErrors in a much more declarative way.</description>
    </item>
    
    <item>
      <title>Interactive Swift Mind Map</title>
      <link>https://learn-anything.xyz/programming/programming-languages/swift</link>
      <pubDate>Tue, 01 Aug 2017 07:14:15 +0000</pubDate>
      
      <description>Learn Anything is an awesome community-driven project which maintains a searchable collection of interactive mind maps. This Swift mind map does not yet contain a great deal of content, but it’s a cool idea and  worth bookmarking. Also, as it’s community-driven we can contribute.</description>
    </item>
    
    <item>
      <title>Reminder About Let Initialization</title>
      <link>https://useyourloaf.com/blog/reminder-about-let-initialization/</link>
      <pubDate>Mon, 31 Jul 2017 07:34:18 +0000</pubDate>
      
      <description>Use Your Loaf with a quick reminder about declaring let constants in functions. With Swift being in a constant state of evolution, sometimes it helps to be reminded about some of the less talked about language features. I must admit that I did forget about this one, and probable declared a few variables where I could have declared constants.</description>
    </item>
    
    <item>
      <title>AZDialogViewController - Customizable alert dialog controller</title>
      <link>https://github.com/Minitour/AZDialogViewController</link>
      <pubDate>Sun, 30 Jul 2017 10:18:40 +0000</pubDate>
      
      <description>This is a nice Swift library from Antonio Zaitoun which provides a highly customizable alert dialog view. It mimics Snapchat’s alert dialog view and would be suitable to use in a variety of situations.</description>
    </item>
    
    <item>
      <title>Advanced UIKit Animations In Swift</title>
      <link>https://digitalleaves.com/advanced-uikit-animations-swift/</link>
      <pubDate>Sat, 29 Jul 2017 08:34:48 +0000</pubDate>
      
      <description>Another good post from Ignacio Nieto Carvajal at Digital Leaves. In this tutorial, Ignacio shows us how to implement animations in Swift. He starts with basic UIKit animations and then advances through interactive and interruptible animations. If you want to implement animations in your iOS apps using Swift, this is a great place to start.</description>
    </item>
    
    <item>
      <title>The Swift Evolution Process</title>
      <link>https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20170717/038180.html</link>
      <pubDate>Fri, 28 Jul 2017 12:54:03 +0000</pubDate>
      
      <description>With Swift being open-source, it is inevitable that people will have differing opinions on the language evolution process. In response to a discussion around the process, Chris Lattner offered his opinions on why the process works the way it does. It&#39;s a genuine and empathetic response, and some of the thoughts expressed can be applied to software engineering in general, particular around making perfect decisions up front when working in imperfect information.</description>
    </item>
    
    <item>
      <title>Building a declarative animation framework in Swift - Part 1</title>
      <link>https://www.swiftbysundell.com/posts/building-a-declarative-animation-framework-in-swift-part-1</link>
      <pubDate>Fri, 28 Jul 2017 07:27:26 +0000</pubDate>
      
      <description>John Sundell with the first in a series of posts on building a declarative animation framework in Swift. We have probably all written animation code using UIView’s animation API consisting of n-level nested closures, which soon becomes hard to read and even harder to tweak. The approach John presents avoids such issues, and could easily be adopted in any iOS project.</description>
    </item>
    
    <item>
      <title>Reactive iOS Programming: Lightweight State Containers in Swift</title>
      <link>https://www.captechconsulting.com/blogs/state-containers-in-swift</link>
      <pubDate>Thu, 27 Jul 2017 07:51:40 +0000</pubDate>
      
      <description>In this post, Tyler Tillage looks at an approach to managing app state using state containers. He starts by building a state container which wraps a state value, and then demonstrates how we can use this container to listen for state changes. It’s a nice approach, and something I can see myself adopting in my own projects.</description>
    </item>
    
    <item>
      <title>What’s New In UIKit Animations In Swift 4</title>
      <link>https://digitalleaves.com/blog/2017/07/whats-new-animations-swift-4/</link>
      <pubDate>Wed, 26 Jul 2017 07:42:47 +0000</pubDate>
      
      <description>Ignacio Nieto Carvajal shows us what’s new in animation is iOS 11 and Swift 4. He looks specifically at UIKit’s UIViewPropertyAnimator and how we can use new properties added in iOS 11 to improve our UIView-based animations.</description>
    </item>
    
    <item>
      <title>A story about Swift source compatibility</title>
      <link>http://www.jessesquires.com/blog/a-story-about-swift-source-compat/</link>
      <pubDate>Tue, 25 Jul 2017 07:42:27 +0000</pubDate>
      
      <description>The Swift source compatibility suite is a community owned project which serves to regression test changes to the Swift compiler. Projects added are periodically built against the latest development versions of Swift, helping us to better understand the impact of changes to the language. In this post, Jesse Squires tells the story of one of his own open-source projects, and why adding it to the compatibility suite sooner rather than later would have prevented a regression in the Swift compiler.</description>
    </item>
    
    <item>
      <title>Identifying objects in Swift</title>
      <link>https://www.swiftbysundell.com/posts/identifying-objects-in-swift</link>
      <pubDate>Mon, 24 Jul 2017 07:46:28 +0000</pubDate>
      
      <description>John Sundell looks at some of the common concepts of identify available in Swift. He provides simple examples to demonstrate how we can define identify when dealing with both value types and reference types. I was not familiar with Swift’s ObjectIdentifier type, but it’s something I could definitely see myself using at some point.</description>
    </item>
    
    <item>
      <title>JSON to Swift with Decoder and Decodable</title>
      <link>https://swiftunboxed.com/stdlib/json-decoder-decodable/</link>
      <pubDate>Sun, 23 Jul 2017 09:26:12 +0000</pubDate>
      
      <description>After looking at encoding Swift to JSON in a previous post, Greg Heo turns his attention to decoding JSON to Swift using Swift 4’s Decodable and Decoder protocols. As with the previous article, Greg steps through a complete example. The simplicity of the example, together with the diagrams, really help to explain how the decoding process works.</description>
    </item>
    
    <item>
      <title>Struct References</title>
      <link>http://chris.eidhof.nl/post/references/</link>
      <pubDate>Sat, 22 Jul 2017 10:14:23 +0000</pubDate>
      
      <description>Great article from Chris Eidhof in which he looks to combine the usage of references types and value types to get the best of both worlds. He uses new Swift 4 features such as keypaths and generic subscripts together with existing Swift features to create types which are mutable and observable, while also having underlying value type data.</description>
    </item>
    
    <item>
      <title>Refactoring Reveals Truths</title>
      <link>http://khanlou.com/2017/07/refactoring-reveals-truths/</link>
      <pubDate>Fri, 21 Jul 2017 08:13:36 +0000</pubDate>
      
      <description>This is a really great post from Soroush Khanlou in which he uses a Swift function to demonstrate what can be learned from refactoring a piece of code. What starts off as a relatively verbose algorithm soon becomes a clean one line solution, making it much easier to understand and, as Soroush writes, revealing the algorithms beautiful internal symmetry.</description>
    </item>
    
    <item>
      <title>Swift Performance</title>
      <link>https://www.skilled.io/u/playgroundscon/swift-performance</link>
      <pubDate>Thu, 20 Jul 2017 08:07:23 +0000</pubDate>
      
      <description>Matt Gallagher talks about high performance Swift. He looks at the sort of code that might be run millions of times - i.e low level code rather than abstractions. It’s a really interesting talk, and it’s great to dive in to the low level stuff when we probably spend most of our time working with higher level abstractions.</description>
    </item>
    
    <item>
      <title>Swift.Codable</title>
      <link>https://www.mikeash.com/pyblog/friday-qa-2017-07-14-swiftcodable.html</link>
      <pubDate>Wed, 19 Jul 2017 07:59:12 +0000</pubDate>
      
      <description>Swift 4 includes some really exciting additions, one of these being it’s Codable protocol, which allows us to easily encode/decode our custom types to data types such as JSON. In this edition of his Q&amp;A series of articles, Mike Ash looks at exactly how Swift’s new encoding systems works, and how we can implement the protocols ourselves to support a custom data format.</description>
    </item>
    
    <item>
      <title>Strongly typed identifiers in Swift</title>
      <link>http://tom.lokhorst.eu/2017/07/strongly-typed-identifiers-in-swift</link>
      <pubDate>Tue, 18 Jul 2017 07:39:52 +0000</pubDate>
      
      <description>Strings as identifiers are always a bit dangerous, leaving the door open to typos and resulting bugs. However, as Tom Lokhorst describes in this post, we can do better. Tom looks at a few options to transform our String identifiers into strongly typed identifiers. Of the ideas presented, I prefer the second alternative.</description>
    </item>
    
    <item>
      <title>Writing end-to-end JSON mapping tests in Swift</title>
      <link>https://www.swiftbysundell.com/posts/writing-end-to-end-json-mapping-tests-in-swift</link>
      <pubDate>Mon, 17 Jul 2017 07:32:26 +0000</pubDate>
      
      <description>John Sundell looks at how we can ensure the integrity of JSON retrieved from an API by using end-to-end tests. To avoid performing a network request each time we want to run our tests, he uses an Swift script which is run once to day to retrieve the JSON from the API. The example uses his own Unbox library for JSON mapping, but of course we could substitute the native Swift Codable protocol for our JSON decoding.</description>
    </item>
    
    <item>
      <title>ZIPFoundation - Zip Handling in Swift</title>
      <link>https://github.com/weichsel/ZIPFoundation</link>
      <pubDate>Sun, 16 Jul 2017 12:40:29 +0000</pubDate>
      
      <description>This is a useful Swift library from Thomas Zoechling which provides an intuitive API for creating, modifying, and reading ZIP archive files. It’s based on Apple’s libcompression for high performance and energy efficiency.</description>
    </item>
    
    <item>
      <title>PMSuperButton - UIButton with super powers</title>
      <link>https://github.com/Codeido/PMSuperButton</link>
      <pubDate>Fri, 14 Jul 2017 13:06:23 +0000</pubDate>
      
      <description>Cool Swift library from Pablo Musolino which provides a powerful UIButton type. It allows us to create complex buttons with custom attributes. Easy to integrate and lots of options for customization.</description>
    </item>
    
    <item>
      <title>Modelling state in Swift</title>
      <link>https://www.swiftbysundell.com/posts/modelling-state-in-swift</link>
      <pubDate>Wed, 12 Jul 2017 08:18:53 +0000</pubDate>
      
      <description>Dealing with state is hard, error prone, and unavoidable. In this post, John Sundell looks at some of the commonly used techniques we can apply when dealing with state in Swift. I think the first two points - having a single source of truth, and making states exclusive - are key.</description>
    </item>
    
    <item>
      <title>An aside about flatMap and monads</title>
      <link>http://www.cocoawithlove.com/blog/an-aside-about-flatmap-and-monads.html</link>
      <pubDate>Tue, 11 Jul 2017 07:58:25 +0000</pubDate>
      
      <description>This is a very interesting article from Matt Gallagher in which he discusses monads in the context of Swift and it’s flatmap functions. If you are not too familiar with the Haskell programming language, and the concept of a monad, this is a great place to start learning.</description>
    </item>
    
    <item>
      <title>Reducers - Dealing With Asynchrony</title>
      <link>http://chris.eidhof.nl/post/reducers/</link>
      <pubDate>Mon, 10 Jul 2017 09:19:20 +0000</pubDate>
      
      <description>This is a great post from Chris Eidhof in which he walks us through an example of using reducers in Swift to better deal with state changes and asynchronous code. I really like how the code evolves as he progresses through the example.</description>
    </item>
    
    <item>
      <title>Errors On The Server</title>
      <link>http://khanlou.com/2017/07/errors-on-the-server/</link>
      <pubDate>Sun, 09 Jul 2017 17:51:03 +0000</pubDate>
      
      <description>Soroush Khanlou looks at how to best handle errors when writing server-side Swift, in this case Vapor. I really like his point about making the correct way to write code the same as the nice way the write code, therefore removing the need for trade-offs between the two.</description>
    </item>
    
    <item>
      <title>Introducing Guard-Catch</title>
      <link>https://gist.github.com/khanlou/8bd9c6f46e2b3d94f0e9f037c775f5b9</link>
      <pubDate>Sun, 09 Jul 2017 12:16:10 +0000</pubDate>
      
      <description>Interesting draft Swift evolution proposal from Soroush Khanlou and Erica Sadun. It proposes a new guard / catch statement, which is congruent to the existing guard / else statement. Using the proposed guard / catch statement, we could attempt a throwing operation, and handle the error if thrown inside our guard catch block. The benefit here is that any value that we get when the throwing operation does not throw is then available the guard statement. There is no need to nest all our code in the do block of a do / catch statement.</description>
    </item>
    
    <item>
      <title>YapAnimator - Fast and friendly animation system</title>
      <link>https://github.com/yapstudios/YapAnimator</link>
      <pubDate>Thu, 06 Jul 2017 12:12:05 +0000</pubDate>
      
      <description>Yap Studios have released this cool physics-based animation system written entirely in Swift. The included CALayer and UIView extensions allow us to implement animations with one line of code. Neat.</description>
    </item>
    
    <item>
      <title>Key Value Observation in iOS 11</title>
      <link>http://skyefreeman.io/programming/2017/06/28/kvo-in-ios11.html</link>
      <pubDate>Wed, 05 Jul 2017 07:44:18 +0000</pubDate>
      
      <description>Skye Freeman with a short post reminding us that the Codable protocols are not the only exciting additions in Swift 4. Skye provides an example showcasing exactly why the new Swift syntax for key value observing is so awesome, and details some of the things we need to know when using the new syntax.</description>
    </item>
    
    <item>
      <title>JSON with Encoder and Encodable</title>
      <link>https://swiftunboxed.com/stdlib/json-encoder-encodable/</link>
      <pubDate>Tue, 04 Jul 2017 07:41:59 +0000</pubDate>
      
      <description>Great post from Greg Heo in which he looks at the magic that is JSON encoding in Swift 4. He walks through every step in the process of encoding a single Int value to JSON, and looks at  the implementation. There are some twists, with parts of the implementation probable not being what you expect. An informative and fun read.</description>
    </item>
    
    <item>
      <title>Using SpriteKit to create animations in Swift</title>
      <link>https://www.swiftbysundell.com/posts/using-spritekit-to-create-animations-in-swift</link>
      <pubDate>Mon, 03 Jul 2017 08:40:27 +0000</pubDate>
      
      <description>John Sundell demonstrates how we can use SpriteKit to create image or text-based animations. Although we can’t use SpriteKit to animate our UIViews, it could be used when animating UI components such as loading or onboarding screens.</description>
    </item>
    
    <item>
      <title>LGButton - Beautiful customizable UIControl </title>
      <link>https://github.com/loregr/LGButton</link>
      <pubDate>Sun, 02 Jul 2017 10:36:25 +0000</pubDate>
      
      <description>This is a really nice UIControl subclass from Lorenzo Greco written entirely in Swift. It provides a customizable UIControl which allows us to create beautiful buttons. It also includes the ability the add font icons via an integration with SwiftIconFont. Very useful.</description>
    </item>
    
    <item>
      <title>Statements, messages and reducers</title>
      <link>https://www.cocoawithlove.com/blog/statements-messages-reducers.html</link>
      <pubDate>Sat, 01 Jul 2017 13:14:24 +0000</pubDate>
      
      <description>Matt Gallagher shows us how to break code into isolated units of functionality using statements, messages, and reducers. It’s good to be reminded of some basic computational theory, and as the Swift example is evolved we begin to see the benefits of using this approach.</description>
    </item>
    
    <item>
      <title>Ultimate Guide to JSON Parsing With Swift 4</title>
      <link>http://benscheirman.com/2017/06/ultimate-guide-to-json-parsing-with-swift-4/</link>
      <pubDate>Sat, 01 Jul 2017 10:53:29 +0000</pubDate>
      
      <description>Ben Scheirman has created this fantastic guide to JSON parsing with Swift 4. Everything from basic encoding and decoding to flattening JSON objects is covered. If you need one guide while you update your code to use the new Encodable protocols, this is the one.</description>
    </item>
    
    <item>
      <title>Introducing the !! operator to the Swift Standard Library</title>
      <link>https://gist.github.com/erica/423e4b1c63b95c4c90338cdff4939a9b</link>
      <pubDate>Sat, 01 Jul 2017 09:15:38 +0000</pubDate>
      
      <description>I really like this draft Swift evolution proposal from Erica Sadun. It proposes an annotated forced unwrapping operator, !!, which attempts to forcefully unwrap an optional. If the forced unwrapping fails, it then documents the failure using the String specified at the callsite. Internally, the operator uses fatalError to document the specified message. I would love to see this make it in to the language.</description>
    </item>
    
    <item>
      <title>Working with optional errors in completion handlers</title>
      <link>http://ericasadun.com/2017/06/27/working-with-optional-errors-in-completion-handlers/</link>
      <pubDate>Fri, 30 Jun 2017 12:22:24 +0000</pubDate>
      
      <description>Short post from Erica Sadun who demonstrates a neat way of conditionally binding and casting an optional Error type in a completion closure.</description>
    </item>
    
    <item>
      <title>Replacing @autoclosure in Swift</title>
      <link>https://hashnode.com/post/replacing-autoclosure-in-swift-cj4frocx700wlz5k95763ucev</link>
      <pubDate>Fri, 30 Jun 2017 08:48:35 +0000</pubDate>
      
      <description>Benjamin Herzog takes inspiration from Scala and looks at how we might replace the use of @autoclosure in Swift. It’s an interesting idea, and even if you don’t agree it still provides food for thought.</description>
    </item>
    
    <item>
      <title>SwiftMessages - Flexible message bar for iOS</title>
      <link>https://github.com/SwiftKickMobile/SwiftMessages</link>
      <pubDate>Fri, 30 Jun 2017 08:27:52 +0000</pubDate>
      
      <description>This is a cool Swift library from SwiftKickMobile. It  provides a flexible UI component for displaying messages in iOS apps which could be used in a variety of situations - e.g task completion success/failure, network status etc. It has lots of configuration options and provides several themes.</description>
    </item>
    
    <item>
      <title>CALayer And Auto Layout With Swift</title>
      <link>https://marcosantadev.com/calayer-auto-layout-swift/</link>
      <pubDate>Thu, 29 Jun 2017 07:33:20 +0000</pubDate>
      
      <description>CALayers are useful when we want to manage and possibly animate visual content. However, the inability to use auto layout with CALayers can be frustrating. In this post, Marco Santarossa describes a specific scenario he encountered involving CALayer and auto layout, and provides three possible solutions to the problem he faced.</description>
    </item>
    
    <item>
      <title>Umbrella - Analytics abstraction layer for Swift</title>
      <link>https://github.com/devxoul/Umbrella</link>
      <pubDate>Wed, 28 Jun 2017 07:53:35 +0000</pubDate>
      
      <description>It’s common to use some sort of third-party analytics in our mobile apps. This handy Swift library from Jeon Suyeol uses Swift enums and associated values to improve the process of event logging to multiple analytics providers.</description>
    </item>
    
    <item>
      <title>JSON Parsing in Swift 4</title>
      <link>http://troz.net/2017/06/json-parsing-in-swift-4/</link>
      <pubDate>Wed, 28 Jun 2017 07:48:44 +0000</pubDate>
      
      <description>Parsing JSON with Swift 3 and below is a cumbersome task. It either means a lot of boilerplate code to convert JSON to strictly-typed Swift, or using one of the many third-party libraries to do the job for us. This all changes in Swift 4, with the introduction of the Encodable &amp; Decodable protocols. This great article by TrozWare shows us exactly what we need to know to easily parse JSON using Swift 4.</description>
    </item>
    
    <item>
      <title>The startling uniquing of Swift 4 dictionaries</title>
      <link>http://ericasadun.com/2017/06/19/the-startling-uniquing-of-swift-4-dictionaries/</link>
      <pubDate>Tue, 27 Jun 2017 13:53:22 +0000</pubDate>
      
      <description>Another great post from Erica Sadun. Here Erica shows us how we can use the new uniquing feature which has been added to the Dictionary type in Swift 4. This feature allows us to create a Dictionary of unique keys, while applying a function to each key&#39;s value each time a duplicate key is added. In one example, Erica uses this to find out which word appears the most in a large String.</description>
    </item>
    
    <item>
      <title>JTAppleCalendar - The unofficial Swift Apple calendar library</title>
      <link>https://github.com/patchthecode/JTAppleCalendar</link>
      <pubDate>Tue, 27 Jun 2017 07:49:27 +0000</pubDate>
      
      <description>This is a cool Swift library which provides a calendar UI component. It is completely customizable, allowing us to use custom cells for calendar dates. It also has tons of features such as date range selection and week/month display modes. Very nice.</description>
    </item>
    
    <item>
      <title>FanMenu - Circular layout menu</title>
      <link>https://github.com/exyte/fan-menu</link>
      <pubDate>Thu, 22 Jun 2017 06:58:39 +0000</pubDate>
      
      <description>This is a UI component created by the exyte company. It is based Macaw, which is a vector graphics Swift library. The library consists of only one file, making it easy to extend should you want to customize it.</description>
    </item>
    
    <item>
      <title>Capturing Values In Swift Closures</title>
      <link>https://marcosantadev.com/capturing-values-swift-closures/</link>
      <pubDate>Wed, 21 Jun 2017 07:41:05 +0000</pubDate>
      
      <description>Closures are a very powerful feature of Swift, and most of us will be very familiar with their usage. However, it’s always good to remind ourselves exactly how they work. In this post, Marco Santarossa looks at how we capture values in Swift closures, and in particular how to correctly use closure capture lists.</description>
    </item>
    
    <item>
      <title>Protocol composition in Swift and Objective-C</title>
      <link>http://www.jessesquires.com/blog/protocol-composition-in-swift-and-objc/</link>
      <pubDate>Tue, 20 Jun 2017 07:41:23 +0000</pubDate>
      
      <description>Protocols are a powerful tool. They allow us to specify contracts between classes that consume them, while also allowing us to segregate interfaces and invert control. However, when we want to declare protocol members as optional, we are forced to diminish the robustness of our code. In this post, Jesse Squires examines this problem, and proposes a number of approaches to make dealing with optional protocol members a bit more robust. One of these approaches, using nested protocols, is particularly elegant.</description>
    </item>
    
    <item>
      <title>The surprising awesomeness of Grouped Dictionaries</title>
      <link>http://ericasadun.com/2017/06/14/the-surprising-awesomeness-of-grouped-dictionaries/</link>
      <pubDate>Mon, 19 Jun 2017 08:06:42 +0000</pubDate>
      
      <description>Swift 4 includes some great new APIs, including some very useful additions to the Dictionary type. In this post, Erica Sadun demonstrates the awesomeness of a new Dictionary type initializer which allows us to convert any sequence to a Dictionary of grouped elements.</description>
    </item>
    
    <item>
      <title>Instructions - Customizable Coachmarks for iOS</title>
      <link>https://github.com/ephread/Instructions</link>
      <pubDate>Sun, 18 Jun 2017 12:07:14 +0000</pubDate>
      
      <description>As hard as we try to make our apps intuitive, we still sometimes need to provide hints as to how users can interact with our UI. Coachmarks are one way of doing this, and this Swift library by Frederic Maquin makes it easy to add them to any iOS app.</description>
    </item>
    
    <item>
      <title>Exploring the new String API in Swift 4</title>
      <link>https://www.swiftbysundell.com/posts/exploring-the-new-string-api-in-swift-4</link>
      <pubDate>Sun, 18 Jun 2017 11:59:09 +0000</pubDate>
      
      <description>Swift 4 includes a new more powerful and user-friendly String API. In this post, John Sundell explores this new API, sharing examples of some of the new ways we can use and manipulate Strings.</description>
    </item>
    
    <item>
      <title>What&#39;s new in Swift 4.0</title>
      <link>https://www.hackingwithswift.com/swift4</link>
      <pubDate>Fri, 16 Jun 2017 12:45:09 +0000</pubDate>
      
      <description>Paul Hudson looks at what&#39;s new in Swift 4, providing descriptions and code examples of it&#39;s latest and greatest features. As usual with Paul&#39;s posts, this is a very readable and concise overview of what we need to know.</description>
    </item>
    
    <item>
      <title>Swift phases and mis-timed proposals</title>
      <link>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20170605/004751.html</link>
      <pubDate>Fri, 16 Jun 2017 08:31:04 +0000</pubDate>
      
      <description>The Swift evolution mailing list has been invaluable in providing a place when the wider Swift community can discuss Swift and it’s evolution proposals. However, ideas which don’t fit in to the scope of the upcoming Swift release can sometimes get lost. Here, as part of a thread discussing this, Ted Kremenek offers his opinion.</description>
    </item>
    
    <item>
      <title>Breaking changes in Swift 4</title>
      <link>http://blog.xebia.com/breaking-changes-swift-4/</link>
      <pubDate>Thu, 15 Jun 2017 07:40:03 +0000</pubDate>
      
      <description>Even if we have been eagerly following Swift evolution, and trying out Swift 4’s new features, it’s good to be reminded of the changes that will break our existing Swift 3 codebases. Here, Bart den Hollander runs through some Swift 4 breaking changes, and provides code examples of how to fix them.</description>
    </item>
    
    <item>
      <title>Encoding and Decoding in Swift 4</title>
      <link>https://medium.com/compileswift/encoding-and-decoding-in-swift-4-f82114897862</link>
      <pubDate>Wed, 14 Jun 2017 07:32:08 +0000</pubDate>
      
      <description>Swift 4 introduces the Codable protocol, a really useful protocol which enables us to easily encode and decode conforming types. In this short post, Mohammed Azam demonstrates how we can use this feature to encode/decode our custom types to/from JSON.</description>
    </item>
    
    <item>
      <title>Why is it called a Closure anyway?</title>
      <link>https://www.andrewcbancroft.com/2017/06/05/why-is-it-called-a-closure-anyway-a-swift-conceptual-look/</link>
      <pubDate>Wed, 14 Jun 2017 07:26:12 +0000</pubDate>
      
      <description>Closures are a super-useful feature of Swift (and many other programming languages) which allow us to capture variables and pass functionality around in our code. In this short post, Andrew Bancroft offers his own take on why a closure is called a closure. For me, knowing that it closes over variables was always enough to justify the naming, but it’s fun to see someone search for their own reasoning.</description>
    </item>
    
    <item>
      <title>Apple open sources key Xcode refactoring components</title>
      <link>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20170605/004751.html</link>
      <pubDate>Tue, 13 Jun 2017 07:49:07 +0000</pubDate>
      
      <description>This year at WWDC 2017, Apple delivered Xcode 9 beta. This release includes a new refactoring feature that supports the refactoring of Swift. This was great news and something the community eagerly awaited. Shortly after, Ted Kremenek took to the message boards to make another announcement - Apple will be open sourcing key parts of the engine that power the Xcode file-level transformations. It’s always great to see an organization open sourcing, and even more so when it comes to tooling.</description>
    </item>
    
    <item>
      <title>Parsing Dates: When Performance Matters</title>
      <link>http://jordansmith.io/performant-date-parsing/</link>
      <pubDate>Mon, 12 Jun 2017 12:32:50 +0000</pubDate>
      
      <description>Processing JSON and creating types is a common task which can often result in unacceptable performance metrics. In this post, Jordan Smith examines processing JSON and parsing dates, and shows us how we can improve the performance of such a task by iterating on our approach.</description>
    </item>
    
    <item>
      <title>NMOutlineView: Hierarchical Menu for iOS</title>
      <link>https://github.com/gkopel/nmoutlineview</link>
      <pubDate>Mon, 12 Jun 2017 07:51:16 +0000</pubDate>
      
      <description>Greg Kopel has created a neat hierarchical menu UI component for iOS. It builds on top of a UITableView and is 100% Swift. Menu items can be expanded/collapsed, and because it’s built  on top of a UITableView, we can customize it’s appearance using the standard UITableView and UITableViewCell APIs.</description>
    </item>
    
    <item>
      <title>Swift’s Evolution</title>
      <link>https://carpeaqua.com/2017/06/02/swifts-evolution/</link>
      <pubDate>Sun, 11 Jun 2017 18:20:51 +0000</pubDate>
      
      <description>Interest post from Justin Williams in which he shares his thoughts on the evolution of Swift. Justin takes a rather dim view of how Swift is evolving, but he does raise some valid points. It can be frustrating to adopt a language and then see changes being made to it which we don’t agree with. However, I think in general, the core Swift team and the community do a pretty good job of deciding what should be addressed in each Swift release.</description>
    </item>
    
    <item>
      <title>Swift: Close to greatness in programming language design</title>
      <link>https://www.synopsys.com/blogs/software-security/swift-programming-language-design-part-1</link>
      <pubDate>Fri, 09 Jun 2017 14:12:30 +0000</pubDate>
      
      <description>Interesting look at how Swift rates in terms of avoiding language defect patterns. This is part 1 in a series of posts from Peter Dillinger, and it&#39;s encouraging to see Swift hold it&#39;s own when compared to other languages.</description>
    </item>
    
    <item>
      <title>BFKit - A collection of useful Swift classes, structs, and extensions</title>
      <link>https://github.com/FabrizioBrancati/BFKit-Swift</link>
      <pubDate>Thu, 08 Jun 2017 11:56:46 +0000</pubDate>
      
      <description>Fabrizio Brancati has created a cool Swift library which provides a collection of useful Swift classes, structs, and extensions. It&#39;s aim is to help developers crate apps faster. There is lots here including many extensions to Foundation, UIKit, and WatchKit classes.</description>
    </item>
    
    <item>
      <title>Use Copy-On-Write With Swift Value Types</title>
      <link>https://marcosantadev.com/copy-write-swift-value-types/</link>
      <pubDate>Wed, 07 Jun 2017 11:18:17 +0000</pubDate>
      
      <description>Value types are a great feature of Swift, allowing us to more easily reason about the safety of our code. When a value type is passed around our code, it is copied, meaning we can trust that no other part of our code is changing it. However, this comes with one possible drawback. Passing a large value type, such as an Array with thousands of elements, might result in unnecessary copying if the Array is not mutated after it is copied. This is where copy-on-write comes in. As explained in this post by Marco Santarossa, value types which implement copy-on-write are only copied when they need to be, i.e when they are mutated. It&#39;s a nice optimisation and something we can add to our own custom value types when needed.</description>
    </item>
    
    <item>
      <title>To Optional or Not to Optional: IBOutlet</title>
      <link>https://blog.curtisherbert.com/to-optional-or-not-to-optional-iboutlet/</link>
      <pubDate>Tue, 06 Jun 2017 07:58:46 +0000</pubDate>
      
      <description>Official Apple documentation recommends that we use implicitly unwrapped optionals (IUOs) when declaring IBOutlets in our Swift code. It&#39;s advice most of us probably follow, but have we ever put much thought in to it? Here, Curtis Herbert explains why he will never use IUOs for his IBOutlets again, but rather will switch to using optionals.</description>
    </item>
    
    <item>
      <title>Writing better singletons in Swift</title>
      <link>http://www.jessesquires.com/blog/writing-better-singletons-in-swift/</link>
      <pubDate>Mon, 05 Jun 2017 12:17:18 +0000</pubDate>
      
      <description>Singletons, whether loved or loathed, are a  fact of software development. This is especially evident in iOS development, where they are used in many of the frameworks. In this post, Jesse Squires looks at why singletons sometimes are the right choice, and provides some guidance on how to create singletons the right way.</description>
    </item>
    
    <item>
      <title>A deep dive into Grand Central Dispatch in Swift</title>
      <link>https://www.swiftbysundell.com/posts/a-deep-dive-into-grand-central-dispatch-in-swift</link>
      <pubDate>Sun, 04 Jun 2017 15:11:15 +0000</pubDate>
      
      <description>In the latest entry in his weekly blog series, John Sundell sparks our imagination regarding what we can do with Grand Central Dispatch. The examples provided really do make you think about how some of the lesser known GCD APIs could be utilised.</description>
    </item>
    
    <item>
      <title>Mixing Constant and Literal Strings</title>
      <link>http://www.figure.ink/blog/2017/5/29/mixing-constant-and-literal-strings</link>
      <pubDate>Fri, 02 Jun 2017 11:03:49 +0000</pubDate>
      
      <description>Joshua Emmons shows us how to avoid implementing a stringly-typed interface. Using an enum with an associated type, we can enforce the use of constants, while also allowing for unexpected and unknowable string values.</description>
    </item>
    
    <item>
      <title>This Swift 4 change is objectively bad</title>
      <link>https://twitter.com/jckarter/status/867766410172182528</link>
      <pubDate>Fri, 02 Jun 2017 09:01:54 +0000</pubDate>
      
      <description>Interesting Twitter thread regarding what looks like an undesirable change coming in Swift 4. The change relates to how tuples are automatically expanded in closures and it&#39;s something to be mindful of as we approach the Swift 4 release.</description>
    </item>
    
    <item>
      <title>Type-Driven Development with Swift </title>
      <link>http://matt.diephouse.com/2017/05/type-driven-development-with-swift/</link>
      <pubDate>Wed, 31 May 2017 07:40:32 +0000</pubDate>
      
      <description>Type-driven development as described here means we focus on the types of our functions before fully implementing them. This allows us to build a proven foundation for our code. Then, once we have types that we compiling, we can finish implementing them. In this short post, Matt Diephouse shows us how he uses this approach with Swift. He first figures out his types, before later returning to fill in the implementation.</description>
    </item>
    
    <item>
      <title>Tests that don&#39;t crash</title>
      <link>http://ericasadun.com/2017/05/27/tests-that-dont-crash/</link>
      <pubDate>Tue, 30 May 2017 07:53:46 +0000</pubDate>
      
      <description>Tim Vermeulen with a short post showing us how to write tests which fail gracefully when they encounter a nil optional. Marking individual tests as throwing is not something I thought of before, and it means tests that previously crashed now simply fail, allowing subsequent tests to be executed. Nice idea.</description>
    </item>
    
    <item>
      <title>Using @autoclosure when designing Swift APIs</title>
      <link>https://www.swiftbysundell.com/posts/using-autoclosure-when-designing-swift-apis</link>
      <pubDate>Mon, 29 May 2017 07:33:48 +0000</pubDate>
      
      <description>The @autoclosure attribute enables us to define function arguments which can be expressed as a simple expression at the call site, but which are then automatically wrapped in a closure. This has the benefit of delaying execution, as with an explicit closure, while also reducing the verbosity of our code. In this post John Sundell provides 3 quick examples of using @autoclosure when designing our APIs. While reading this it&#39;s also worth keeping in mind a note from Apple&#39;s official Swift programming guide which points out that overusing autoclosures can make our code hard to understand. Use wisely.</description>
    </item>
    
    <item>
      <title>Building Swift Projects In Source Compatibility Mode</title>
      <link>http://dduan.net/2017/05/22/build-in-swift-compatibility-mode/</link>
      <pubDate>Sun, 28 May 2017 11:34:45 +0000</pubDate>
      
      <description>Source compatibility mode is a compilation mode available with Swift 4 which when enabled should compile the vast majority of Swift 3 sources. In this post, Daniel Duan shows us how we can try it out using the current Swift 4 snapshot.</description>
    </item>
    
    <item>
      <title>Swift Dispatch - 5 Easy Tricks</title>
      <link>http://ericasadun.com/2017/05/23/5-easy-dispatch-tricks/</link>
      <pubDate>Fri, 26 May 2017 07:57:29 +0000</pubDate>
      
      <description>Swift Dispatch enables us to easily execute code concurrently on multicore systems. Using DispatchTime, which represents a point in time relative to the default clock time, we can schedule our concurrent tasks to happen at some point in the future. In this post, Erica Sadun looks at Dispatch and shows us five easy ways we can improve our Dispatch experience.</description>
    </item>
    
    <item>
      <title>Higher order functions in Swift</title>
      <link>https://craiggrummitt.com/2017/05/08/higher-order-functions-in-swift/</link>
      <pubDate>Thu, 25 May 2017 08:13:20 +0000</pubDate>
      
      <description>Swift&#39;s functional aspects such as immutability and higher order functions (functions which allow functions/closures as parameters/return values) are awesome. In this post, Craig Grummitt looks at the latter, presenting examples of how we can use Swift&#39;s higher order functions to perform operations on collections.</description>
    </item>
    
    <item>
      <title>Stored Properties In Swift Extensions</title>
      <link>https://marcosantadev.com/stored-properties-swift-extensions/</link>
      <pubDate>Wed, 24 May 2017 08:40:39 +0000</pubDate>
      
      <description>The ability to add stored properties to Swift extensions is something I often hear developers wish for (myself included). Although it&#39;s not something that is possible using pure Swift, it is possible using Objective-C associated objects. In this post, Marco Santarossa shows us how.</description>
    </item>
    
    <item>
      <title>Swift Tricks: Searching for Objects by Type</title>
      <link>https://timekl.com/blog/2017/05/14/swift-tricks-searching-for-objects-by-type/</link>
      <pubDate>Wed, 24 May 2017 07:47:54 +0000</pubDate>
      
      <description>Performing operations such as map or flatmap on large collections can be expensive. Luckily, Swift provides lazy collections. Using a lazy collection, all operations are delayed until we actually need to access an element. In this post, TIm Ekl uses a lazy collection together with flatmap to efficiently find a specific type in an array of types.</description>
    </item>
    
    <item>
      <title>Protocols and MVVM in Swift to avoid repetition</title>
      <link>https://sudo.isl.co/swift-mvvm-protocols/</link>
      <pubDate>Tue, 23 May 2017 07:37:03 +0000</pubDate>
      
      <description>Thomas Degry demonstrates how we can use MVVM and protocols to avoid achieve two goals: avoiding massive view controllers (MVC!), and having as little repetitive code as possible. It&#39;s a nice simple use of a protocol to create a more generic table view, and it&#39;s something I have myself used in projects.</description>
    </item>
    
    <item>
      <title>Loose coupling using Swift protocols</title>
      <link>http://www.apokrupto.com/blog-1/2017/5/16/default-protocol-extensions-for-loose-coupling</link>
      <pubDate>Mon, 22 May 2017 18:19:34 +0000</pubDate>
      
      <description>Nice usage of a Swift protocol and default implementation to achieve loose coupling. The post looks at the iOS AppDelegate class, but this approach could be used with any type.</description>
    </item>
    
    <item>
      <title>Using lazy properties in Swift</title>
      <link>https://www.swiftbysundell.com/posts/using-lazy-properties-in-swift</link>
      <pubDate>Fri, 19 May 2017 11:12:41 +0000</pubDate>
      
      <description>Lazy properties are great when we want to delay expensive creation of type properties. Here, John Sundell describes the various approaches we can take when using lazy properties, from the basics of simply using the lazy keyword, to using factory methods to extract initialization code and reduce complexity.</description>
    </item>
    
    <item>
      <title>A Simple Undo/Redo Implementation in Swift</title>
      <link>http://blog.benjamin-encz.de/post/simple-undo-redo-swift</link>
      <pubDate>Mon, 15 May 2017 17:36:35 +0000</pubDate>
      
      <description>Benjamin Encz demonstrates how to implement an Undo/Redo feature using Swift value types and pattern matching.</description>
    </item>
    
    <item>
      <title>SRCountdownTimer - Simple circle countdown</title>
      <link>https://github.com/rsrbk/SRCountdownTimer</link>
      <pubDate>Mon, 15 May 2017 14:12:04 +0000</pubDate>
      
      <description>Nice countdown Swift UI component from Ruslan Serebriakov. Customizable and with a configurable timer.</description>
    </item>
    
    <item>
      <title>Back Buttons and Coordinators in Swift</title>
      <link>http://khanlou.com/2017/05/back-buttons-and-coordinators/</link>
      <pubDate>Mon, 15 May 2017 13:41:00 +0000</pubDate>
      
      <description>Using Coordinators can help us separate our app flow logic, and make UIViewControllers more reusable. In this post, one in a series on Coordinators, Soroush Khanlou writes about techniques for handling &#39;back&#39; navigation within a UINavigationController.</description>
    </item>
    
    <item>
      <title>Swifty MVVM Part 1</title>
      <link>https://sudo.isl.co/swift-mvvm-intro/</link>
      <pubDate>Mon, 15 May 2017 07:47:01 +0000</pubDate>
      
      <description>Short post from Taylor Guidon which is the first in a series on MVVM (Model-View-ViewModel). It covers the basics and is a good introduction for anyone new to MVVM.</description>
    </item>
    
    <item>
      <title>All about Concurrency in Swift - Part 1: The Present</title>
      <link>https://www.uraimo.com/2017/05/07/all-about-concurrency-in-swift-1-the-present/</link>
      <pubDate>Sun, 14 May 2017 17:57:39 +0000</pubDate>
      
      <description>Umberto Raimondi with the first in a series of articles on concurrency in Swift. This is an excellently detailed look at what we have at our disposal, covering everything from locks and threads, to Grand Central Dispatch.</description>
    </item>
    
    <item>
      <title>Benchmarks for the Top Server-Side Swift Frameworks vs. Node.js</title>
      <link>https://medium.com/@rymcol/benchmarks-for-the-top-server-side-swift-frameworks-vs-node-js-24460cfe0beb</link>
      <pubDate>Sun, 14 May 2017 11:09:46 +0000</pubDate>
      
      <description>Really interesting post from Ryan Collins in which he compares the top Swift server-side frameworks and Node.js. Great to see Swift holding it&#39;s own against the established Node.js.</description>
    </item>
    
    <item>
      <title>Table Views in iOS with Swift - A comprehensive guide</title>
      <link>http://matteomanferdini.com/the-correct-way-to-display-lists-in-ios-and-what-many-developers-do-wrong/</link>
      <pubDate>Sun, 14 May 2017 10:50:33 +0000</pubDate>
      
      <description>A comprehensive guide to iOS table views from Matteo Manferdini. Everything you need to correctly utilize this common iOS component is covered in detail.</description>
    </item>
    
    <item>
      <title>Highlighter - Highlight whatever you want</title>
      <link>https://github.com/younatics/Highlighter</link>
      <pubDate>Sun, 14 May 2017 10:32:49 +0000</pubDate>
      
      <description>Created by Seungyoun Yi, Highlighter is a really cool Swift library that enables you to easily highlight text in UI components. UILabel, UITextView, UITexTfield, and UIButton are all supported.</description>
    </item>
    
    <item>
      <title>Why Do We Need to Annotate Escaping Closures in Swift?</title>
      <link>https://medium.com/@andrewcbancroft/why-do-we-need-to-annotate-escaping-closures-in-swift-d9985172cad8</link>
      <pubDate>Sat, 13 May 2017 08:36:19 +0000</pubDate>
      
      <description>Andrew Bancroft looks at why we need to annotate Swift escaping closures. Quotes from Chris Lattner help him come to a conclusion on the motivations of the Swift compiler when it warns us to annotate our closures as escaping.</description>
    </item>
    
    <item>
      <title>Symbolicating Swift iOS crash reports</title>
      <link>https://blog.bugsnag.com/symbolicating-ios-crashes/</link>
      <pubDate>Fri, 12 May 2017 07:29:42 +0000</pubDate>
      
      <description>Mike Bull from Bugsnag looks at symbolicating crash reports, describing the tools available. He also investigates what causes missing information in Swift stacktraces.</description>
    </item>
    
    <item>
      <title>Building a command line tool using the Swift Package Manager </title>
      <link>https://medium.com/@johnsundell/building-a-command-line-tool-using-the-swift-package-manager-3dd96ce360b1</link>
      <pubDate>Wed, 10 May 2017 07:36:23 +0000</pubDate>
      
      <description>John Sundell with a tutorial on how to create a command line tool using the Swift Package Manager. He uses his own open-source tool Marathon as an example. Everything you need to create your own command line tool is explained.</description>
    </item>
    
    <item>
      <title>Evolving Label-Directed Tuple Assignments</title>
      <link>http://ericasadun.com/2017/05/08/evolving-label-directed-tuple-assignments/</link>
      <pubDate>Tue, 09 May 2017 07:39:19 +0000</pubDate>
      
      <description>Really interesting post from Erica Sadun on an undocumented feature of Swift - the use of tuple labels to mix and match tuple declarations with values. This is sometimes called a &#34;tuple shuffle&#34;. Obscure and slightly complex.</description>
    </item>
    
    <item>
      <title>Readable Swift: The Curious Case of Not</title>
      <link>http://www.figure.ink/blog/2017/5/7/readable-swift-the-curious-case-of-not</link>
      <pubDate>Mon, 08 May 2017 19:44:08 +0000</pubDate>
      
      <description>Joshua Emmons considers the Swift not (!) operator, offering his thoughts on it&#39;s readability. Included are some ...interesting alternatives.</description>
    </item>
    
    <item>
      <title>Using Swiftlint to avoid conflict </title>
      <link>http://williamboles.me/swiftlint-eases-conflict/</link>
      <pubDate>Mon, 08 May 2017 07:25:17 +0000</pubDate>
      
      <description>As we know, there is no such thing as one true way of formatting code. This is especially evident when working on a team and submitting PRs. Luckily, SwiftLint can help us. William Boles describes his experience using it, and how it helped keep his team happy.</description>
    </item>
    
    <item>
      <title>Experimental Swift</title>
      <link>https://medium.com/@piotr.gorzelany/experimental-swift-8c9131b62a9d</link>
      <pubDate>Sun, 07 May 2017 09:45:15 +0000</pubDate>
      
      <description>This is a really cool post from Piotr Gorzelany in which he describes how he was able to use Swift to control a Raspberry Pi via an iOS app. iOS + Vapor + Raspberry Pi = Madness.</description>
    </item>
    
    <item>
      <title>Toolbar - An alternative to UIToolbar</title>
      <link>https://github.com/1amageek/Toolbar</link>
      <pubDate>Sat, 06 May 2017 17:35:58 +0000</pubDate>
      
      <description>This is a nice component from 1amageek which can be used as an alternative to UIToolbar. It behaves more dynamically than the standard UIToolbar, and is made with auto layout.</description>
    </item>
    
    <item>
      <title>Change filter to return an associated type</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0174-filter-range-replaceable.md</link>
      <pubDate>Sat, 06 May 2017 08:29:32 +0000</pubDate>
      
      <description>This Swift evoluion proposal changes the filter operation on Sequences to return an associated type, and adds a default implementation to return the same type as the filtered collection. Now, all range-replaceable collections will have a Filtered of Self, including String. Very useful.</description>
    </item>
    
    <item>
      <title>Swift Arrays Holding Elements With Weak References</title>
      <link>https://marcosantadev.com/swift-arrays-holding-elements-weak-references/</link>
      <pubDate>Fri, 05 May 2017 08:09:29 +0000</pubDate>
      
      <description>Marco Santarossa looks at memory management in Swift, detailing how we can use NSPointerArray to store weak references to Swift classes.</description>
    </item>
    
    <item>
      <title>Swift with a hundred engineers</title>
      <link>https://www.skilled.io/u/swiftsummit/swift-with-a-hundred-engineers</link>
      <pubDate>Thu, 04 May 2017 07:47:17 +0000</pubDate>
      
      <description>Uber recently undertook a complete rewrite of their main app entirely in Swift. Tuomas Artman talks about their motivations for choosing Swift, and the learnings from using Swift for such a big rewrite. Both the good and the bad a discussed, and it&#39;s unsurprising to see tooling and compile times being included as drawbacks. Very interesting.</description>
    </item>
    
    <item>
      <title>Swift Protocols as UI Mixins</title>
      <link>http://cleancocoa.com/posts/2017/04/protocol-ui-mixin/</link>
      <pubDate>Tue, 02 May 2017 16:51:47 +0000</pubDate>
      
      <description>Christian Tietze comments on a GitHub gist which adds pull to refresh to a UITableView. The gist is a nice example of using a Swift protocol with a default implementation to add functionality to a UI element.</description>
    </item>
    
    <item>
      <title>Swift range containment operator</title>
      <link>https://medium.com/@nahive/swift-range-containment-operator-3ba838fb8487</link>
      <pubDate>Tue, 02 May 2017 15:57:23 +0000</pubDate>
      
      <description>Short post describing the Swift ~= operator. Szy details what it does, when to use it, and what it does not do. Included is a small extension which aims to improve it&#39;s usability.</description>
    </item>
    
    <item>
      <title>Swifty Tips ⚡️</title>
      <link>https://medium.com/@gokselkoksal/swifty-tips-%EF%B8%8F-8564553ba3ec</link>
      <pubDate>Mon, 01 May 2017 11:09:26 +0000</pubDate>
      
      <description>Sensible best practices from Göksel Köksal to improve your Swift code. One of these, avoiding AppDelegate overuse, is something I have being paying particular attention to lately.</description>
    </item>
    
    <item>
      <title>Picking the right way of failing in Swift</title>
      <link>https://medium.com/@johnsundell/picking-the-right-way-of-failing-in-swift-e89125a6b5b5</link>
      <pubDate>Mon, 01 May 2017 08:53:46 +0000</pubDate>
      
      <description>John Sundell looks at the different ways errors can be handled in Swift. He lists the available techniques, split in to recoverable and non-recoverable techniques, and provides examples of usage. Also, remember, print(error) is not error handling 😉.</description>
    </item>
    
    <item>
      <title>SE-0165: Dictionary &amp; Set Enhancements</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md</link>
      <pubDate>Sun, 30 Apr 2017 13:56:38 +0000</pubDate>
      
      <description>Great to see this Swift proposal accepted, as it comprises  a variety of useful improvements to the standard Dictionary type, as well as corresponding changes to Set. I really like the key-based subscript with default value addition.</description>
    </item>
    
    <item>
      <title>Custom Operator Overloading in Swift</title>
      <link>https://www.raywenderlich.com/157556/overloading-custom-operators-swift</link>
      <pubDate>Sat, 29 Apr 2017 13:47:15 +0000</pubDate>
      
      <description>Evan Dekhayser with a raywenderlich.com tutorial on operator overloading in Swift. Everything you need to know is included, from overloading existing operators to creating your own custom operators.</description>
    </item>
    
    <item>
      <title>Test Doubles in Swift</title>
      <link>https://marcosantadev.com/test-doubles-swift</link>
      <pubDate>Sat, 29 Apr 2017 13:40:50 +0000</pubDate>
      
      <description>Unit testing components with dependencies can be complicated. Here, Marco Santarossa explains what test doubles are, and how they can help with such unit testing.</description>
    </item>
    
    <item>
      <title>Swift Algorithms - Sum of First N Natural Numbers</title>
      <link>https://youtu.be/yVkfogw9hgA</link>
      <pubDate>Sat, 29 Apr 2017 13:04:13 +0000</pubDate>
      
      <description>Károly Nyisztor with a short video comparing two Swift algorithms for calculating the sum of the first N natural numbers. One algorithm executes in linear time, while the other executes in constant time.</description>
    </item>
    
    <item>
      <title>Adding Swift Playgrounds to Xcode Projects</title>
      <link>https://useyourloaf.com/blog/adding-playgrounds-to-xcode-projects</link>
      <pubDate>Sat, 29 Apr 2017 08:06:30 +0000</pubDate>
      
      <description>Xcode Swift playgrounds are a fantastic way to try out ideas. In this how-to, Use Your Loaf shows us how to add a playground to an Xcode project and give it access to project code and resources. Really useful for quickly iterating on UI without resorting to Interface Builder.</description>
    </item>
    
    <item>
      <title>Swift Terms: arguments, parameters, and labels</title>
      <link>http://ericasadun.com/2017/04/28/swift-terms-arguments-parameters-and-labels</link>
      <pubDate>Sat, 29 Apr 2017 06:47:07 +0000</pubDate>
      
      <description>Erica Sadun attempts to refine Swift function terminology. She looks at the arguments and labels used at function call sites, and the parameters used in function declarations.</description>
    </item>
    
    <item>
      <title>SwiftShield - Swift Code Obfuscator</title>
      <link>https://github.com/rockbruno/swiftshield</link>
      <pubDate>Fri, 28 Apr 2017 19:03:12 +0000</pubDate>
      
      <description>Bruno Rocha has released SwiftShield, an interesting tool which generates irreversible, encrypted names for your iOS project&#39;s objects. The goal here is to protect your app from tools that reverse engineer iOS apps.</description>
    </item>
    
    <item>
      <title>Time traveling in Swift unit tests</title>
      <link>https://medium.com/@johnsundell/time-traveling-in-swift-unit-tests-583a2c3ce85b</link>
      <pubDate>Fri, 28 Apr 2017 07:45:18 +0000</pubDate>
      
      <description>Writing tests against code that relies on dates can be tricky. In this short post, John Sundell looks at how we can test such code in a simple and fun way, based on what he calls &#34;time traveling&#34;.</description>
    </item>
    
    <item>
      <title>Swift String Cheat Sheet</title>
      <link>https://useyourloaf.com/blog/swift-string-cheat-sheet</link>
      <pubDate>Thu, 27 Apr 2017 07:56:41 +0000</pubDate>
      
      <description>Useful String cheat sheet from Use You Loaf. The ever-evolving Swift String API if fully documented here with examples.</description>
    </item>
    
    <item>
      <title>Katan - Swift playground with a micro web server</title>
      <link>https://github.com/marciok/katan</link>
      <pubDate>Wed, 26 Apr 2017 12:21:39 +0000</pubDate>
      
      <description>Cool playground from Marcio Klepacz which aims to  demonstrate the basics steps required to create a web server in Swift. It&#39;s basically a micro web server which replies &#34;Hello world!&#34; to every request.</description>
    </item>
    
    <item>
      <title>Swift Source Compatibility Test Suite</title>
      <link>https://swift.org/blog/swift-source-compatibility-test-suite</link>
      <pubDate>Wed, 26 Apr 2017 12:14:50 +0000</pubDate>
      
      <description>This is an awesome, community-driven project released as part of an effort to maintain source compatibility in future Swift releases. Open-source project owners can submit projects which will then be built by Swift&#39;s continuous integration system. The goal is to monitor Swift compiler-related pull request builds, and catch any source compatibility regressions.</description>
    </item>
    
    <item>
      <title>Tail Call Elimination in iOS</title>
      <link>https://medium.com/the-traveled-ios-developers-guide/tail-call-elimination-in-ios-7a5f491e4273</link>
      <pubDate>Tue, 25 Apr 2017 10:44:19 +0000</pubDate>
      
      <description>Jordan Morgan with an nice explanation of the compiler optimization that is tail call elimination. I was not too familiar with this particular optimization so it was great to see it explained in Swift.</description>
    </item>
    
    <item>
      <title>Swift Evolution iOS app</title>
      <link>https://itunes.apple.com/ie/app/evolution-app/id1210898168?mt=8</link>
      <pubDate>Mon, 24 Apr 2017 15:59:16 +0000</pubDate>
      
      <description>Thiago Holanda has released Evolution, a useful mobile app to follow Swift Evolution on your iOS device. It contains all the features you need to keep up to date like filtering of proposals, and information on the authors and reviewers.</description>
    </item>
    
    <item>
      <title>Swift enums are sum types, and that makes them very interesting</title>
      <link>https://mislavjavor.github.io/2017-04-19/Swift-enums-are-sum-types.-That-makes-them-very-interesting</link>
      <pubDate>Sun, 23 Apr 2017 18:07:51 +0000</pubDate>
      
      <description>Mislav Javor with an explanation of the Algebraic product and sum types in terms of Swift struct and enum types. He demonstrates that enums being sum types makes them particularly interesting. Simple examples mean no PhD in mathematics is required!</description>
    </item>
    
    <item>
      <title>Stopping the Swift weak-strong closure dance</title>
      <link>http://merowing.info/2017/04/stop-weak-strong-dance</link>
      <pubDate>Sun, 23 Apr 2017 11:40:16 +0000</pubDate>
      
      <description>Short article from Krzysztof Zablocki detailing a nice way to avoid the common weak-strong boilerplate code that accompanies using object references in closures. Included is a 1-file µframework (microframework) which accomplishes this.</description>
    </item>
    
    <item>
      <title>SE-1069: Improve interactions between private declarations and extensions</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0169-improve-interaction-between-private-declarations-and-extensions.md</link>
      <pubDate>Sun, 23 Apr 2017 09:54:45 +0000</pubDate>
      
      <description>I&#39;m very happy to see this Swift evolution proposal accepted. The private access modifier in Swift 4 will have a slightly wider scope, and become more usable. With this, extensions to a type declared within the same file will have access to private members. It&#39;s a change which further supports the idea that type extensions should be used as  a code-organization tool.</description>
    </item>
    
    <item>
      <title>Reduce Swift build times and get home faster 😃</title>
      <link>https://speakerdeck.com/yuseinishiyama/reduce-build-times-and-get-home-eariler</link>
      <pubDate>Fri, 21 Apr 2017 15:24:16 +0000</pubDate>
      
      <description>Yusei Nishiyama presented these slides at the recent Code Mobile UK conference. He provides useful tips on improving Swift&#39;s build times based on measurement, improvement, and avoiding building entirely. Included is an awesome tip on using Playgrounds to prototype as you develop.</description>
    </item>
    
    <item>
      <title>Runtime podcast - Swift ABI Stability</title>
      <link>https://itunes.apple.com/ie/podcast/runtime/id1122203945?mt=2&amp;i=1000384342864</link>
      <pubDate>Wed, 19 Apr 2017 13:57:59 +0000</pubDate>
      
      <description>Swift ABI stability. What is it? Why does the community seem to want it so much. Good succinct podcast in which Sam Soffes and Caleb Davenport discuss the reasons why Swift ABI stability is probably not what the community needs right now.</description>
    </item>
    
    <item>
      <title>Haptica - Haptic Feedback Generator</title>
      <link>https://github.com/efremidze/Haptica</link>
      <pubDate>Wed, 19 Apr 2017 11:02:27 +0000</pubDate>
      
      <description>Lasha Efremidze created a useful Swift library which wraps the iOS haptic feedback generator APIs. I really like how simple yet clean the API is.</description>
    </item>
    
    <item>
      <title>SOLID principles applied to Swift</title>
      <link>https://marcosantadev.com/solid-principles-applied-swift</link>
      <pubDate>Tue, 18 Apr 2017 11:02:11 +0000</pubDate>
      
      <description>Marco Santarossa presents some easy to understand Swift code examples based around using SOLID principles to to avoid code fragility, immobility and rigidity.</description>
    </item>
    
    <item>
      <title>Dependency injection via protocol composition</title>
      <link>http://merowing.info/2017/04/using-protocol-compositon-for-dependency-injection</link>
      <pubDate>Mon, 17 Apr 2017 08:19:18 +0000</pubDate>
      
      <description>Krzysztof Zablocki with a nice approach to dependency injection based on protocol composition. Avoid constantly refactoring code callsites while keeping your code testable.</description>
    </item>
    
    <item>
      <title>Reflectable Enums</title>
      <link>https://ijoshsmith.com/2017/04/08/reflectable-enums-in-swift-3/</link>
      <pubDate>Mon, 17 Apr 2017 08:07:13 +0000</pubDate>
      
      <description>What does an enum see when it looks in the Mirror? Josh Smiths demonstrates using Swift&#39;s Reflection API when working with enums cases which have associated values of varying types.</description>
    </item>
    
  </channel>
</rss>
