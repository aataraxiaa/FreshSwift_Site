<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>navigation on Fresh Swift</title>
    <link>https://freshswift.net/tags/navigation/</link>
    <description>Recent content in navigation on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 04 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/navigation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Abstracting Navigation in SwiftUI</title>
      <link>https://obscuredpixels.com/abstracting-navigation-in-swiftui</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>Currently, implementing navigation between SwiftUI views usually means adding navigation logic that is tightly coupled to a View&#39;s body implementation. However, there are things we can do to reduce this coupling, and in this post, Omar demonstrates an approach he uses to decouple navigation logic from Views using some abstraction.</description>
    </item>
    
    <item>
      <title>Navigation in Swift</title>
      <link>https://www.swiftbysundell.com/posts/navigation-in-swift</link>
      <pubDate>Thu, 08 Mar 2018 07:22:27 +0000</pubDate>
      
      <description>John Sundell looks at two approaches to handling navigation between iOS UI components. John first describes the problem caused by using the default navigation approach, before demonstrating how using Coordinator or Navigator types can help.</description>
    </item>
    
  </channel>
</rss>
