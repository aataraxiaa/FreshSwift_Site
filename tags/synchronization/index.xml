<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>synchronization on Fresh Swift</title>
    <link>https://freshswift.net/tags/synchronization/</link>
    <description>Recent content in synchronization on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/synchronization/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Performance: Actor vs queue vs lock</title>
      <link>https://trycombine.com/posts/performance-actor-queue-lock-benchmark/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s Actor type allows only one task to access their mutable state at a time. This provides one method of implementing synchronization, which prevents threads from accessing shared data at the same time. In this short but interesting post, Marin Todorov benchmarks the performance of three methods of implementing synchronization in Swift - Actor, DispatchQueue, and Lock.</description>
    </item>
    
  </channel>
</rss>
