<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>result on Fresh Swift</title>
    <link>https://freshswift.net/tags/result/</link>
    <description>Recent content in result on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/result/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Result in Swift: Getting started with Code Examples</title>
      <link>https://www.avanderlee.com/swift/result-enum-type/</link>
      <pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Available since Swift 5, the Result type allows us to define a success and failure case for a failable operation. In this post, Antoine van der Lee demonstrates some of the lesser-known extensions from the Swift standard library that can be used with this type.</description>
    </item>
    
    <item>
      <title>Swift Evolution - Add Result to the Standard Library</title>
      <link>https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md</link>
      <pubDate>Fri, 23 Nov 2018 14:05:25 +0000</pubDate>
      
      <description>Result is a type commonly used for manual propagation and handling of errors within the Swift community. This Swift evolution proposal seeks to add a generic Result type to the Swift standard library. It‚Äôs currently in review ü§ûüèΩ.</description>
    </item>
    
  </channel>
</rss>
