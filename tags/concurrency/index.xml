<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Fresh Swift</title>
    <link>https://freshswift.net/tags/concurrency/</link>
    <description>Recent content in concurrency on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Throwing and asynchronous Swift properties</title>
      <link>https://www.swiftbysundell.com/articles/throwing-async-properties/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Computed properties that only define a get accessor are read-only. When they also have associated behavior, an effect, they are known as effectful read-only properties. In this post, John Sundell demonstrates how such properties can throw errors and perform asynchronous tasks.</description>
    </item>
    
    <item>
      <title>Bridge from Combine to AsyncSequence - the plan (p. 1)</title>
      <link>https://trycombine.com/posts/combine-async-sequence-1/</link>
      <pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Despite only being released with iOS 13, it seems like Apple&#39;s Combine framework - used for handling asynchronous events - has been overshadowed by the new Swift concurrency model. In this post, Marin Todorov looks at both of these technologies, with the goal of bridging from a Combine Subscriber to an AsyncSequence.</description>
    </item>
    
    <item>
      <title>Swift actors tutorial - a beginner&#39;s guide to thread safe concurrency</title>
      <link>https://theswiftdev.com/swift-actors-tutorial-a-beginners-guide-to-thread-safe-concurrency/</link>
      <pubDate>Sun, 25 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s Actor type allows only one task at a time to access its mutable state, making it safe for use by concurrently executing tasks. Here, Tibor BÃ¶decs from The Swift Dev teaches us how to use this new type to protect our applications from unwanted data-races and memory issues.</description>
    </item>
    
    <item>
      <title>Converting closure-based code into async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Existing Swift APIs often provide asynchronous code execution using callback closures or delegate methods, which allow the caller to define what happens when the asynchronous task has finished. Swift&#39;s new concurrency model enables us to create similar asynchronous APIs using async/await and also provides methods for interfacing async/await with existing callback-based or delegate-based asynchronous APIs. In this post from his Modern Concurrency in Swift series, Andy Ibanez explains what continuations are and shows us how to use them to bridge from closure-based or delegate-based APIs to async/await.</description>
    </item>
    
    <item>
      <title>Cooperative Task Cancellation</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part2/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>This post from Peter Friese from his SwiftUI Concurrency Essentials series focuses on the topic of cooperative task cancellation. Peter provides a SwiftUI example demonstrating why  cancellation is important, and shows us how to use cooperative cancellation in our asynchronous code.</description>
    </item>
    
    <item>
      <title>How Swift runs an async executable</title>
      <link>https://oleb.net/2021/async-program-launch-sequence/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>The @main Swift attribute allows us to specify a particular type as the entry point for beginning program execution. Types marked with @main have a single implicit requirement: declaring a static main method. In this post, Ole Begemann provides some insight into how the Swift runtime executes an async program entry point with the help of the Swift compiler.</description>
    </item>
    
    <item>
      <title>The importance of cooperative cancellation</title>
      <link>https://alejandromp.com/blog/the-importance-of-cooperative-cancellation/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>In the context of concurrent programming, cooperative cancellation refers to a system where parent tasks and child tasks need to cooperate to ensure the correct cancellation of asynchronous tasks. The new Swift concurrency model supports cooperative cancellation, and in this post, Alejandro Martinez explains its importance.</description>
    </item>
    
    <item>
      <title>Getting Started with async/await in SwiftUI</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s new concurrency model continues to be one of the most popular topics amongst the developer community. There have already been many great articles written on the topic, but I still enjoy reading more about it, as it helps cement understanding. In this post, Peter Friese helps us get started with async/await, demonstrating how it interacts with SwiftUI and its latest features.</description>
    </item>
    
    <item>
      <title>Understanding async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s new async/await feature plays a major role in the language&#39;s new concurrency model. In this post, which is part of a series, Andy Ibanez first offers a refresher on some existing concepts before introducing us to async/await.</description>
    </item>
    
    <item>
      <title>Async/Await and the Future of Combine</title>
      <link>https://benscheirman.com/2021/06/async-await-and-the-future-of-combine/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>With the debut of the new Swift Concurrency model at WWWDC this year, it was noticeable how some of its language features appear to be replacements for some of the Combine frameworks features. In this honest post on the topic, Ben Scheirman, who authored an entire course on Combine, gives his take on its future.</description>
    </item>
    
    <item>
      <title>Structured concurrency</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0304-structured-concurrency.md</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>A lot of the sessions at this years&#39; WWDC related to the new concurrency model in Swift. A central part of this model is the concept of structured concurrency, which enables concurrent execution of asynchronous code. The language features are now available in the latest Xcode beta, and this proposal provides lots of background on this major Swift language evolution.</description>
    </item>
    
    <item>
      <title>Concurrency Done Right</title>
      <link>https://kean.blog/post/concurrency#fn:7</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <description>The Swift Concurrency Roadmap details future Swift language features which plan to make concurrent programming in Swift convenient and safe. However, there are already several ways we can add concurrency to our projects, and in this post, Alex Grebenyuk shows us how to do it right.</description>
    </item>
    
    <item>
      <title>Actors are reference types, but why classes?</title>
      <link>https://docs.google.com/document/d/14e3p6yBt1kPrakLcEHV4C9mqNBkNibXIZsozdZ6E71c/edit#</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>The recently announced Swift Concurrency Roadmap includes the proposal of an Actor reference type, similar to a class type. In this whitepaper, Chris Lattner explores the behavior and requirements of actors and proposes that Actor types be modeled as a new kind of nominal reference type in Swift.</description>
    </item>
    
    <item>
      <title>Swift Concurrency Proposal Dependencies</title>
      <link>https://gist.github.com/DougGregor/444575ac67cbd25bfc4b1d4fd241ae93</link>
      <pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift Concurrency Roadmap was recently published, which outlined proposed additions and changes to the language to support concurrent programming. It&#39;s a great read, and very informative. However, if you are looking for a quick overview of the dependencies relating to the concurrency roadmap, this diagram from Doug Gregor is a good place to start.</description>
    </item>
    
    <item>
      <title>What went wrong with the libdispatch. A tale of caution for the future of concurrency.</title>
      <link>https://tclementdev.com/posts/what_went_wrong_with_the_libdispatch.html</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Apple&#39;s Grand Central Dispatch (GCD or libdispatch) provides support for concurrent code execution on multicore hardware. It aims to remove the need for developers to directly manage threads, enabling them to instead think in terms of queues of work. In this very interesting post, Thomas examines some of the problems of using libdispatch, offering words of caution for the future of concurrency in Swift.</description>
    </item>
    
    <item>
      <title>Combine and Swift Concurrency</title>
      <link>https://rhonabwy.com/2020/11/08/combine-and-swift-concurrency/</link>
      <pubDate>Thu, 26 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>The Swift Core Team recently provided an excellent roadmap and series of language proposals outlining the future of concurrent programming in Swift. In this post, Joseph Heck looks at what the roadmap means for the Combine framework and how it might gain from the proposed concurrency concepts.</description>
    </item>
    
    <item>
      <title>Swift Concurrency Roadmap</title>
      <link>https://forums.swift.org/t/swift-concurrency-roadmap/41611</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <description>This post from the official Swift forums outlines the Swift Concurrency Roadmap. The goal of this roadmap is to make concurrent programming in Swift convenient, efficient, and safe. There is a lot to unpack in this post, but it&#39;s definitely worth reading, and there are some great language features planned for the first phase of the roadmap.</description>
    </item>
    
    <item>
      <title>Introducing Swift Atomics</title>
      <link>https://swift.org/blog/swift-atomics/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <description>Atomic operations are operations that run completely independently of other processes and will be fully executed without interruption. In this post on the official Swift blog, Karoy Lorentey from the Swift team announces Swift Atomics, a new open-source Swift package that enables low-level atomic Swift operations.</description>
    </item>
    
    <item>
      <title>Swift globals and static members are atomic and lazily computed</title>
      <link>https://www.jessesquires.com/blog/2020/07/16/swift-globals-and-static-members-are-atomic-and-lazily-computed/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>A lazy stored property in Swift is a property whose initial value is not calculated until the first time it used. This is useful as it allows us to delay the initialization of a property that requires a computationally expensive setup until that property is actually needed. In this post, Jesse Squires reminds us that Swift globals and static members are also lazily initialized, and he explains how the concept of atomicity is distinct from the concept of thread-safety.</description>
    </item>
    
    <item>
      <title>Static Thread Safety</title>
      <link>https://forums.swift.org/t/static-thread-safety/37542</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>This is an interesting Swift evolution draft proposal. In it, Guy Brooker proposes some small language changes which would allow the Swift compiler to spot basic concurrent programming errors. I like the syntax Guy proposes for specifying execution context.</description>
    </item>
    
    <item>
      <title>Atomic Properties in Swift</title>
      <link>http://www.vadimbulavin.com/atomic-properties/</link>
      <pubDate>Tue, 17 Jul 2018 13:28:30 +0000</pubDate>
      
      <description>Vadim Bulavin demonstrates how we can use locking APIs available in Apple frameworks to implement atomic properties in Swift. Vadim first describes the core concepts relating to concurrency and atomic properties, before providing code examples of Swift atomic properties.</description>
    </item>
    
    <item>
      <title>Basics of parallel programming with Swift</title>
      <link>https://medium.com/flawless-app-stories/basics-of-parallel-programming-with-swift-93fee8425287</link>
      <pubDate>Sun, 28 Jan 2018 11:42:29 +0000</pubDate>
      
      <description>This is a great post from Jan Olbrich in which he covers the basics of concurrency and parallel programming in Swift. Jan starts by describing the difference between concurrency and parallelism, and then walks us through the various mechanisms available to us in Swift.</description>
    </item>
    
    <item>
      <title>Concurrency in Swift: One approach</title>
      <link>https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782</link>
      <pubDate>Sun, 17 Sep 2017 10:46:34 +0000</pubDate>
      
      <description>This is a great detailed post by Chris Lattner in which he describes one approach to concurrency in Swift. Chris looks at the current state of concurrency in Swift, outlines his vision of where we want to get to, and then presents how we can get there using an async/await model.</description>
    </item>
    
    <item>
      <title>Understanding Operation and OperationQueue in Swift</title>
      <link>http://agostini.tech/2017/07/30/understanding-operation-and-operationqueue-in-swift/</link>
      <pubDate>Tue, 08 Aug 2017 07:32:03 +0000</pubDate>
      
      <description>Dejan Agostini explains what Operations and OperationQueues are, and provides Swift examples of how we can use them. This is a good introductory article on implementing concurrency on iOS.</description>
    </item>
    
    <item>
      <title>All about Concurrency in Swift - Part 1: The Present</title>
      <link>https://www.uraimo.com/2017/05/07/all-about-concurrency-in-swift-1-the-present/</link>
      <pubDate>Sun, 14 May 2017 17:57:39 +0000</pubDate>
      
      <description>Umberto Raimondi with the first in a series of articles on concurrency in Swift. This is an excellently detailed look at what we have at our disposal, covering everything from locks and threads, to Grand Central Dispatch.</description>
    </item>
    
  </channel>
</rss>
