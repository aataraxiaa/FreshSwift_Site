<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dynamic on Fresh Swift</title>
    <link>https://freshswift.net/tags/dynamic/</link>
    <description>Recent content in dynamic on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/dynamic/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Private APIs, Objective-C runtime, and Swift</title>
      <link>https://medium.com/@victor.pavlychko/private-apis-objective-c-runtime-and-swift-ceaeefbb6e48</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Objective-C and Swift can be used together, and it&#39;s still very common for apps and projects to contain a mix of both. Calling public Objective-C APIs from Swift involves exposing the APIs via a bridging header. However, calling private, or Swift-unavailable, Objective-C APIs from our Swift code is also possible, thanks to Objective-C&#39;s dynamic nature. In this post, Victor Pavlychko focuses on accessing such APIs using the Objective-C runtime.</description>
    </item>
    
    <item>
      <title>The power of key paths in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-key-paths-in-swift</link>
      <pubDate>Sun, 04 Nov 2018 16:00:53 +0000</pubDate>
      
      <description>In this entry of his regular series on Swift, John Sundell demonstrates the power of Swift key paths, a dynamic feature introduced with Swift 4. I particularly like the section on converting key paths to functions, allowing them to be used in place of completion closures.</description>
    </item>
    
    <item>
      <title>Thoughts on @dynamicMemberLookup</title>
      <link>https://oleb.net/blog/2018/06/dynamic-member-lookup/</link>
      <pubDate>Mon, 02 Jul 2018 17:05:08 +0000</pubDate>
      
      <description>Ole Begemann shares his thoughts on a controversial new feature of Swift 4.2, dynamic member lookup. Ole demonstrates some use cases for the feature, before coming to some conclusions regarding itâ€™s usefulness.</description>
    </item>
    
    <item>
      <title>How to use Dynamic Member Lookup in Swift</title>
      <link>https://www.hackingwithswift.com/articles/55/how-to-use-dynamic-member-lookup-in-swift</link>
      <pubDate>Mon, 05 Mar 2018 17:16:14 +0000</pubDate>
      
      <description>Paul Hudson shows us how to use an upcoming feature of Swift - dynamic member lookup. This is something which will allow us to use Swift in a similar way to languages such as PHP and Python.</description>
    </item>
    
    <item>
      <title>@objc and dynamic</title>
      <link>https://swiftunboxed.com/interop/objc-dynamic/</link>
      <pubDate>Thu, 11 Jan 2018 09:07:12 +0000</pubDate>
      
      <description>This post from Greg Heo examines Objective-C runtime visibility and dynamic dispatch. Greg does a great job of explaining how these work, and provides lots of Swift Intermediate Language examples to help us understand.</description>
    </item>
    
  </channel>
</rss>
