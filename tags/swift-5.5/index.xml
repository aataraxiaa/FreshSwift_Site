<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift 5.5 on Fresh Swift</title>
    <link>https://freshswift.net/tags/swift-5.5/</link>
    <description>Recent content in swift 5.5 on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 24 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/swift-5.5/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Converting closure-based code into async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Existing Swift APIs often provide asynchronous code execution using callback closures or delegate methods, which allow the caller to define what happens when the asynchronous task has finished. Swift&#39;s new concurrency model enables us to create similar asynchronous APIs using async/await and also provides methods for interfacing async/await with existing callback-based or delegate-based asynchronous APIs. In this post from his Modern Concurrency in Swift series, Andy Ibanez explains what continuations are and shows us how to use them to bridge from closure-based or delegate-based APIs to async/await.</description>
    </item>
    
    <item>
      <title>Cooperative Task Cancellation</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part2/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>This post from Peter Friese from his SwiftUI Concurrency Essentials series focuses on the topic of cooperative task cancellation. Peter provides a SwiftUI example demonstrating why  cancellation is important, and shows us how to use cooperative cancellation in our asynchronous code.</description>
    </item>
    
    <item>
      <title>How Swift runs an async executable</title>
      <link>https://oleb.net/2021/async-program-launch-sequence/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>The @main Swift attribute allows us to specify a particular type as the entry point for beginning program execution. Types marked with @main have a single implicit requirement: declaring a static main method. In this post, Ole Begemann provides some insight into how the Swift runtime executes an async program entry point with the help of the Swift compiler.</description>
    </item>
    
    <item>
      <title>The importance of cooperative cancellation</title>
      <link>https://alejandromp.com/blog/the-importance-of-cooperative-cancellation/</link>
      <pubDate>Mon, 19 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>In the context of concurrent programming, cooperative cancellation refers to a system where parent tasks and child tasks need to cooperate to ensure the correct cancellation of asynchronous tasks. The new Swift concurrency model supports cooperative cancellation, and in this post, Alejandro Martinez explains its importance.</description>
    </item>
    
    <item>
      <title>Getting Started with async/await in SwiftUI</title>
      <link>https://peterfriese.dev/swiftui-concurrency-essentials-part1/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift&#39;s new concurrency model continues to be one of the most popular topics amongst the developer community. There have already been many great articles written on the topic, but I still enjoy reading more about it, as it helps cement understanding. In this post, Peter Friese helps us get started with async/await, demonstrating how it interacts with SwiftUI and its latest features.</description>
    </item>
    
    <item>
      <title>Understanding async/await in Swift</title>
      <link>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5&#39;s new async/await feature plays a major role in the language&#39;s new concurrency model. In this post, which is part of a series, Andy Ibanez first offers a refresher on some existing concepts before introducing us to async/await.</description>
    </item>
    
    <item>
      <title>What&#39;s new in Swift 5.5?</title>
      <link>https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <description>Swift 5.5, available in any Xcode 13 beta, includes a huge number of changes to the language. At WWDC this year, a lot of these changes were covered by session videos. However, despite being published before WWDC, this in-depth article from Paul Hudson is still worth a read. Paul walks through most of the language changes introduced in Swift 5.5, with code samples for each. Lot&#39;s to cover here.</description>
    </item>
    
    <item>
      <title>Async/Await and the Future of Combine</title>
      <link>https://benscheirman.com/2021/06/async-await-and-the-future-of-combine/</link>
      <pubDate>Wed, 30 Jun 2021 00:00:00 +0000</pubDate>
      
      <description>With the debut of the new Swift Concurrency model at WWWDC this year, it was noticeable how some of its language features appear to be replacements for some of the Combine frameworks features. In this honest post on the topic, Ben Scheirman, who authored an entire course on Combine, gives his take on its future.</description>
    </item>
    
  </channel>
</rss>
