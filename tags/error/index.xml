<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>error on Fresh Swift</title>
    <link>https://freshswift.net/tags/error/</link>
    <description>Recent content in error on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/error/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typed throws</title>
      <link>https://forums.swift.org/t/typed-throws/39660</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>Swift provides support for throwing, catching, propagating, and manipulating recoverable errors. To indicate that a function or method can throw an error, we add the throws keyword to the declaration. In this very detailed Swift evolution pitch, Jorge proposes adding the ability to specify the type of an error that a function will throw.</description>
    </item>
    
    <item>
      <title>Benefits of using throwing functions (try) - Swift&#39;s most underrated feature?</title>
      <link>https://swiftrocks.com/benefits-of-throwing-functions-try-swift-underrated-feature</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <description>Based on his experience with one of his own projects, Bruno Rocha makes his case for why he thinks throwing functions are Swift&#39;s most underrated feature. Bruno lists a number of benefits, providing code examples for each.</description>
    </item>
    
    <item>
      <title>Open Sourcing Validated</title>
      <link>https://www.pointfree.co/blog/posts/14-open-sourcing-validated</link>
      <pubDate>Tue, 28 Aug 2018 12:25:38 +0000</pubDate>
      
      <description>The point free team are open sourcing a new Swift library for handling errors. Validated allows us to accumulate errors into a single type, useful for when we want to know all the reasons why something went wrong.</description>
    </item>
    
    <item>
      <title>Total programming in Swift</title>
      <link>https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74</link>
      <pubDate>Thu, 07 Dec 2017 10:38:56 +0000</pubDate>
      
      <description>André Videla describes what a total program is, and examines Swift in this context. André shows us how Swift uses its type system to encourage totality - code that won’t crash or get stuck in an infinite loop.</description>
    </item>
    
    <item>
      <title>Moving Safety into Types</title>
      <link>http://www.figure.ink/blog/2017/10/15/moving-safety-into-types</link>
      <pubDate>Wed, 01 Nov 2017 03:51:23 +0000</pubDate>
      
      <description>Joshua Emmons demonstrates how we can use the Swift type checker to better handle thrown errors. This is a really nice approach to isolation error handling to the point of creation, rather than the point of use.</description>
    </item>
    
    <item>
      <title>Xcode 9.1 Improves Display of Fatal Errors</title>
      <link>https://swift.org/blog/xcode-9-1-improves-display-of-fatal-errors/</link>
      <pubDate>Mon, 09 Oct 2017 08:46:44 +0000</pubDate>
      
      <description>Xcode 9.1 significantly improves it’s user feedback when a Swift program terminates due to fatal error. Prior to Xcode 9.1, when a program terminated due to fatal error, the user was often left confused by the non-descriptive error message displayed. With the latest beta, Xcode will now display the reason for the fatal error termination. A nice improvement.</description>
    </item>
    
    <item>
      <title>Swift Error Handling Implementation</title>
      <link>https://www.mikeash.com/pyblog/friday-qa-2017-08-25-swift-error-handling-implementation.html</link>
      <pubDate>Tue, 19 Sep 2017 07:39:56 +0000</pubDate>
      
      <description>Mike Ash with another entry in his great Friday Q&amp;A series. In this post, Mike looks at how Swift error handling works on the inside. He looks at error handling in both Swift 3 and Swift 4, and then compares Swift error handling to exception handling in other languages. Very interesting.</description>
    </item>
    
    <item>
      <title>Matching NSErrors</title>
      <link>http://www.figure.ink/blog/2017/7/24/update-matching-nserrors</link>
      <pubDate>Wed, 02 Aug 2017 07:36:26 +0000</pubDate>
      
      <description>Joshua Emmons shows us how to easily pattern match NSErrors in Swift. It transpires that since Swift 3, NSErrors are bridged to Swift error structs, and when combined with the pattern matching operator (~=), this allows us to deal with NSErrors in a much more declarative way.</description>
    </item>
    
    <item>
      <title>Errors On The Server</title>
      <link>http://khanlou.com/2017/07/errors-on-the-server/</link>
      <pubDate>Sun, 09 Jul 2017 17:51:03 +0000</pubDate>
      
      <description>Soroush Khanlou looks at how to best handle errors when writing server-side Swift, in this case Vapor. I really like his point about making the correct way to write code the same as the nice way the write code, therefore removing the need for trade-offs between the two.</description>
    </item>
    
  </channel>
</rss>
