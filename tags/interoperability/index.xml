<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interoperability on Fresh Swift</title>
    <link>https://freshswift.net/tags/interoperability/</link>
    <description>Recent content in interoperability on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Mar 2018 11:29:32 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/interoperability/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Circular References Between Swift and Objective-C</title>
      <link>https://cjwirth.com/tech/circular-references-swift-objc</link>
      <pubDate>Sat, 03 Mar 2018 11:29:32 +0000</pubDate>
      
      <description>Caesar Wirth describes some of the challenges that arise when working in a mixed Swift and Objective-C codebase, and shows us how he deals with them. Some useful advice here. .</description>
    </item>
    
    <item>
      <title>Friday Q&amp;A - Swift.Unmanaged</title>
      <link>https://mikeash.com/pyblog/friday-qa-2017-08-11-swiftunmanaged.html</link>
      <pubDate>Tue, 05 Sep 2017 07:43:49 +0000</pubDate>
      
      <description>One of Swift’s great strengths is how well it interoperates with C code. In one of his regular Friday Q&amp;A posts, Mike Ash looks at a key component of this interoperability - Swift’s Unmanaged struct. As Mike shows us, the Unmanaged struct is the API we need when we want to convert Swift object references to and from raw C pointers.</description>
    </item>
    
  </channel>
</rss>
