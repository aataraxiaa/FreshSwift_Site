<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scrollview on Fresh Swift</title>
    <link>https://freshswift.net/tags/scrollview/</link>
    <description>Recent content in scrollview on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 03 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/scrollview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SwiftUI ScrollView offset</title>
      <link>https://fivestars.blog/swiftui/scrollview-offset.html</link>
      <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>When using scrollable view types, it&#39;s common to want to access the content offset. The content offset is the point at which the origin of the content view is offset from the origin of the scroll view. While UIKit&#39;s UIScrollView provides contentOffset, allowing us to read/write to this property, SwiftUI&#39;s ScrollView does not provide such a property. Instead, SwiftUI provides the ScrollViewReader type, which can be used in place of direct access to a content offset property. However, there might still be times when we want to directly access the content offset of a SwiftUI ScrollView, and in this post, Federico Zanetello shows us how to do that.</description>
    </item>
    
    <item>
      <title>SwiftUI: Bridging UIKit with ScrollViewReader and DragGesture</title>
      <link>https://www.fivestars.blog/code/section-title-index-swiftui.html</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI includes a ScrollView type, which is similar in function to its UIKit counterpart. However, until recently, SwiftUI was unable to programmatically scroll to a particular offset in the ScrollView. With iOS 14, this is now possible, and in this post, Federico Zanetello uses this new ability, together with DragGesture, to implement his own version of an index list.</description>
    </item>
    
    <item>
      <title>Easier Scrolling With Layout Guides</title>
      <link>https://useyourloaf.com/blog/easier-scrolling-with-layout-guides/</link>
      <pubDate>Thu, 30 Aug 2018 12:36:09 +0000</pubDate>
      
      <description>Keith Harrison from UseYourLoaf demonstrates how we can use layout guides to configure UIScrollView constraints. Swift code examples are provided.</description>
    </item>
    
  </channel>
</rss>
