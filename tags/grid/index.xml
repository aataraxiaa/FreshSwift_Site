<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grid on Fresh Swift</title>
    <link>https://freshswift.net/tags/grid/</link>
    <description>Recent content in grid on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/grid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flexible layouts in SwiftUI</title>
      <link>https://fivestars.blog/swiftui/flexible-swiftui.html</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>This year SwiftUI gained two new container view types - LazyVGrid and LazyHGrid - which provide grid-style layouts with a reasonable amount of flexibility. In this post, Federico Zanetello shows us how we can build a custom grid-style view, aiming to provide an even more powerful API than is available in these native SwiftUI types.</description>
    </item>
    
    <item>
      <title>Implementing Grid Layout in SwiftUI</title>
      <link>https://exyte.com/blog/implementing-grid-layout-in-swiftui</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>SwiftUI&#39;s LazyVGrid and LazyHGrid types, introduced in iOS 14, provide flexible grid layouts. In this post from the team at exyte, Denis Obukhov and Nikita Afonasov look at what a grid layout is, what features it has, and describe how their custom grid implementation differs from Apple&#39;s.</description>
    </item>
    
    <item>
      <title>Mastering grids in SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/08/mastering-grids-in-swiftui/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Two new container views - LazyVGrid and LazyHGrid - have been added to SwiftUI in iOS 14. These new container views arrange their child views in a grid that grows either vertically or horizontally, creating items only as needed. In this post, Majid demonstrates how we can create complex and adaptive layouts using these incredibly powerful new types.</description>
    </item>
    
  </channel>
</rss>
