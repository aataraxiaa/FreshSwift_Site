<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xcode12 on Fresh Swift</title>
    <link>https://freshswift.net/tags/xcode12/</link>
    <description>Recent content in xcode12 on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/xcode12/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using MapKit with SwiftUI</title>
      <link>https://swiftwithmajid.com/2020/07/29/using-mapkit-with-swiftui/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <description>Apple continues to encourage the adoption of SwiftUI by creating more SwiftUI integrations for UIKit frameworks. In this post, Majid Jabrayilov describes the functionality available in the new SwiftUI Map type, which can be used to display MapKit maps in our SwiftUI apps. It&#39;s great to see more and more SwiftUI types like this, avoiding the need to mix SwiftUI and UIKit implementations.</description>
    </item>
    
    <item>
      <title>How SwiftUI can now be used to build entire iOS apps</title>
      <link>https://wwdcbysundell.com/2020/building-entire-apps-with-swiftui/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>At this year&#39;s WWDC20, SwiftUI received some very impressive updates. One of them is the ability to create an entry point for an app without needing to rely on UIKit/AppKit. What this means is that we can now build an entire app using SwiftUI. In this post, John Sundell shows us how simple it is to build such an app.</description>
    </item>
    
    <item>
      <title>Add custom SwiftUI view to View Library with LibraryContentProvider</title>
      <link>https://sarunw.com/posts/add-custom-swiftui-view-to-view-library/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate>
      
      <description>Xcode&#39;s library allows us to quickly access commonly used SwiftUI system elements such as views and modifiers. New to iOS 14 and Xcode 12 is the ability to add our own custom SwiftUI views to the library. This post from Sarun shows us how to do it.</description>
    </item>
    
  </channel>
</rss>
