<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>refactoring on Fresh Swift</title>
    <link>https://freshswift.net/tags/refactoring/</link>
    <description>Recent content in refactoring on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 24 Aug 2018 10:25:23 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/refactoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Similar Prefixes</title>
      <link>http://khanlou.com/2018/08/similar-prefixes/</link>
      <pubDate>Fri, 24 Aug 2018 10:25:23 +0000</pubDate>
      
      <description>Soroush Khanlou shows us how to identify the code smell known as a data clump. Soroush’s post is based on an idea discussed in Martin Fowler’s seminal 1999 book Refactoring.</description>
    </item>
    
    <item>
      <title>Refactoring Swift code for testability</title>
      <link>https://www.swiftbysundell.com/posts/refactoring-swift-code-for-testability</link>
      <pubDate>Sun, 22 Jul 2018 10:38:08 +0000</pubDate>
      
      <description>John Sundell describes pure functions and dependency injection - two techniques we can apply when refactoring Swift code to make it more testable.</description>
    </item>
    
    <item>
      <title>Swift Tip: Refactoring with Deprecations</title>
      <link>https://www.objc.io/blog/2018/06/26/refactoring-with-deprecations/</link>
      <pubDate>Fri, 29 Jun 2018 10:32:32 +0000</pubDate>
      
      <description>This Swift tip from the objc.io team describes how we can use deprecation annotations when refactoring code to ensure we leave no dead code behind.</description>
    </item>
    
    <item>
      <title>Functional Refactoring in Swift</title>
      <link>https://benscheirman.com/2018/02/functional-refactoring-in-swift/</link>
      <pubDate>Sat, 19 May 2018 12:43:18 +0000</pubDate>
      
      <description>Ben Scheirman explains what we need to consider when we begin refactoring our code to be more functional. Ben provides an example which demonstrates how we can iterate on our refactoring to find the best version.</description>
    </item>
    
    <item>
      <title>Swift Local Refactoring</title>
      <link>https://swift.org/blog/swift-local-refactoring/</link>
      <pubDate>Tue, 29 Aug 2017 07:36:28 +0000</pubDate>
      
      <description>Great post on the official Swift blog by Xi Ge in which he looks at the new Swift refactoring engine available in Xcode 9. This new engine can perform both local and global transformations of our code, and the logic behind local refactoring actions is implemented entirely  in the Swift compiler and SourceKit, and is open-source. This is great as it means we can contribute refactoring actions. Xi examines the kinds of local refactoring actions available and shows us how we can get started adding our own.</description>
    </item>
    
    <item>
      <title>Refactoring Reveals Truths</title>
      <link>http://khanlou.com/2017/07/refactoring-reveals-truths/</link>
      <pubDate>Fri, 21 Jul 2017 08:13:36 +0000</pubDate>
      
      <description>This is a really great post from Soroush Khanlou in which he uses a Swift function to demonstrate what can be learned from refactoring a piece of code. What starts off as a relatively verbose algorithm soon becomes a clean one line solution, making it much easier to understand and, as Soroush writes, revealing the algorithms beautiful internal symmetry.</description>
    </item>
    
    <item>
      <title>Apple open sources key Xcode refactoring components</title>
      <link>https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20170605/004751.html</link>
      <pubDate>Tue, 13 Jun 2017 07:49:07 +0000</pubDate>
      
      <description>This year at WWDC 2017, Apple delivered Xcode 9 beta. This release includes a new refactoring feature that supports the refactoring of Swift. This was great news and something the community eagerly awaited. Shortly after, Ted Kremenek took to the message boards to make another announcement - Apple will be open sourcing key parts of the engine that power the Xcode file-level transformations. It’s always great to see an organization open sourcing, and even more so when it comes to tooling.</description>
    </item>
    
  </channel>
</rss>
