<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>enums on Fresh Swift</title>
    <link>https://freshswift.net/tags/enums/</link>
    <description>Recent content in enums on Fresh Swift</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://freshswift.net/tags/enums/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using ‘@unknown default’ within switch statements</title>
      <link>https://www.swiftbysundell.com/articles/using-an-unknown-default-case-within-a-switch-statement/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      
      <description>In Swift 4.2, enums defined in the standard library are either frozen or non-frozen. A frozen enum is one that will never get a new case. In this post, John Sundell shows us how to handle non-frozen enums in Switch statements.</description>
    </item>
    
    <item>
      <title>Codable synthesis for enums with associated values</title>
      <link>https://github.com/apple/swift-evolution/blob/main/proposals/0295-codable-synthesis-for-enums-with-associated-values.md</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <description>Swift 4 introduced support for automatically synthesizing conformance to the Encodable and Decodable protocols. It&#39;s a useful feature, most likely used by any application which handles JSON-based network requests. This Swift evolution pitch from Dario Rexin proposes extending auto-synthesis of these conformances to enums with associated values. I&#39;m sure we will see this in an upcoming Swift version.</description>
    </item>
    
    <item>
      <title>3 lesser-known ways of using Swift enums</title>
      <link>https://sarunw.com/posts/lesser-known-ways-of-using-swift-enums/</link>
      <pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate>
      
      <description>An enumeration defines a common type for a group of related values. Enumerations in Swift are first-class types, and they adopt many features traditionally only available by class types. In this post, Sarun Wongpatcharapakorn introduces us to some enum use cases in Swift that we might not be aware of.</description>
    </item>
    
    <item>
      <title>Switching with Associated Values</title>
      <link>https://www.objc.io/blog/2018/09/04/switching-with-associated-values/</link>
      <pubDate>Mon, 10 Sep 2018 11:50:30 +0000</pubDate>
      
      <description>In this post the objc.io, we learn how to use a computed property to reduce the complexity of switching on enums with associated values. Nice tip!</description>
    </item>
    
    <item>
      <title>Enum iterations in Swift 4.2</title>
      <link>https://www.swiftbysundell.com/posts/enum-iterations-in-swift-42</link>
      <pubDate>Fri, 31 Aug 2018 08:51:31 +0000</pubDate>
      
      <description>John Sundell looks at CaseIterable, a protocol introduced in Swift 4.2. John describes what CaseIterable means, and demonstrates how we can use it to reduce boilerplate code.</description>
    </item>
    
    <item>
      <title>Polymorphic methods in enums</title>
      <link>https://forums.swift.org/t/polymorphic-methods-in-enums/15093/3</link>
      <pubDate>Mon, 13 Aug 2018 13:28:58 +0000</pubDate>
      
      <description>This is an interesting discussion on the official Swift forums. It was started by Pablo Bendersky who would like to be able to add extensions on enums constrained by the enum case. I can see the value in this.</description>
    </item>
    
    <item>
      <title>Enumerating enum cases in Swift</title>
      <link>https://oleb.net/blog/2018/06/enumerating-enum-cases/</link>
      <pubDate>Sun, 17 Jun 2018 12:15:35 +0000</pubDate>
      
      <description>New in Swift 4.2 is the ability to specify that the compiler should generate a collection of an enum’s cases. In this post, Ole Begemann first shows us how we can use the new CaseIterable protocol with enums, before looking at how we can make other types  CaseIterable.</description>
    </item>
    
    <item>
      <title>SE-0155 Status Update</title>
      <link>https://forums.swift.org/t/se-0155-status-update/13154</link>
      <pubDate>Fri, 08 Jun 2018 01:28:10 +0000</pubDate>
      
      <description>The Swift evolution proposal to Normalize Enum Case Representation is partly implemented, and this Swift Forums post lists the status for each goal of the proposal. This is a worthwhile proposal, with some nice improvements to the language, so it’s great to see progress being made.</description>
    </item>
    
    <item>
      <title>Enums And Optionals</title>
      <link>http://khanlou.com/2018/04/enums-and-optionals/</link>
      <pubDate>Mon, 16 Apr 2018 12:33:41 +0000</pubDate>
      
      <description>In this post, Soroush Khanlou explains how adding an extra case to an enum can replace the usage of optional enum values. As Soroush says, simplicity is king, and I agree that it’s worth taking the time to think about whether an extra optional case makes sense.</description>
    </item>
    
    <item>
      <title>Swift Tip: Codable Enums</title>
      <link>https://www.objc.io/blog/2018/01/23/codable-enums/?utm_campaign=Revue%20newsletter&amp;utm_medium=Swift%20Weekly%20Newsletter%20Issue%20104&amp;utm_source=Swift%20Weekly</link>
      <pubDate>Mon, 29 Jan 2018 20:23:11 +0000</pubDate>
      
      <description>In this post from Objc.io, we learn how to add Codable conformance to enums which have associated types. A very useful tip.</description>
    </item>
    
    <item>
      <title>When Not to Use an Enum</title>
      <link>http://matt.diephouse.com/2017/12/when-not-to-use-an-enum/</link>
      <pubDate>Sun, 10 Dec 2017 15:03:32 +0000</pubDate>
      
      <description>Matt Diephouse shows us when not to use an enum. Matt looks at a recent post from John Sundell, in which John used enums to build an app analytics API. Matt argues that structs would be better suited to build such an API, and explains why.</description>
    </item>
    
    <item>
      <title>Why Dictionary sometimes encodes itself as an array </title>
      <link>https://oleb.net/blog/2017/12/dictionary-codable-array/</link>
      <pubDate>Wed, 06 Dec 2017 14:22:57 +0000</pubDate>
      
      <description>Oleb Begemann with a very interesting post on why Swift dictionaries sometimes encode themselves as arrays when using Swift 4’s Codable protocols. I wasn’t aware of this limitation, and as he points out, there is no clean and simple fix for it.</description>
    </item>
    
    <item>
      <title>Building an enum-based analytics system in Swift</title>
      <link>https://www.swiftbysundell.com/posts/building-an-enum-based-analytics-system-in-swift?utm_campaign=Revue%20newsletter&amp;utm_medium=Swift%20Weekly%20Newsletter%20Issue%2098&amp;utm_source=Swift%20Weekly</link>
      <pubDate>Tue, 05 Dec 2017 09:41:47 +0000</pubDate>
      
      <description>John Sundell demonstrates an approach to adding app analytics based on enums. It’s a nice idea, allowing us to add analytic events to our code without being tied to any particular analytics provider.</description>
    </item>
    
    <item>
      <title>Why Swift Enums with Associated Values Cannot Have a Raw Value</title>
      <link>https://medium.com/@PhiJay/why-swift-enums-with-associated-values-cannot-have-a-raw-value-21e41d5ec11</link>
      <pubDate>Mon, 27 Nov 2017 09:10:29 +0000</pubDate>
      
      <description>In this post Mischa Hildebrand explains why Swift enums with associated values cannot also have a raw value. Even though we may be familiar with this limitation, it’s interesting to think about the reasoning behind it.</description>
    </item>
    
    <item>
      <title>The power of switch statements in Swift</title>
      <link>https://www.swiftbysundell.com/posts/the-power-of-switch-statements-in-swift</link>
      <pubDate>Sun, 08 Oct 2017 11:44:27 +0000</pubDate>
      
      <description>John Sundell looks at Swift switch statements, and demonstrates how versatile and powerful they can be, especially when combined with types defined using enums, tuples, and sets.</description>
    </item>
    
    <item>
      <title>Codable Enums</title>
      <link>https://littlebitesofcocoa.com/318-codable-enums</link>
      <pubDate>Sat, 07 Oct 2017 14:30:21 +0000</pubDate>
      
      <description>Swift 4’s Codable protocols make it very easy to encode and decode conforming types, even working with enums when the enums rawValue also conforms to Codable. However, things get a little bit more complicated when dealing with enums which have associated values. This post from Little Bites of Cocoa shows us how we can handle such a situation.</description>
    </item>
    
    <item>
      <title>Swift evolution - Non-Exhaustive Enums</title>
      <link>https://github.com/jrose-apple/swift-evolution/blob/non-exhaustive-enums/proposals/nnnn-non-exhaustive-enums.md</link>
      <pubDate>Tue, 26 Sep 2017 13:56:09 +0000</pubDate>
      
      <description>I really like this Swift evolution proposal from Jordan Rose. It aims to distinguish between enums which are exhaustive (they will never get new cases), and enums which are non-exhaustive, and to ensure that clients handle any future cases when dealing with the latter.</description>
    </item>
    
    <item>
      <title>Listing all cases in an Swift enum</title>
      <link>https://medium.com/@londeix/listing-all-cases-in-an-enum-3b057f2c1432</link>
      <pubDate>Mon, 18 Sep 2017 08:29:57 +0000</pubDate>
      
      <description>Swift enumerations allows us to define a common type for a group of related values, and are a great way to keep our code organized and type-safe. However, one feature missing is the ability to easily list all available cases for an enum. In this post, Bartosz Polaczyk shows us how we can define our enums in such a way that that this is possible. Very useful.</description>
    </item>
    
    <item>
      <title>Modelling state in Swift</title>
      <link>https://www.swiftbysundell.com/posts/modelling-state-in-swift</link>
      <pubDate>Wed, 12 Jul 2017 08:18:53 +0000</pubDate>
      
      <description>Dealing with state is hard, error prone, and unavoidable. In this post, John Sundell looks at some of the commonly used techniques we can apply when dealing with state in Swift. I think the first two points - having a single source of truth, and making states exclusive - are key.</description>
    </item>
    
    <item>
      <title>Mixing Constant and Literal Strings</title>
      <link>http://www.figure.ink/blog/2017/5/29/mixing-constant-and-literal-strings</link>
      <pubDate>Fri, 02 Jun 2017 11:03:49 +0000</pubDate>
      
      <description>Joshua Emmons shows us how to avoid implementing a stringly-typed interface. Using an enum with an associated type, we can enforce the use of constants, while also allowing for unexpected and unknowable string values.</description>
    </item>
    
    <item>
      <title>Swift enums are sum types, and that makes them very interesting</title>
      <link>https://mislavjavor.github.io/2017-04-19/Swift-enums-are-sum-types.-That-makes-them-very-interesting</link>
      <pubDate>Sun, 23 Apr 2017 18:07:51 +0000</pubDate>
      
      <description>Mislav Javor with an explanation of the Algebraic product and sum types in terms of Swift struct and enum types. He demonstrates that enums being sum types makes them particularly interesting. Simple examples mean no PhD in mathematics is required!</description>
    </item>
    
    <item>
      <title>Reflectable Enums</title>
      <link>https://ijoshsmith.com/2017/04/08/reflectable-enums-in-swift-3/</link>
      <pubDate>Mon, 17 Apr 2017 08:07:13 +0000</pubDate>
      
      <description>What does an enum see when it looks in the Mirror? Josh Smiths demonstrates using Swift&#39;s Reflection API when working with enums cases which have associated values of varying types.</description>
    </item>
    
  </channel>
</rss>
